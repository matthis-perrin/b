{"version":3,"file":"index.js","mappings":"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","sources":["webpack://b/webpack/bootstrap","webpack://b/webpack/runtime/compat get default export","webpack://b/webpack/runtime/define property getters","webpack://b/webpack/runtime/hasOwnProperty shorthand","webpack://b/webpack/runtime/make namespace object","webpack://b/external node-commonjs \"webpack\"","webpack://b/external node-commonjs \"node:fs\"","webpack://b/external node-commonjs \"node:path\"","webpack://b/external node-commonjs \"chokidar\"","webpack://b/external node-commonjs \"eslint\"","webpack://b/./src/webpack/plugins/formatter.ts","webpack://b/./src/logger.ts","webpack://b/./src/global_error.ts","webpack://b/./src/exit_handler.ts","webpack://b/./src/webpack/plugins/standalone_plugin.ts","webpack://b/./src/webpack/plugins/eslint_plugin.ts","webpack://b/external node-commonjs \"fork-ts-checker-webpack-plugin\"","webpack://b/./src/webpack/plugins/fork_ts_checker_plugin.ts","webpack://b/external node-commonjs \"terser-webpack-plugin\"","webpack://b/external node-commonjs \"node:child_process\"","webpack://b/./src/webpack/plugins/yarn_plugin.ts","webpack://b/./src/webpack/configs/lib.ts","webpack://b/./src/webpack/common-configs/base_config.ts","webpack://b/./src/webpack/plugins/define_plugin.ts","webpack://b/./src/webpack/plugins/terser_plugin.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"webpack\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:path\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"chokidar\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"eslint\");","const ansiRegex = new RegExp(\n  [\n    '[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n    '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))',\n  ].join('|'),\n  'gu'\n);\nexport const stripAnsi = (s: string): string => s.replace(ansiRegex, '');\n","export const error: (message?: unknown, ...optionalParams: unknown[]) => void = console.error;\nexport const log: (message?: unknown, ...optionalParams: unknown[]) => void = console.log;\n","import {appendFileSync} from 'node:fs';\n\nimport {error} from '@src/logger';\n\nexport function globalError(...val: unknown[]): void {\n  for (const data of val) {\n    try {\n      const str =\n        typeof data === 'string'\n          ? data\n          : data instanceof Error\n            ? (data.stack ?? String(data))\n            : JSON.stringify(data);\n      error(str);\n      appendFileSync('error.log', str);\n    } catch {\n      // Don't log anything that went wrong during logging to prevent infinite loops\n    }\n  }\n}\n","import {globalError} from '@src/global_error';\n\nlet called = false;\nconst callbacks: (() => void | Promise<void>)[] = [];\n\nfunction runCallbacks(): void {\n  if (called) {\n    return;\n  }\n  called = true;\n  for (const fn of callbacks) {\n    Promise.resolve(fn()).catch((err: unknown) =>\n      globalError('Failure to run exit cleanup callback', err)\n    );\n  }\n}\n\nprocess.on('beforeExit', () => runCallbacks());\nprocess.on('exit', () => runCallbacks());\nprocess.on('SIGTERM', () => runCallbacks());\nprocess.on('SIGINT', () => runCallbacks());\nprocess.on('uncaughtException', err => {\n  globalError('uncaughtException', err);\n  runCallbacks();\n});\n\nexport function registerExitCallback(cb: () => void | Promise<void>): void {\n  callbacks.push(cb);\n}\n","import {Compiler} from 'webpack';\n\nimport {registerExitCallback} from '@src/exit_handler';\nimport {globalError} from '@src/global_error';\n\nexport abstract class StandalonePlugin {\n  protected abstract name: string;\n  protected context: string = process.cwd();\n\n  // INITIALIZE\n\n  public apply(compiler: Compiler): void {\n    this.context = compiler.context;\n    compiler.hooks.beforeRun.tapPromise(this.name, async () => await this.setupHandler(compiler));\n    compiler.hooks.watchRun.tapPromise(this.name, async () => await this.setupHandler(compiler));\n    compiler.hooks.shutdown.tapPromise(\n      this.name,\n      async () => await this.exitHandlerAsync(compiler)\n    );\n    registerExitCallback(() => this.exitHandler(compiler));\n  }\n\n  protected abstract setup(compiler: Compiler): void | Promise<void>;\n  protected abstract teardown(compiler: Compiler): void | Promise<void>;\n\n  // SETUP\n\n  private hasStarted = false;\n  private async setupHandler(compiler: Compiler): Promise<void> {\n    if (this.hasStarted) {\n      return;\n    }\n    this.hasStarted = true;\n    await this.setup(compiler);\n  }\n\n  // EXIT\n\n  private hasExited = false;\n  private exitHandler(compiler: Compiler): void {\n    if (this.hasExited) {\n      return;\n    }\n    this.hasExited = true;\n    Promise.resolve(this.teardown(compiler)).catch((err: unknown) => {\n      globalError(`Error during teardown of plugin ${this.name}`, err);\n    });\n  }\n  private async exitHandlerAsync(compiler: Compiler): Promise<void> {\n    if (this.hasExited) {\n      return;\n    }\n    this.hasExited = true;\n    await this.teardown(compiler);\n  }\n}\n","import {existsSync, readdirSync} from 'node:fs';\nimport {join} from 'node:path';\n\nimport {FSWatcher, watch} from 'chokidar';\n// eslint-disable-next-line n/no-extraneous-import\nimport {ESLint, Linter} from 'eslint';\nimport {Compilation, Compiler, WebpackError} from 'webpack';\n\nimport {WebpackPlugin} from '@src/webpack/models';\nimport {stripAnsi} from '@src/webpack/plugins/formatter';\nimport {StandalonePlugin} from '@src/webpack/plugins/standalone_plugin';\n\ninterface QueuedFileState {\n  status: 'queued';\n}\n\ninterface InProgressFileState {\n  status: 'in-progress';\n  eslintRunId: number;\n}\n\ninterface SuccessFileState {\n  status: 'success';\n  eslintRunId: number;\n}\n\ninterface FailureFileState {\n  status: 'failed';\n  eslintRunId: number;\n  messages: Linter.LintMessage[];\n}\n\ninterface ErroredFileState {\n  status: 'errored';\n  eslintRunId: number;\n  err: unknown;\n}\n\ntype FileState =\n  | QueuedFileState\n  | InProgressFileState\n  | SuccessFileState\n  | FailureFileState\n  | ErroredFileState;\n\nexport class EslintWebpackError extends WebpackError {\n  public override name = 'EslintWebpackError';\n  public constructor(\n    public readonly eslintRunId: number,\n    message: string,\n    filePath?: string,\n    loc?: WebpackError['loc'],\n    public readonly ruleId?: string\n  ) {\n    super(message);\n    if (filePath !== undefined) {\n      this.file = filePath;\n    }\n    if (loc) {\n      this.loc = loc;\n    }\n  }\n}\n\nconst RUN_ESLINT_INTERVAL = 500;\n\nclass EslintPlugin extends StandalonePlugin {\n  protected name = 'EslintPlugin';\n  private watcher: FSWatcher | undefined;\n  private runEslintInterval: NodeJS.Timeout | undefined;\n  private readonly fileStates = new Map<string, FileState>();\n  private compilation: Compilation | undefined;\n  private resolveAwaitIdlePromise: (() => void) | undefined;\n  private shouldRun = false;\n\n  protected async setup(compiler: Compiler): Promise<void> {\n    return await new Promise<void>(resolve => {\n      this.runEslintInterval = setInterval(() => this.runEslint(), RUN_ESLINT_INTERVAL);\n\n      // Generate the patterns of all the files across the workspace\n      const projectPath = this.context;\n      const workspacePath = join(projectPath, '..');\n      const workspaceDirs = readdirSync(workspacePath, {withFileTypes: true})\n        .filter(e => e.isDirectory() && existsSync(join(workspacePath, e.name, 'package.json')))\n        .map(e => join(workspacePath, e.name));\n      const patterns = ['src/**/*.ts', 'src/**/*.tsx'].flatMap(pattern =>\n        workspaceDirs.map(dir => join(dir, pattern))\n      );\n\n      this.watcher = watch(patterns);\n      this.watcher\n        .on('add', path => {\n          this.shouldRun = true;\n          if (path.startsWith(`${projectPath}/`)) {\n            this.fileStates.set(path, {status: 'queued'});\n          }\n        })\n        .on('change', path => {\n          this.shouldRun = true;\n          if (path.startsWith(`${projectPath}/`)) {\n            this.fileStates.set(path, {status: 'queued'});\n          }\n        })\n        .on('unlink', path => {\n          this.shouldRun = true;\n          if (path.startsWith(`${projectPath}/`)) {\n            this.fileStates.delete(path);\n          }\n        })\n        .on('ready', () => {\n          this.runEslint();\n          resolve();\n        });\n      compiler.hooks.compilation.tap(this.name, comp => {\n        this.compilation = comp;\n        this.syncErrorsAndWarnings();\n      });\n      compiler.hooks.afterCompile.tapAsync(this.name, (compilation, cb) => {\n        setTimeout(() => {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.awaitIdle().finally(cb);\n        }, RUN_ESLINT_INTERVAL);\n      });\n    });\n  }\n\n  private runEslint(): void {\n    if (!this.shouldRun) {\n      return;\n    }\n    this.shouldRun = false;\n    const filesQueued = [...this.fileStates.entries()];\n    if (filesQueued.length === 0) {\n      return;\n    }\n\n    const eslintRunId = Math.random();\n    for (const [filePath] of filesQueued) {\n      this.fileStates.set(filePath, {status: 'in-progress', eslintRunId});\n    }\n\n    const handleError = (err: unknown): void => {\n      for (const [filePath] of filesQueued) {\n        const currentState = this.fileStates.get(filePath);\n        if (\n          !currentState ||\n          currentState.status !== 'in-progress' ||\n          currentState.eslintRunId !== eslintRunId\n        ) {\n          continue;\n        }\n        this.fileStates.set(filePath, {status: 'errored', eslintRunId, err});\n      }\n    };\n\n    try {\n      const tsConfigPath = join(this.context, 'tsconfig.json');\n      const eslint = new ESLint({\n        cwd: this.context,\n        overrideConfig: {\n          settings: {\n            'import/resolver': {\n              typescript: {\n                project: tsConfigPath,\n              },\n            },\n          },\n          languageOptions: {\n            parserOptions: {\n              project: tsConfigPath,\n            },\n          },\n        },\n      });\n      eslint\n        .lintFiles(filesQueued.map(e => e[0]))\n        .then(results => {\n          for (const result of results) {\n            const currentState = this.fileStates.get(result.filePath);\n            if (\n              !currentState ||\n              currentState.status !== 'in-progress' ||\n              currentState.eslintRunId !== eslintRunId\n            ) {\n              continue;\n            }\n            if (result.messages.length > 0) {\n              this.fileStates.set(result.filePath, {\n                status: 'failed',\n                eslintRunId,\n                messages: result.messages,\n              });\n            } else {\n              this.fileStates.set(result.filePath, {status: 'success', eslintRunId});\n            }\n          }\n        })\n        .catch(handleError)\n        .finally(() => {\n          this.syncErrorsAndWarnings();\n          this.checkIdle();\n        });\n    } catch (err: unknown) {\n      handleError(err);\n      this.syncErrorsAndWarnings();\n      this.checkIdle();\n    }\n  }\n\n  private syncErrorsAndWarnings(): void {\n    if (!this.compilation) {\n      return;\n    }\n\n    // Errors\n    let eslintError: EslintWebpackError | undefined;\n    for (const fileState of this.fileStates.values()) {\n      if (fileState.status === 'errored') {\n        eslintError = new EslintWebpackError(\n          fileState.eslintRunId,\n          `Failure to run ESLint:\\n${\n            fileState.err instanceof Error ? fileState.err.stack : String(fileState.err)\n          }`\n        );\n      }\n    }\n    this.compilation.errors = [\n      ...(this.compilation.errors as (EslintWebpackError | WebpackError)[]).filter(\n        w => !('eslintRunId' in w)\n      ),\n      ...(eslintError ? [eslintError] : []),\n    ];\n\n    // Warnings\n    this.compilation.warnings = [\n      ...(this.compilation.warnings as (EslintWebpackError | WebpackError)[]).filter(\n        w => !('eslintRunId' in w)\n      ),\n      ...[...this.fileStates.entries()]\n        .sort((e1, e2) => e1[0].localeCompare(e2[0]))\n        .flatMap(([filePath, fileState]) => {\n          if (fileState.status !== 'failed') {\n            return [];\n          }\n          return fileState.messages.map(\n            msg =>\n              new EslintWebpackError(\n                fileState.eslintRunId,\n                stripAnsi(msg.message),\n                filePath,\n                {\n                  start: {line: msg.line, column: msg.column},\n                  end:\n                    msg.endLine === undefined\n                      ? undefined\n                      : {line: msg.endLine, column: msg.endColumn},\n                },\n                msg.ruleId ?? undefined\n              )\n          );\n        }),\n    ];\n  }\n\n  private checkIdle(): void {\n    if (!this.resolveAwaitIdlePromise) {\n      return;\n    }\n    for (const state of this.fileStates.values()) {\n      if (state.status === 'queued' || state.status === 'in-progress') {\n        return;\n      }\n    }\n    this.resolveAwaitIdlePromise();\n  }\n\n  private async awaitIdle(): Promise<void> {\n    return await new Promise<void>(resolve => {\n      this.resolveAwaitIdlePromise = resolve;\n      this.checkIdle();\n    });\n  }\n\n  protected async teardown(): Promise<void> {\n    clearInterval(this.runEslintInterval);\n    await this.watcher?.close();\n  }\n}\n\nexport function eslintPlugin(): WebpackPlugin {\n  return new EslintPlugin();\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"fork-ts-checker-webpack-plugin\");","import {join} from 'node:path';\n\nimport ForkTsCheckerWebpackPlugin from 'fork-ts-checker-webpack-plugin';\n\nimport {WebpackPlugin} from '@src/webpack/models';\n\nexport function forkTsCheckerPlugin(context: string): WebpackPlugin {\n  return new ForkTsCheckerWebpackPlugin({\n    typescript: {\n      diagnosticOptions: {\n        syntactic: true,\n        semantic: true,\n        declaration: false,\n        global: true,\n      },\n      mode: 'readonly',\n      configFile: join(context, 'tsconfig.json'),\n    },\n    formatter: 'basic',\n    logger: {log: () => {}, error: () => {}},\n  });\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"terser-webpack-plugin\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:child_process\");","import {exec} from 'node:child_process';\nimport {appendFileSync} from 'node:fs';\nimport {join} from 'node:path';\n\nimport {Compiler} from 'webpack';\n\nimport {error} from '@src/logger';\n\nexport class YarnPlugin {\n  public apply(compiler: Compiler): void {\n    compiler.hooks.beforeRun.tapAsync('YarnPlugin', (compiler, cb) => {\n      const command = [\n        'yarn',\n        'install',\n        '--audit',\n        '--check-files',\n        '--non-interactive',\n        '--production=false',\n      ].join(' ');\n      exec(command, {cwd: compiler.context}, (err, stdout, stderr) => {\n        if (err) {\n          error(`Yarn failed in ${compiler.context}`);\n          cb(err);\n          return;\n        }\n        const warnings = stderr.split('\\n').filter(l => l.trim().length > 0);\n        if (warnings.length > 0) {\n          appendFileSync(join(compiler.context, `.yarn-warnings.log`), stderr);\n        }\n        cb();\n      });\n    });\n  }\n}\n","import {Configuration} from 'webpack';\n\nimport {baseConfig} from '@src/webpack/common-configs/base_config';\n\nexport function config(opts: {context: string; watch: boolean}): Configuration {\n  return baseConfig(opts);\n}\n","import {Configuration} from 'webpack';\n\nimport {definePlugin} from '@src/webpack/plugins/define_plugin';\nimport {eslintPlugin} from '@src/webpack/plugins/eslint_plugin';\nimport {forkTsCheckerPlugin} from '@src/webpack/plugins/fork_ts_checker_plugin';\nimport {terserPlugin} from '@src/webpack/plugins/terser_plugin';\nimport {YarnPlugin} from '@src/webpack/plugins/yarn_plugin';\n\nexport function baseConfig(opts: {context: string; watch: boolean}): Configuration {\n  const {context} = opts;\n\n  return {\n    mode: 'none',\n    context,\n    entry: {},\n    devtool: 'source-map',\n    plugins: [new YarnPlugin(), forkTsCheckerPlugin(context), eslintPlugin(), definePlugin()],\n    stats: false,\n    infrastructureLogging: {level: 'error'},\n    optimization: {\n      minimize: true,\n      minimizer: [terserPlugin()],\n      concatenateModules: true,\n      sideEffects: true,\n    },\n    experiments: {\n      backCompat: true,\n    },\n  };\n}\n","import webpack from 'webpack'; // eslint-disable-line import/no-named-as-default\n\nimport {WebpackPlugin} from '@src/webpack/models';\n\nexport function definePlugin(): WebpackPlugin {\n  return new webpack.DefinePlugin({\n    'process.env.NODE_ENV': '\"production\"',\n  });\n}\n","import TerserWebpackPlugin from 'terser-webpack-plugin';\n\nimport {WebpackPlugin} from '@src/webpack/models';\n\nexport function terserPlugin(): WebpackPlugin {\n  return new TerserWebpackPlugin({\n    terserOptions: {\n      format: {\n        comments: false,\n      },\n    },\n    extractComments: false,\n  });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","__WEBPACK_EXTERNAL_createRequire","url","ansiRegex","RegExp","join","error","console","log","globalError","val","data","str","Error","stack","String","JSON","stringify","appendFileSync","called","callbacks","runCallbacks","fn","Promise","resolve","catch","err","process","on","StandalonePlugin","context","cwd","apply","compiler","cb","this","hooks","beforeRun","tapPromise","name","async","setupHandler","watchRun","shutdown","exitHandlerAsync","exitHandler","push","hasStarted","setup","hasExited","teardown","EslintWebpackError","WebpackError","constructor","eslintRunId","message","filePath","loc","ruleId","super","undefined","file","EslintPlugin","fileStates","Map","shouldRun","runEslintInterval","setInterval","runEslint","projectPath","workspacePath","workspaceDirs","readdirSync","withFileTypes","filter","e","isDirectory","existsSync","map","patterns","flatMap","pattern","dir","watcher","watch","path","startsWith","set","status","delete","compilation","tap","comp","syncErrorsAndWarnings","afterCompile","tapAsync","setTimeout","awaitIdle","finally","filesQueued","entries","length","Math","random","handleError","currentState","tsConfigPath","ESLint","overrideConfig","settings","typescript","project","languageOptions","parserOptions","lintFiles","then","results","result","messages","checkIdle","eslintError","fileState","values","errors","w","warnings","sort","e1","e2","localeCompare","msg","replace","start","line","column","end","endLine","endColumn","resolveAwaitIdlePromise","state","clearInterval","close","forkTsCheckerPlugin","ForkTsCheckerWebpackPlugin","diagnosticOptions","syntactic","semantic","declaration","global","mode","configFile","formatter","logger","YarnPlugin","command","exec","stdout","stderr","split","l","trim","config","opts","entry","devtool","plugins","webpack","stats","infrastructureLogging","level","optimization","minimize","minimizer","TerserWebpackPlugin","terserOptions","format","comments","extractComments","concatenateModules","sideEffects","experiments","backCompat","baseConfig"],"sourceRoot":""}