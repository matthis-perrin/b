{"version":3,"file":"index.js","mappings":"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","sources":["webpack://b/webpack/bootstrap","webpack://b/webpack/runtime/define property getters","webpack://b/webpack/runtime/hasOwnProperty shorthand","webpack://b/webpack/runtime/make namespace object","webpack://b/external node-commonjs \"node:child_process\"","webpack://b/external node-commonjs \"node:path\"","webpack://b/external node-commonjs \"webpack\"","webpack://b/external node-commonjs \"node:fs\"","webpack://b/./src/logger.ts","webpack://b/./src/global_error.ts","webpack://b/./src/exit_handler.ts","webpack://b/external node-commonjs \"node:url\"","webpack://b/external node-commonjs \"prettier\"","webpack://b/./src/fs.ts","webpack://b/external node-commonjs \"node:crypto\"","webpack://b/./src/models.ts","webpack://b/./src/string_utils.ts","webpack://b/./src/project/generate_project.ts","webpack://b/./src/type_utils.ts","webpack://b/./src/project/generate_workspace.ts","webpack://b/external node-commonjs \"node:os\"","webpack://b/./src/child_process_utils.ts","webpack://b/./src/webpack-runner/log.ts","webpack://b/./src/webpack-runner/deployment.ts","webpack://b/external node-commonjs \"node:fs/promises\"","webpack://b/./src/webpack-runner/error_grouper.ts","webpack://b/./src/webpack-runner/error_parser.ts","webpack://b/external node-commonjs \"node:http\"","webpack://b/./src/webpack-runner/icon_server.ts","webpack://b/external node-commonjs \"ansi-colors\"","webpack://b/./src/webpack-runner/error_formatter.ts","webpack://b/./src/webpack-runner/text_table.ts","webpack://b/./src/webpack-runner/renderer.ts","webpack://b/./src/webpack-runner/ip.ts","webpack://b/./src/webpack-runner/runner_lock.ts","webpack://b/./src/webpack-runner/runner.ts","webpack://b/./src/webpack-runner/env_definition_file.ts","webpack://b/./src/project/vscode_workspace.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:child_process\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:path\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"webpack\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:fs\");","export const error: (message?: unknown, ...optionalParams: unknown[]) => void = console.error;\nexport const log: (message?: unknown, ...optionalParams: unknown[]) => void = console.log;\n","import {appendFileSync} from 'node:fs';\n\nimport {error} from '@src/logger';\n\nexport function globalError(...val: unknown[]): void {\n  for (const data of val) {\n    try {\n      const str =\n        typeof data === 'string'\n          ? data\n          : data instanceof Error\n            ? (data.stack ?? String(data))\n            : JSON.stringify(data);\n      error(str);\n      appendFileSync('error.log', str);\n    } catch {\n      // Don't log anything that went wrong during logging to prevent infinite loops\n    }\n  }\n}\n","import {globalError} from '@src/global_error';\n\nlet called = false;\nconst callbacks: (() => void | Promise<void>)[] = [];\n\nfunction runCallbacks(): void {\n  if (called) {\n    return;\n  }\n  called = true;\n  for (const fn of callbacks) {\n    Promise.resolve(fn()).catch((err: unknown) =>\n      globalError('Failure to run exit cleanup callback', err)\n    );\n  }\n}\n\nprocess.on('beforeExit', () => runCallbacks());\nprocess.on('exit', () => runCallbacks());\nprocess.on('SIGTERM', () => runCallbacks());\nprocess.on('SIGINT', () => runCallbacks());\nprocess.on('uncaughtException', err => {\n  globalError('uncaughtException', err);\n  runCallbacks();\n});\n\nexport function registerExitCallback(cb: () => void | Promise<void>): void {\n  callbacks.push(cb);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:url\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"prettier\");","import {exec} from 'node:child_process';\nimport {promises, readFileSync} from 'node:fs';\nimport {dirname, join} from 'node:path';\n\nimport {BuiltInParserName, format} from 'prettier';\n\nexport const {access, readFile: readFileInternal, readdir, stat} = promises;\nconst {writeFile, mkdir, rm} = promises;\n\nexport async function readFile(path: string): Promise<string> {\n  const buffer = await readFileInternal(path);\n  return buffer.toString();\n}\n\nconst prettierConfig = (parser: BuiltInParserName) =>\n  ({\n    parser,\n    printWidth: 100,\n    singleQuote: true,\n    trailingComma: 'es5',\n    bracketSpacing: false,\n    arrowParens: 'avoid',\n    endOfLine: 'auto',\n  }) as const;\n\nexport async function prettierFormat(str: string, parser: BuiltInParserName): Promise<string> {\n  return await format(str, prettierConfig(parser));\n}\n\nexport async function writeRawFile(path: string, content: string): Promise<void> {\n  await mkdir(dirname(path), {recursive: true});\n  await writeFile(path, content);\n}\n\nexport async function prettyJson(json: unknown, opts?: {compact?: boolean}): Promise<string> {\n  const {compact} = opts ?? {};\n  return await format(\n    compact ? JSON.stringify(json) : JSON.stringify(json, undefined, 2),\n    prettierConfig('json')\n  );\n}\nexport async function prettyJsonc(json: unknown, opts?: {compact?: boolean}): Promise<string> {\n  const {compact} = opts ?? {};\n  return await format(\n    compact ? JSON.stringify(json) : JSON.stringify(json, undefined, 2),\n    prettierConfig('jsonc')\n  );\n}\nexport async function writeJsonFile(path: string, json: unknown): Promise<void> {\n  await writeRawFile(path, await prettyJson(json));\n}\n\nexport async function prettyJs(js: string): Promise<string> {\n  return await format(js, prettierConfig('babel'));\n}\nexport async function writeJsFile(path: string, js: string): Promise<void> {\n  await writeRawFile(path, await prettyJs(js));\n}\n\nexport async function prettyTs(ts: string): Promise<string> {\n  return await format(ts, prettierConfig('typescript'));\n}\nexport async function writeTsFile(path: string, ts: string): Promise<void> {\n  await writeRawFile(path, await prettyTs(ts));\n}\n\nexport async function writeRawFileIfNotExists(path: string, content: string): Promise<void> {\n  if (await exists(path)) {\n    return;\n  }\n  await writeRawFile(path, content);\n}\n\nexport async function rmDir(dirPath: string): Promise<void> {\n  await rm(dirPath, {recursive: true, force: true});\n}\n\nexport async function cleanDir(dirPath: string): Promise<void> {\n  try {\n    await rmDir(dirPath);\n  } finally {\n    await mkdir(dirPath, {recursive: true});\n  }\n}\n\nexport async function cp(from: string, to: string): Promise<void> {\n  return await new Promise((resolve, reject) => {\n    exec(`cp -R ${from} ${to}`, err => (err ? reject(err) : resolve()));\n  });\n}\n\nexport async function exists(path: string): Promise<boolean> {\n  try {\n    await access(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function maybeReadFile(path: string): Promise<string | undefined> {\n  try {\n    const fileContent = await readFile(path);\n    return fileContent.toString();\n  } catch {\n    return undefined;\n  }\n}\n\nexport function maybeReadFileSync(path: string): string | undefined {\n  try {\n    const fileContent = readFileSync(path);\n    return fileContent.toString();\n  } catch {\n    return undefined;\n  }\n}\n\nexport async function listFiles(path: string): Promise<string[]> {\n  const files: string[] = [];\n  const ents = await readdir(path, {withFileTypes: true});\n  const promises: Promise<void>[] = [];\n  for (const ent of ents) {\n    const entPath = join(path, ent.name);\n    if (ent.isDirectory()) {\n      promises.push(\n        listFiles(entPath).then(subFiles => {\n          files.push(...subFiles);\n        })\n      );\n    } else if (ent.isFile()) {\n      files.push(entPath);\n    }\n  }\n  await Promise.all(promises);\n  return files;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:crypto\");","import {Brand} from '@src/type_utils';\n\nexport type WorkspaceName = Brand<string, 'WorkspaceName'>;\nexport type ProjectName = Brand<string, 'ProjectName'>;\n\n//\n// Project type\n//\n\nexport enum ProjectType {\n  Web = 'web',\n  LambdaFunction = 'lambda_function',\n  LambdaApi = 'lambda_api',\n  LambdaWebApi = 'lambda_web_api',\n  NodeScript = 'node_script',\n  Shared = 'shared',\n  SharedNode = 'shared-node',\n  SharedWeb = 'shared-web',\n}\n\nexport enum EslintType {\n  Web = 'web',\n  Node = 'node',\n  Lib = 'lib',\n}\n\nexport enum TsConfigType {\n  Web = 'web',\n  Node = 'node',\n  Lib = 'lib',\n}\nexport enum WebpackType {\n  Web = 'web',\n  Lib = 'lib', // shared\n  Lambda = 'lambda',\n  NodeScript = 'node-script',\n}\n\nexport interface ProjectTypeMetadata {\n  eslint: EslintType;\n  tsconfig: TsConfigType;\n  webpack?: WebpackType;\n}\n\nexport const PROJECT_TYPE_TO_METADATA = {\n  [ProjectType.Web]: {\n    eslint: EslintType.Web,\n    tsconfig: TsConfigType.Web,\n    webpack: WebpackType.Web,\n  },\n  [ProjectType.LambdaFunction]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lambda,\n  },\n  [ProjectType.LambdaApi]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lambda,\n  },\n  [ProjectType.LambdaWebApi]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lambda,\n  },\n  [ProjectType.NodeScript]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.NodeScript,\n  },\n  [ProjectType.Shared]: {\n    eslint: EslintType.Lib,\n    tsconfig: TsConfigType.Lib,\n    webpack: WebpackType.Lib,\n  },\n  [ProjectType.SharedNode]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lib,\n  },\n  [ProjectType.SharedWeb]: {\n    eslint: EslintType.Web,\n    tsconfig: TsConfigType.Web,\n    webpack: WebpackType.Lib,\n  },\n} satisfies Record<ProjectType, ProjectTypeMetadata>;\n\n//\n// Workspace Fragment type\n//\n\nexport enum WorkspaceFragmentType {\n  StaticWebsite = 'static-website',\n  StandaloneLambda = 'standalone-lambda',\n  ApiLambda = 'api-lambda',\n  WebApp = 'web-app',\n  NodeScript = 'node-script',\n  Shared = 'shared',\n  SharedNode = 'shared-node',\n  SharedWeb = 'shared-web',\n}\n\ninterface WorkspaceFragmentBase {\n  type: WorkspaceFragmentType;\n}\n\nexport interface WebAppAuthentication {\n  enabled: boolean;\n}\n\nexport interface WorkspaceFragmentRegistry {\n  [WorkspaceFragmentType.StaticWebsite]: {\n    type: WorkspaceFragmentType.StaticWebsite;\n    websiteName: ProjectName;\n    domain: string | undefined;\n  };\n  [WorkspaceFragmentType.StandaloneLambda]: {\n    type: WorkspaceFragmentType.StandaloneLambda;\n    lambdaName: ProjectName;\n    alarmEmail: string | undefined;\n    cloudwatchTriggerMinutes: number | undefined;\n  };\n  [WorkspaceFragmentType.ApiLambda]: {\n    type: WorkspaceFragmentType.ApiLambda;\n    apiName: ProjectName;\n    alarmEmail: string | undefined;\n    domain: string | undefined;\n  };\n  [WorkspaceFragmentType.WebApp]: {\n    type: WorkspaceFragmentType.WebApp;\n    appName: string;\n    alarmEmail: string | undefined;\n    domain: string | undefined;\n    authentication: WebAppAuthentication;\n  };\n  [WorkspaceFragmentType.NodeScript]: {\n    type: WorkspaceFragmentType.NodeScript;\n    scriptName: ProjectName;\n  };\n  [WorkspaceFragmentType.Shared]: {\n    type: WorkspaceFragmentType.Shared;\n  };\n  [WorkspaceFragmentType.SharedNode]: {\n    type: WorkspaceFragmentType.SharedNode;\n  };\n  [WorkspaceFragmentType.SharedWeb]: {\n    type: WorkspaceFragmentType.SharedWeb;\n  };\n}\n\ntype RegistryIsValid =\n  WorkspaceFragmentRegistry extends Record<WorkspaceFragmentType, WorkspaceFragmentBase>\n    ? boolean\n    : never;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction validateRegistry(): RegistryIsValid {\n  return true;\n}\n\nexport function filterFragments<T extends WorkspaceFragmentType>(\n  frags: WorkspaceFragment[],\n  type: T\n): WorkspaceFragmentRegistry[T][] {\n  return frags.filter(frag => frag.type === type) as WorkspaceFragmentRegistry[T][];\n}\n\nexport type WorkspaceFragment = WorkspaceFragmentRegistry[keyof WorkspaceFragmentRegistry];\n","export function capitalize(value: string): string {\n  const [firstChar] = value;\n  return firstChar === undefined ? '' : firstChar.toUpperCase() + value.slice(1);\n}\n\nexport function uncapitalize(value: string): string {\n  const [firstChar] = value;\n  return firstChar === undefined ? '' : firstChar.toLowerCase() + value.slice(1);\n}\n\nexport function pascalCase(str: string): string {\n  return str\n    .toLowerCase()\n    .split(/[^a-z]+/u)\n    .map(s => capitalize(s))\n    .join('');\n}\n\nexport function upperCase(str: string): string {\n  return str\n    .toUpperCase()\n    .split(/[^A-Z]+/u)\n    .join('_');\n}\n\nexport function lowerCase(str: string): string {\n  return str\n    .toLowerCase()\n    .split(/[^a-z]+/u)\n    .join('_');\n}\n","import {join, relative} from 'node:path';\nimport {fileURLToPath} from 'node:url';\n\nimport {listFiles, prettierFormat, readFile} from '@src/fs';\nimport {ProjectType, WorkspaceFragment} from '@src/models';\nimport {generateSharedFiles} from '@src/project/dynamic_template';\nimport {WorkspaceProject, writeWorkspaceFile} from '@src/project/generate_workspace';\nimport {FileHash, Workspace} from '@src/project/vscode_workspace';\nimport {randomStringSafe} from '@src/rand_safe';\nimport {upperCase} from '@src/string_utils';\n\nconst TEMPLATES_PATH = join(fileURLToPath(import.meta.url), '../templates');\n\nexport async function generateProject(opts: {\n  dst: string;\n  project: WorkspaceProject;\n  allFragments: WorkspaceFragment[];\n  workspace: Workspace | undefined;\n  workspaceName: string;\n}): Promise<FileHash[]> {\n  const {dst, project, allFragments, workspace, workspaceName} = opts;\n\n  const written: FileHash[] = [];\n  const {projectName, type, vars} = project;\n  const defaultVars = {\n    __WORKSPACE_NAME__: workspaceName,\n    __WORKSPACE_NAME_UPPERCASE__: upperCase(workspaceName),\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    __COOKIE_ENCRYPTION_KEY__: randomStringSafe(32),\n  };\n\n  // Copy template files\n  const templatePath = join(TEMPLATES_PATH, type);\n  const files = await listFiles(templatePath);\n  const filesToWrite = [\n    ...(await Promise.all(\n      files.map(async file => {\n        const relativePath = relative(templatePath, file);\n        const dstPath = join(projectName, relativePath);\n\n        let content = await readFile(file);\n        if (file.endsWith('package.json')) {\n          const packageJson = JSON.parse(await readFile(file));\n          packageJson['name'] = projectName;\n          content = JSON.stringify(packageJson, undefined, 2);\n        }\n        for (const [varName, varValue] of Object.entries({...vars, ...defaultVars})) {\n          content = content.replaceAll(varName, varValue);\n        }\n\n        return {path: dstPath, content};\n      })\n    )),\n  ];\n  if (type === ProjectType.Shared) {\n    filesToWrite.push(...generateSharedFiles(allFragments));\n  }\n\n  await Promise.all(\n    filesToWrite.map(async ({path, content}) => {\n      let formattedContent = content;\n\n      // Handle @matthis/skip-file directives\n      const skipFileMatches = content.matchAll(\n        /\\/\\/ @matthis\\/skip-file:(?<flagName>[^:]+)(?<negate>:not)?:(?<flagValue>[^\\s]*)/gu\n      );\n      for (const skipFileMatch of skipFileMatches) {\n        const {flagName, negate, flagValue} = skipFileMatch.groups ?? {};\n        if (flagMatch({flagName, negate, flagValue}, project, allFragments)) {\n          return;\n        }\n      }\n      // Remove the lines that contain the @matthis/skip-file directives\n      formattedContent = formattedContent.replaceAll(\n        / *\\/\\/ @matthis\\/skip-file:[^:]+(?::not)?:[^\\n]*\\n/gu,\n        ''\n      );\n\n      // Handle @matthis/start and @matthis/end directives\n      const fileLines: string[] = [];\n      const depth: ('include' | 'exclude')[] = ['include'];\n      for (const line of formattedContent.split('\\n')) {\n        // Look for @matthis/end\n        if (line.includes('@matthis/end')) {\n          depth.pop();\n          continue;\n        }\n\n        // Look for @matthis/start\n        const matchStart =\n          /.*\\/\\/ @matthis\\/start:(?<flagName>[^:]+)(?<negate>:not)?:(?<flagValue>[^\\s]*).*/u.exec(\n            line\n          );\n        if (matchStart) {\n          const {flagName, negate, flagValue} = matchStart.groups ?? {};\n          depth.push(\n            flagMatch({flagName, negate, flagValue}, project, allFragments) ? 'include' : 'exclude'\n          );\n          continue;\n        }\n\n        if (depth.at(-1) === 'include') {\n          fileLines.push(line);\n        }\n      }\n      formattedContent = fileLines.join('\\n');\n\n      if (path.endsWith('.ts') || path.endsWith('.tsx')) {\n        formattedContent = await prettierFormat(formattedContent, 'typescript');\n      }\n      if (path.endsWith('.json')) {\n        formattedContent = await prettierFormat(formattedContent, 'json');\n      }\n      written.push(await writeWorkspaceFile(workspace, dst, path, formattedContent));\n    })\n  );\n\n  return written;\n}\n\nfunction flagMatch(\n  flag: {flagName?: string; negate?: string; flagValue?: string},\n  project: WorkspaceProject,\n  allFragments: WorkspaceFragment[]\n): boolean {\n  const {flagName, negate, flagValue} = flag;\n  if (flagName === undefined || flagValue === undefined) {\n    return false;\n  }\n  const projectFlagValue = project.flags(allFragments)[flagName];\n  const projectFlagMatchValue = projectFlagValue === flagValue;\n  return negate !== undefined ? !projectFlagMatchValue : projectFlagMatchValue;\n}\n","function notUndefined<T>(val: T | undefined): val is T {\n  return val !== undefined;\n}\n\nexport function isString(val: unknown): val is string {\n  return typeof val === 'string';\n}\n\nexport function isNumber(val: unknown): val is number {\n  return typeof val === 'number';\n}\n\nexport function iterNumberEnum<T extends Record<string, string | number>>(e: T): T[keyof T][] {\n  return Object.values(e).filter(isNumber) as unknown as T[keyof T][];\n}\n\nexport function iterStringEnum<T extends Record<string, string>>(e: T): T[keyof T][] {\n  return Object.values(e).filter(isString) as unknown as T[keyof T][];\n}\n\nexport function removeUndefined<T>(arr: (T | undefined)[]): T[] {\n  return arr.filter(notUndefined);\n}\n\nexport function removeUndefinedOrNullProps<T extends Record<string, unknown>>(obj: T): {} {\n  return Object.fromEntries(\n    Object.entries(obj).filter(e => e[1] !== undefined && e[1] !== null)\n  ) as T;\n}\n\nexport function neverHappens(value: never, errorMessage?: string): never {\n  throw new Error(errorMessage);\n}\n\nexport type AnyInterface<T> = {[K in keyof T]: unknown};\n\nexport function asMap(value: unknown): Record<string, unknown> | undefined;\nexport function asMap(\n  value: unknown,\n  defaultValue: Record<string, unknown>\n): Record<string, unknown>;\nexport function asMap(\n  value: unknown,\n  defaultValue?: Record<string, unknown>\n): Record<string, unknown> | undefined {\n  return typeof value === 'object' && value !== null && !Array.isArray(value)\n    ? (value as Record<string, unknown>)\n    : defaultValue;\n}\nexport function asMapOrThrow(value: unknown): Record<string, unknown> {\n  const valueAsMap = asMap(value);\n  if (valueAsMap === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a map`);\n  }\n  return valueAsMap;\n}\n\nexport function asJson(value: string): Record<string, unknown> | undefined;\nexport function asJson(\n  value: string,\n  defaultValue: Record<string, unknown>\n): Record<string, unknown>;\nexport function asJson(\n  value: string,\n  defaultValue?: Record<string, unknown>\n): Record<string, unknown> | undefined {\n  try {\n    const json = JSON.parse(value);\n    const res = asMap(json);\n    return res ?? defaultValue;\n  } catch {\n    return defaultValue;\n  }\n}\nexport function asJsonOrThrow(value: string): Record<string, unknown> {\n  const valueAsJson = asJson(value);\n  if (valueAsJson === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a valid JSON string of a map`);\n  }\n  return valueAsJson;\n}\n\nexport function asJsonString(value: unknown): Record<string, unknown> | undefined;\nexport function asJsonString(\n  value: unknown,\n  defaultValue: Record<string, unknown>\n): Record<string, unknown>;\nexport function asJsonString(\n  value: unknown,\n  defaultValue?: Record<string, unknown>\n): Record<string, unknown> | undefined {\n  const str = asString(value);\n  return str === undefined\n    ? defaultValue\n    : defaultValue === undefined\n      ? asJson(str)\n      : asJson(str, defaultValue);\n}\nexport function asJsonStringOrThrow(value: unknown): Record<string, unknown> {\n  return asJsonOrThrow(asStringOrThrow(value));\n}\n\nexport function asString<T extends string = string>(value: unknown): T | undefined;\nexport function asString<T extends string = string>(value: unknown, defaultValue: string): T;\nexport function asString<T extends string = string>(\n  value: unknown,\n  defaultValue?: string\n): T | undefined {\n  return (typeof value === 'string' ? value : defaultValue) as T;\n}\nexport function asStringOrThrow<T extends string = string>(value: unknown): T {\n  const valueAsString = asString<T>(value);\n  if (valueAsString === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a string`);\n  }\n  return valueAsString;\n}\n\nexport function asStringEnum<T extends Record<string, string>>(\n  value: unknown,\n  enu: T\n): T[keyof T] | undefined;\nexport function asStringEnum<T extends Record<string, string>>(\n  value: unknown,\n  enu: T,\n  defaultValue: T[keyof T]\n): T[keyof T];\nexport function asStringEnum<T extends Record<string, string>>(\n  value: unknown,\n  enu: T,\n  defaultValue?: T[keyof T]\n): T[keyof T] | undefined {\n  return (\n    typeof value === 'string' && Object.values(enu).includes(value as T[keyof T])\n      ? value\n      : defaultValue\n  ) as T[keyof T];\n}\nexport function asStringEnumOrThrow<T extends Record<string, string>>(\n  value: unknown,\n  enu: T\n): T[keyof T] {\n  const valueAsString = asStringEnum<T>(value, enu);\n  if (valueAsString === undefined) {\n    throw new Error(\n      `Invalid value: \\`${value}\\` is not a string or not one of ${JSON.stringify(\n        Object.values(enu)\n      )}`\n    );\n  }\n  return valueAsString;\n}\n\nexport function asArray<T = unknown>(value: unknown): T[] | undefined;\nexport function asArray<T = unknown>(value: unknown, defaultValue: unknown[]): T[];\nexport function asArray<T = unknown>(value: unknown, defaultValue?: unknown[]): T[] | undefined {\n  return (Array.isArray(value) ? value : defaultValue) as T[];\n}\nexport function asArrayOrThrow<T = unknown>(value: unknown): T[] {\n  if (!Array.isArray(value)) {\n    throw new Error(`Invalid value: \\`${value}\\` is not an array`);\n  }\n  return value as T[];\n}\n\nexport function asStringArray<T extends string = string>(value: unknown): T[] | undefined;\nexport function asStringArray<T extends string = string>(\n  value: unknown,\n  defaultValue: string[]\n): T[];\nexport function asStringArray<T extends string = string>(\n  value: unknown,\n  defaultValue?: string[]\n): T[] | undefined {\n  const arr = asArray(value);\n  if (arr === undefined) {\n    return defaultValue as T[];\n  }\n  return removeUndefined(arr.map(s => asString<T>(s)));\n}\n\nexport function asStringArrayOrThrow<T extends string = string>(value: unknown): T[] {\n  const arr = asArrayOrThrow(value);\n  return arr.map(s => asStringOrThrow<T>(s));\n}\n\nexport function asMapArray(value: unknown): Record<string, unknown>[] | undefined;\nexport function asMapArray(\n  value: unknown,\n  defaultValue: Record<string, unknown>[]\n): Record<string, unknown>[];\nexport function asMapArray(\n  value: unknown,\n  defaultValue?: Record<string, unknown>[]\n): Record<string, unknown>[] | undefined {\n  const arr = asArray(value);\n  if (arr === undefined) {\n    return defaultValue;\n  }\n  return removeUndefined(arr.map(s => asMap(s)));\n}\nexport function asMapArrayOrThrow(value: unknown): Record<string, unknown>[] {\n  const arr = asArrayOrThrow(value);\n  return arr.map(s => asMapOrThrow(s));\n}\n\nexport function asNumber<T extends number = number>(value: unknown): T | undefined;\nexport function asNumber<T extends number = number>(value: unknown, defaultValue: number): T;\nexport function asNumber<T extends number = number>(\n  value: unknown,\n  defaultValue?: number\n): T | undefined {\n  if (typeof value === 'number') {\n    return (!isNaN(value) ? value : defaultValue) as T;\n  }\n  if (typeof value === 'string') {\n    try {\n      const parsedValue = parseFloat(value);\n      return (!isNaN(parsedValue) ? parsedValue : defaultValue) as T;\n    } catch {\n      return defaultValue as T;\n    }\n  }\n  return defaultValue as T;\n}\nexport function asNumberOrThrow<T extends number = number>(value: unknown): T {\n  const valueAsNumber = asNumber(value);\n  if (valueAsNumber === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a number`);\n  }\n  return valueAsNumber as T;\n}\n\nexport function asBoolean(value: unknown): boolean | undefined;\nexport function asBoolean(value: unknown, defaultValue: boolean): boolean;\nexport function asBoolean(value: unknown, defaultValue?: boolean): boolean | undefined {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  if (typeof value === 'number') {\n    return !isNaN(value) ? value !== 0 : false;\n  }\n  if (typeof value === 'string') {\n    if (value === '0' || value === 'false') {\n      return false;\n    } else if (value === '1' || value === 'true') {\n      return true;\n    }\n    return defaultValue;\n  }\n  return defaultValue;\n}\n\nexport function asBooleanOrThrow(value: unknown): boolean {\n  const valueAsBoolean = asBoolean(value);\n  if (valueAsBoolean === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a boolean`);\n  }\n  return valueAsBoolean;\n}\n\nconst TIMESTAMP_REGEX = /^[0-9]{1,15}$/u;\nexport function asDate(value: unknown): Date | undefined;\nexport function asDate(value: unknown, defaultValue: Date): Date;\nexport function asDate(value: unknown, defaultValue?: Date): Date | undefined {\n  const date =\n    value instanceof Date\n      ? value\n      : new Date(\n          typeof value === 'string' && TIMESTAMP_REGEX.test(value)\n            ? parseFloat(value)\n            : String(value)\n        );\n  return isNaN(date.getTime()) ? defaultValue : date;\n}\n\nexport function asDateOrThrow(value: unknown): Date {\n  const valueAsDate = asDate(value);\n  if (valueAsDate === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` cannot be parsed as a Date`);\n  }\n  return valueAsDate;\n}\n\n// export function asDate(value: unknown): Date | undefined;\n// export function asDate(value: unknown, defaultValue: Date): Date;\n// export function asDate(value: unknown, defaultValue?: Date): Date | undefined {\n//   if (typeof value === 'number') {\n//     return new Date(value);\n//   }\n//   return value instanceof Date ? value : defaultValue;\n// }\n\nexport function isNull<T>(val: T | null): val is null {\n  return val === null;\n}\n\nexport function asError(err: unknown): Error {\n  return err instanceof Error ? err : new Error(typeof err === 'string' ? err : String(err));\n}\n\nexport function errorAsString(err: unknown): string {\n  const errorMap = asMap(err);\n  if (errorMap === undefined) {\n    return asString(err) ?? String(err);\n  }\n\n  const errorMessage = asString(errorMap['message']);\n  if (errorMessage === undefined) {\n    return String(err);\n  }\n  return errorMessage;\n}\n\nexport function errorAndStackAsString(err: unknown): string {\n  const errorMap = asMap(err);\n  if (errorMap === undefined) {\n    return asString(err) ?? String(err);\n  }\n\n  const stack = asString(errorMap['stack']);\n  if (stack === undefined) {\n    return String(err);\n  }\n  return stack;\n}\n\nexport function asConstantOrThrow<T>(value: unknown, expected: T): T {\n  if (value !== expected) {\n    throw new Error(`Invalid value: \\`${value}\\`, expected \\`${expected}\\``);\n  }\n  return value as T;\n}\n\n// export function asParsedJson<T>(json: string): T {\n//   try {\n//     return JSON.parse(json) as T;\n//   } catch {\n//     const defaultValue = {};\n//     return defaultValue as T;\n//   }\n// }\nexport function parseJson(\n  json: string\n): {res: unknown; err: undefined} | {res: undefined; err: unknown} {\n  try {\n    return {res: JSON.parse(json), err: undefined};\n  } catch (err: unknown) {\n    return {err, res: undefined};\n  }\n}\nexport type Brand<Type, Name> = Type & {__brand: Name};\nexport type StringBrand = string & {__brand: string};\nexport type NumberBrand = number & {__brand: number};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type AnyBrand = (string | number) & {__brand: any};\n\nexport type Untrusted<T> = T extends\n  | Function\n  | Date\n  | boolean\n  | number\n  | string\n  | undefined\n  | null\n  | unknown[]\n  ? unknown\n  : {[P in keyof T]?: Untrusted<T[P]>};\n\nexport type DeepPartial<T> = T extends\n  | Function\n  | Date\n  | boolean\n  | number\n  | string\n  | undefined\n  | null\n  | unknown[]\n  ? T\n  : {[P in keyof T]?: DeepPartial<T[P]>};\n\nexport type MapInterface<I, Type> = {[Key in keyof I]: Type};\n// Get all the keys of a type including the optional attributes\ntype NonHomomorphicKeys<T> = ({[P in keyof T]: P} & None)[keyof T];\nexport type MapInterfaceStrict<I, Type> = {[Key in NonHomomorphicKeys<I>]: Type};\n\ntype KeysOfType<T, Type> = {[Key in keyof T]: T[Key] extends Type ? Key : never}[keyof T];\nexport type RestrictInterface<T, Type> = Pick<T, KeysOfType<T, Type>>;\n\ninterface RecursiveArray<T> extends Array<T | RecursiveArray<T>> {}\nexport type NestedArray<T> = (T | RecursiveArray<T>)[];\n\n// Type for an empty object (ie: {})\nexport type None = Record<string, never>;\n\nexport type NonEmptyArray<T> = [T, ...T[]];\nexport function isNonEmptyArray<T>(val: T[]): val is NonEmptyArray<T> {\n  return val.length > 0;\n}\nexport function nonEmptyArray<T>(val: T[]): NonEmptyArray<T> | undefined {\n  return val.length === 0 ? undefined : (val as NonEmptyArray<T>);\n}\n\nexport type AddPrefix<T, P extends string> = {\n  [K in keyof T as K extends string ? `${P}${K}` : never]: T[K];\n};\nexport function addPrefix<T extends Record<string, unknown>, Prefix extends string>(\n  attr: T,\n  prefix: Prefix\n): AddPrefix<T, Prefix> {\n  return Object.fromEntries(\n    Object.entries(attr).map(([key, value]) => [`${prefix}${key}`, value])\n  ) as AddPrefix<T, Prefix>;\n}\n\nexport type WithNull<T> = {\n  [Key in keyof T]: T[Key] extends Exclude<T[Key], undefined> ? T[Key] : T[Key] | null;\n};\ntype Id<T> = T;\nexport type Flatten<T> = Id<{[k in keyof T]: T[k]}>;\n\nexport type Defined<T> = Exclude<T, undefined>;\n","import {execSync} from 'node:child_process';\nimport {join, relative} from 'node:path';\nimport {fileURLToPath} from 'node:url';\n\nimport {listFiles, prettyJs, prettyJson, prettyJsonc, readFile, writeRawFile} from '@src/fs';\nimport {md5} from '@src/hash';\nimport {log} from '@src/logger';\nimport {\n  ProjectName,\n  ProjectType,\n  WorkspaceFragment,\n  WorkspaceFragmentType,\n  WorkspaceName,\n} from '@src/models';\nimport {generateProject} from '@src/project/generate_project';\nimport {generateGitIgnore} from '@src/project/gitignore';\nimport {generateWorkspacePackageJson} from '@src/project/package_json';\nimport {\n  AppDomain,\n  generateCommonTerraform,\n  generateWorkspaceProjectTerraform,\n} from '@src/project/terraform/all';\nimport {generateDynamoUserTerraform} from '@src/project/terraform/dynamo_user';\nimport {generateDynamoUserSessionTerraform} from '@src/project/terraform/dynamo_user_session';\nimport {WorkspaceProjectTerraformFrontend} from '@src/project/terraform/frontend';\nimport {WorkspaceProjectTerraformLambda} from '@src/project/terraform/lambda';\nimport {\n  FileHash,\n  generateCodeWorkspace,\n  Workspace,\n  WorkspaceOptions,\n  writeWorkspace,\n} from '@src/project/vscode_workspace';\nimport {lowerCase, pascalCase} from '@src/string_utils';\nimport {neverHappens, removeUndefined} from '@src/type_utils';\nimport {PACKAGE_VERSIONS} from '@src/versions';\n\nexport const DEFAULT_REGION = 'eu-west-3';\nconst TEMPLATES_PATH = join(fileURLToPath(import.meta.url), '../templates');\n\ntype Flag = Record<string, string>;\nconst booleanFlag = (bool: boolean): string => (bool ? 'true' : 'false');\n\nexport function hasApi(allFragments: WorkspaceFragment[]): boolean {\n  return (\n    allFragments.find(\n      f => f.type === WorkspaceFragmentType.ApiLambda || f.type === WorkspaceFragmentType.WebApp\n    ) !== undefined\n  );\n}\n\nexport type WorkspaceProjectTerraform =\n  | WorkspaceProjectTerraformLambda\n  | WorkspaceProjectTerraformFrontend\n  | {type: 'no-terraform'};\n\nexport interface WorkspaceProject {\n  projectName: ProjectName;\n  type: ProjectType;\n  fromFragment: WorkspaceFragment;\n  vars: Record<string, string>;\n  flags: (allFragments: WorkspaceFragment[]) => Flag;\n  terraform: WorkspaceProjectTerraform;\n}\n\nfunction fragmentFlags(baseFlags: Flag): (allFragments: WorkspaceFragment[]) => Flag {\n  return (allFragments: WorkspaceFragment[]): Flag => {\n    const workspaceFlags: Flag = {\n      HAS_API: booleanFlag(hasApi(allFragments)),\n    };\n    return {...workspaceFlags, ...baseFlags};\n  };\n}\n\n// Parse a string into its domain/subdomain.\n// We assume the root domain (the hosted zone registered in AWS)\n// is the in form of <second-level-domain>.<first-level-domain> (eg: \"matthis.link\")\nfunction parseDomain(domainStr?: string): AppDomain | undefined {\n  if (domainStr === undefined) {\n    return undefined;\n  }\n  const parts = domainStr.split('.');\n  const rootDomain = parts.slice(-2).join('.'); // eslint-disable-line @typescript-eslint/no-magic-numbers\n  const subDomain = parts.slice(0, -2).join('.'); // eslint-disable-line @typescript-eslint/no-magic-numbers\n  return {subDomain, rootDomain};\n}\n\nexport function getProjectsFromWorkspaceFragment(fragment: WorkspaceFragment): WorkspaceProject[] {\n  if (fragment.type === WorkspaceFragmentType.StaticWebsite) {\n    return [\n      {\n        projectName: fragment.websiteName,\n        type: ProjectType.Web,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.websiteName,\n          __APP_NAME__: fragment.websiteName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'frontend',\n          domain: parseDomain(fragment.domain),\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.StandaloneLambda) {\n    return [\n      {\n        projectName: fragment.lambdaName,\n        type: ProjectType.LambdaFunction,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.lambdaName,\n          __PROJECT_NAME_UPPERCASE__: fragment.lambdaName.toUpperCase(),\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'lambda',\n          api: false,\n          webAppName: undefined,\n          alarmEmail: fragment.alarmEmail,\n          cloudwatchTriggerMinutes: fragment.cloudwatchTriggerMinutes,\n          domain: undefined,\n          authentication: undefined,\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.ApiLambda) {\n    return [\n      {\n        projectName: fragment.apiName,\n        type: ProjectType.LambdaApi,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.apiName,\n          __PROJECT_NAME_UPPERCASE__: fragment.apiName.toUpperCase(),\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'lambda',\n          api: true,\n          webAppName: undefined,\n          alarmEmail: fragment.alarmEmail,\n          cloudwatchTriggerMinutes: undefined,\n          domain: parseDomain(fragment.domain),\n          authentication: undefined,\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.WebApp) {\n    const backendName = `${fragment.appName}_backend` as ProjectName;\n    const frontendName = `${fragment.appName}_frontend` as ProjectName;\n    const vars = {\n      __APP_NAME__: fragment.appName,\n      __APP_NAME_UPPERCASE__: fragment.appName.toUpperCase(),\n      __APP_NAME_PASCALCASE__: pascalCase(fragment.appName),\n    };\n    const flags = fragmentFlags({\n      AUTHENTICATION: booleanFlag(fragment.authentication.enabled),\n    });\n    return [\n      {\n        projectName: frontendName,\n        type: ProjectType.Web,\n        fromFragment: fragment,\n        vars,\n        flags,\n        terraform: {\n          type: 'frontend',\n          domain:\n            fragment.domain === undefined ? undefined : parseDomain(`static.${fragment.domain}`),\n        },\n      },\n      {\n        projectName: backendName,\n        type: ProjectType.LambdaWebApi,\n        fromFragment: fragment,\n        vars,\n        flags,\n        terraform: {\n          type: 'lambda',\n          api: true,\n          webAppName: fragment.appName,\n          alarmEmail: fragment.alarmEmail,\n          cloudwatchTriggerMinutes: undefined,\n          domain: parseDomain(fragment.domain),\n          authentication: fragment.authentication,\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.NodeScript) {\n    return [\n      {\n        projectName: fragment.scriptName,\n        type: ProjectType.NodeScript,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.scriptName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.SharedNode) {\n    const projectName = 'shared-node' as ProjectName;\n    return [\n      {\n        projectName,\n        type: ProjectType.SharedNode,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: projectName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.SharedWeb) {\n    const projectName = 'shared-web' as ProjectName;\n    return [\n      {\n        projectName,\n        type: ProjectType.SharedWeb,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: projectName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  } else if (fragment.type === WorkspaceFragmentType.Shared) {\n    const projectName = 'shared' as ProjectName;\n    return [\n      {\n        projectName,\n        type: ProjectType.Shared,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: projectName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n  }\n  neverHappens(fragment, `Unknown ProjectType ${(fragment as WorkspaceFragment).type}`);\n}\n\nexport async function generateWorkspace(\n  dst: string,\n  workspaceName: WorkspaceName,\n  workspaceFragments: WorkspaceFragment[],\n  workspaceOptions: WorkspaceOptions,\n  workspace: Workspace | undefined\n): Promise<void> {\n  const projects = workspaceFragments.flatMap(f => getProjectsFromWorkspaceFragment(f));\n\n  // Create projects files from templates\n  const projectFiles = await Promise.all(\n    projects.map(\n      async project =>\n        await generateProject({\n          dst,\n          project,\n          allFragments: workspaceFragments,\n          workspace,\n          workspaceName,\n        })\n    )\n  );\n\n  // Generate workspace root files\n  const SCRIPTS_PATH = join(fileURLToPath(import.meta.url), '../scripts');\n  const writeFile = async (path: string, file: string): Promise<FileHash> =>\n    await writeWorkspaceFile(workspace, dst, path, file);\n  const workspaceFiles = await Promise.all([\n    // package.json\n    writeFile(\n      'package.json',\n      await prettyJson(generateWorkspacePackageJson(workspaceName, projects))\n    ),\n    // app.code-workspace\n    writeFile(\n      'app.code-workspace',\n      await prettyJsonc(generateCodeWorkspace(workspaceName, workspaceFragments))\n    ),\n    // .gitignore\n    writeFile('.gitignore', generateGitIgnore()),\n    // setup.js\n    writeFile('setup.js', await prettyJs(await readFile(join(SCRIPTS_PATH, 'setup.js')))),\n    // deploy.js\n    writeFile(\n      'deploy.js',\n      await prettyJs(\n        await readFile(join(SCRIPTS_PATH, 'deploy.js')).then(res =>\n          res.replaceAll('__WORKSPACE_NAME__', workspaceName)\n        )\n      )\n    ),\n    // build.js\n    writeFile('build.js', await prettyJs(await readFile(join(SCRIPTS_PATH, 'build.js')))),\n  ]);\n\n  // Vscode folder\n  const vscodePath = join(TEMPLATES_PATH, '.vscode');\n  const vscodeFileList = await listFiles(vscodePath);\n  const vscodeFiles = await Promise.all(\n    vscodeFileList.map(async file => {\n      const relativePath = relative(vscodePath, file);\n      const dstPath = join('.vscode', relativePath);\n      const content = await readFile(file);\n      return await writeFile(dstPath, content);\n    })\n  );\n\n  // Terraform folder generation\n  const terraformFiles = await Promise.all([\n    ...workspaceFragments\n      .filter(frag => frag.type === WorkspaceFragmentType.WebApp)\n      .filter(frag => frag.authentication.enabled)\n      .flatMap(frag => {\n        return [\n          writeFile(\n            join('terraform', `dynamo_table_${lowerCase(frag.appName)}_user.tf`),\n            addLineBreak(generateDynamoUserTerraform(workspaceName, frag.appName))\n          ),\n          writeFile(\n            join('terraform', `dynamo_table_${lowerCase(frag.appName)}_user_session.tf`),\n            addLineBreak(generateDynamoUserSessionTerraform(workspaceName, frag.appName))\n          ),\n        ];\n      }),\n    writeFile(\n      join('terraform', 'base.tf'),\n      addLineBreak(generateCommonTerraform(workspaceName, projects, workspaceOptions))\n    ),\n    ...projects.map(async p => {\n      const content = generateWorkspaceProjectTerraform(workspaceName, p);\n      if (content === undefined) {\n        return;\n      }\n      const name = `${p.projectName}_terraform`;\n      return await writeFile(join('terraform', `${name}.tf`), addLineBreak(content));\n    }),\n  ]);\n\n  await writeWorkspace(dst, {\n    files: removeUndefined([\n      ...projectFiles.flat(),\n      ...workspaceFiles,\n      ...terraformFiles,\n      ...vscodeFiles,\n    ]),\n    fragments: workspaceFragments,\n    version: PACKAGE_VERSIONS.project,\n    options: workspaceOptions,\n  });\n\n  // Run setup.js\n  log('Running post install script');\n  const commands = [`cd ${dst}`, `node setup.js`, `git init`];\n  execSync(commands.join(' && '), {stdio: ['ignore', 'inherit', 'inherit']});\n\n  // Final instructions\n  log(`Run the following to get started:`);\n  log(`cd ${relative(process.cwd(), dst)}; code app.code-workspace; yarn watch`);\n}\n\nexport async function writeWorkspaceFile(\n  workspace: Workspace | undefined,\n  root: string,\n  path: string,\n  file: string\n): Promise<FileHash> {\n  const fileLines = file.split('\\n');\n  const fileToHash = fileLines.filter(line => !line.endsWith(' // @matthis/ignore')).join('\\n');\n  const newHash = md5(fileToHash);\n  const oldHash = workspace?.files.find(f => f.path === path)?.hash;\n  // Only write the file if it is different since last time we've generated the project.\n  // Prevent needlessly overwriting changes made in the project in between.\n  if (newHash !== oldHash) {\n    const fileToWrite = fileLines.map(l => l.replaceAll(' // @matthis/ignore', '')).join('\\n');\n    await writeRawFile(join(root, path), fileToWrite);\n  }\n  return {path, hash: newHash};\n}\n\nconst addLineBreak = (content: string): string =>\n  content.endsWith('\\n') ? content : `${content}\\n`;\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:os\");","import {exec} from 'node:child_process';\n\nexport async function execAsync(\n  cmd: Parameters<typeof exec>[0],\n  options?: Parameters<typeof exec>[1]\n): Promise<string> {\n  return await new Promise<string>((resolve, reject) => {\n    exec(cmd, options, (err, stdout, stderr) => {\n      if (err !== null) {\n        return reject(err);\n      }\n      const stderrStr = stderr.toString().trim();\n      if (stderrStr.length > 0) {\n        return reject(new Error(`stderr: ${stderrStr}`));\n      }\n      resolve(stdout.toString());\n    });\n  });\n}\n","import {appendFileSync, rmSync} from 'node:fs';\n\nconst ENABLED = true as boolean;\nlet startTs: number | undefined;\nconst logFilePath = '.build.log';\n\nexport function runnerLog(msg: string): void {\n  if (!ENABLED) {\n    return;\n  }\n  if (startTs === undefined) {\n    startTs = Date.now();\n    rmSync(logFilePath, {force: true});\n  }\n  appendFileSync(logFilePath, `${msg} (${(Date.now() - startTs).toLocaleString()}ms)\\n`);\n}\n","import {randomUUID} from 'node:crypto';\nimport {tmpdir} from 'node:os';\nimport {join} from 'node:path';\n\nimport {execAsync} from '@src/child_process_utils';\nimport {ProjectType} from '@src/models';\nimport {WorkspaceProject} from '@src/project/generate_workspace';\nimport {asJson, asMap, asString, neverHappens, removeUndefined} from '@src/type_utils';\nimport {runnerLog} from '@src/webpack-runner/log';\n\nexport async function deployProject(\n  project: WorkspaceProject,\n  opts: {root: string}\n): Promise<{url?: string}> {\n  const {root} = opts;\n  // Fetch terraform outputs\n  const terraformPath = join(root, 'terraform');\n  const stdout = await execAsync(`terraform output -json`, {cwd: terraformPath});\n  const outputRes = asJson(stdout, {});\n  const terraformOutputs = Object.fromEntries(\n    removeUndefined(\n      Object.entries(outputRes).map(([key, obj]) => {\n        const value = asString(asMap(obj, {})['value']);\n        if (value === undefined) {\n          return undefined;\n        }\n        return [key, value];\n      })\n    )\n  );\n  if (Object.keys(terraformOutputs).length === 0) {\n    throw new Error('You must run \"terraform apply\" to deploy the infrastructure first');\n  }\n\n  // Deploy\n  const [url] = removeUndefined(\n    await Promise.all([\n      deployLambda(project, terraformOutputs),\n      deployWebsite(project, terraformOutputs),\n    ])\n  );\n  return {url};\n}\n\nfunction getTerraformOutput(terraformOutputs: Record<string, unknown>, name: string): string {\n  const value = terraformOutputs[name];\n  if (typeof value !== 'string') {\n    throw new Error(`\"${name}\" variable not found in terraform output, run \\`terraform apply\\`?`);\n  }\n  return value;\n}\n\nasync function deployLambda(\n  project: WorkspaceProject,\n  terraformOutputs: Record<string, unknown>\n): Promise<string | undefined> {\n  if (\n    project.type === ProjectType.Shared ||\n    project.type === ProjectType.SharedWeb ||\n    project.type === ProjectType.SharedNode ||\n    project.type === ProjectType.Web ||\n    project.type === ProjectType.NodeScript\n  ) {\n    // Not a lambda\n    return;\n  } else if (\n    project.type === ProjectType.LambdaApi ||\n    project.type === ProjectType.LambdaWebApi ||\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    project.type === ProjectType.LambdaFunction\n  ) {\n    const workspaceName = project.vars['__WORKSPACE_NAME__'];\n    const lambdaName = project.projectName;\n    const tmp = tmpdir();\n    const zipPath = `${join(tmp, randomUUID())}.zip`;\n    const codeBucket = getTerraformOutput(terraformOutputs, 'code_bucket');\n    const region = getTerraformOutput(terraformOutputs, 'region');\n    const lambdaNameTerraform = getTerraformOutput(terraformOutputs, `${lambdaName}_function_name`);\n    const lambdaUrlTerraform = getTerraformOutput(terraformOutputs, `${lambdaName}_url`);\n    runnerLog(`${project.projectName}: deploy start`);\n\n    // Zip dist dir\n    await execAsync(`pushd ${lambdaName}/dist; zip -q -r ${zipPath} *; popd`);\n    runnerLog(`${project.projectName}: zip done`);\n    // Upload to S3\n    await execAsync(\n      `aws s3api put-object --bucket ${codeBucket} --key ${lambdaName}/dist.zip --tagging \"Project=${workspaceName}\" --body ${zipPath}`\n    );\n    runnerLog(`${project.projectName}: upload done`);\n    // Update lambda\n    await execAsync(\n      `aws lambda update-function-code --function-name ${\n        lambdaNameTerraform\n      } --s3-bucket ${codeBucket} --s3-key ${lambdaName}/dist.zip --region ${region} --publish --no-cli-pager`\n    );\n    runnerLog(`${project.projectName}: update done`);\n\n    return asString(lambdaUrlTerraform);\n  }\n  neverHappens(project.type);\n}\n\nasync function deployWebsite(\n  project: WorkspaceProject,\n  terraformOutputs: Record<string, unknown>\n): Promise<string | undefined> {\n  if (\n    project.type === ProjectType.Shared ||\n    project.type === ProjectType.SharedWeb ||\n    project.type === ProjectType.SharedNode ||\n    project.type === ProjectType.NodeScript ||\n    project.type === ProjectType.LambdaApi ||\n    project.type === ProjectType.LambdaWebApi ||\n    project.type === ProjectType.LambdaFunction\n  ) {\n    // Not a website\n    return;\n  } else if (\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    project.type === ProjectType.Web\n  ) {\n    runnerLog(`${project.projectName}: deploy start`);\n    const websiteName = project.projectName;\n    const codeBucket = getTerraformOutput(terraformOutputs, 'code_bucket');\n    const websiteUrl = getTerraformOutput(\n      terraformOutputs,\n      `${websiteName}_cloudfront_domain_name`\n    );\n    await execAsync(`aws s3 sync ${websiteName}/dist s3://${codeBucket}/${websiteName}`);\n    runnerLog(`${project.projectName}: sync done`);\n    return websiteUrl;\n  }\n  neverHappens(project.type);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:fs/promises\");","import {DetailedError, GlobalError, ParsedError} from '@src/webpack-runner/error_parser';\n\nexport interface GroupedErrors {\n  errorsByProjectByFile: Map<string, Map<string, DetailedError[]>>;\n  globalErrors: GlobalError[];\n}\n\nexport function groupAndSortErrors(errors: ParsedError[]): GroupedErrors {\n  const errorsByProjectByFile = new Map<string, Map<string, DetailedError[]>>();\n  const globalErrors: GlobalError[] = [];\n  for (const err of errors) {\n    if (!('type' in err)) {\n      globalErrors.push(err);\n    } else {\n      let projectErrors = errorsByProjectByFile.get(err.project);\n      if (!projectErrors) {\n        projectErrors = new Map<string, DetailedError[]>();\n        errorsByProjectByFile.set(err.project, projectErrors);\n      }\n      let fileErrors = projectErrors.get(err.loc.absolutePath);\n      if (!fileErrors) {\n        fileErrors = [];\n        projectErrors.set(err.loc.absolutePath, fileErrors);\n      }\n      fileErrors.push(err);\n    }\n  }\n  for (const byFile of errorsByProjectByFile.values()) {\n    for (const errors of byFile.values()) {\n      errors.sort((err1, err2) => {\n        if (!err1.loc.start) {\n          return -1;\n        } else if (!err2.loc.start) {\n          return 1;\n        }\n        const diffLine = err1.loc.start.line - err2.loc.start.line;\n        if (diffLine !== 0) {\n          return diffLine;\n        }\n        if (err1.loc.start.column === undefined) {\n          return -1;\n        } else if (err2.loc.start.column === undefined) {\n          return 1;\n        }\n        const diffColumn = err1.loc.start.column - err2.loc.start.column;\n        if (diffColumn !== 0) {\n          return diffColumn;\n        }\n        return err1.message.localeCompare(err2.message);\n      });\n    }\n  }\n  return {errorsByProjectByFile, globalErrors};\n}\n","import {relative, sep} from 'node:path';\n\nimport {Issue} from 'fork-ts-checker-webpack-plugin/lib/issue';\nimport {WebpackError} from 'webpack';\n\nimport {EslintWebpackError} from '@src/webpack/plugins/eslint_plugin';\n\nexport type ErrorSeverity = 'warning' | 'error';\nexport type ErrorType = 'eslint' | 'tsc' | 'module-not-found';\n\nexport interface DetailedError {\n  project: string;\n  type: 'eslint' | 'tsc' | 'module-not-found';\n  severity: ErrorSeverity;\n  message: string;\n  code: string;\n  loc: {\n    relativePath: string;\n    absolutePath: string;\n    start?: {\n      line: number;\n      column?: number;\n    };\n    end?: {\n      line: number;\n      column?: number;\n    };\n  };\n}\n\nexport interface GlobalError {\n  severity: ErrorSeverity;\n  message: string;\n}\n\nexport type ParsedError = DetailedError | GlobalError;\n\nfunction parseFilePath(root: string, path: string): {project: string; relativePath: string} {\n  const relativePath = relative(root, path);\n  const project = relativePath.split(sep)[0] ?? '';\n  return {project, relativePath};\n}\n\nexport function parseError(\n  err: WebpackError,\n  opts: {root: string; severity: ErrorSeverity}\n): ParsedError {\n  const {root, severity} = opts;\n  if (err.name === 'EslintWebpackError') {\n    const eslintError = err as EslintWebpackError;\n    const absolutePath = err.file;\n    if (absolutePath === undefined) {\n      return {severity, message: err.message};\n    }\n    const {relativePath, project} = parseFilePath(root, absolutePath);\n    return {\n      project,\n      type: 'eslint',\n      severity,\n      message: err.message,\n      code: eslintError.ruleId,\n      loc: {\n        relativePath,\n        absolutePath,\n        start: err.loc && 'start' in err.loc ? err.loc.start : undefined,\n        end: err.loc && 'end' in err.loc ? err.loc.end : undefined,\n      },\n    };\n  } else if ('issue' in err) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const issue = (err as any)['issue'] as Issue;\n    const absolutePath = issue.file;\n    if (absolutePath === undefined) {\n      return {severity, message: err.message};\n    }\n    const {relativePath, project} = parseFilePath(root, absolutePath);\n    return {\n      project,\n      type: 'tsc',\n      severity,\n      message: issue.message,\n      code: issue.code,\n      loc: {\n        relativePath,\n        absolutePath,\n        ...issue.location,\n      },\n    };\n  } else if (err.name === 'ModuleNotFoundError') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const msg = (err as any).error.message as string;\n    const match = /(?<msg>Can't resolve '[^']+') in '(?<file>[^']+)'/u.exec(msg);\n\n    if (!match) {\n      return {severity, message: err.message};\n    }\n    const [_, message, absolutePath] = match;\n    if (absolutePath === undefined || message === undefined) {\n      return {severity, message: err.message};\n    }\n    const {relativePath, project} = parseFilePath(root, absolutePath);\n    return {\n      project,\n      type: 'tsc',\n      severity,\n      message,\n      loc: {\n        relativePath,\n        absolutePath,\n      },\n    };\n  }\n  return {severity, message: err.message};\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:http\");","import {createHash} from 'node:crypto';\nimport {readdir, readFile} from 'node:fs/promises';\nimport {createServer, IncomingMessage, ServerResponse} from 'node:http';\nimport {basename, join} from 'node:path';\n\ninterface File {\n  path: string;\n  content: string;\n}\n\nfunction iterFiles(opts: {\n  root: string;\n  excludeDirs?: (path: string) => boolean;\n  excludeFiles?: (path: string) => boolean;\n}): AsyncIterable<File> {\n  const {root, excludeDirs, excludeFiles} = opts;\n  const dirs: string[] = [root];\n  const files: string[] = [];\n\n  async function next(): Promise<IteratorResult<File, undefined>> {\n    // If we have a file in the queue, we process it\n    const nextFile = files.shift();\n    if (nextFile !== undefined) {\n      const buffer = await readFile(nextFile);\n      return {done: false, value: {path: nextFile, content: buffer.toString()}};\n    }\n    // Otherwise we need to find more files\n    // Check if we still have dir to walk\n    const nextDir = dirs.shift();\n    if (nextDir === undefined) {\n      return {done: true, value: undefined};\n    }\n    // List dir and add to queues\n    const dirEnts = await readdir(nextDir, {withFileTypes: true});\n    for (const dirEnt of dirEnts) {\n      const path = join(nextDir, dirEnt.name);\n      if (dirEnt.isDirectory()) {\n        if (excludeDirs?.(path)) {\n          continue;\n        }\n        dirs.push(path);\n      } else if (dirEnt.isFile()) {\n        if (excludeFiles?.(path)) {\n          continue;\n        }\n        files.push(path);\n      }\n    }\n    // Reprocess\n    return await next();\n  }\n\n  return {\n    [Symbol.asyncIterator]() {\n      return {next};\n    },\n  };\n}\n\ninterface Icon {\n  viewBox: string;\n  element: string;\n  name: string;\n}\n\nconst extension = '.tsx';\n\nasync function findIcons(root: string): Promise<Icon[]> {\n  const icons: Icon[] = [];\n  for await (const f of iterFiles({\n    root,\n    excludeDirs: p => p.includes('node_modules') || p.includes('/.'),\n    excludeFiles: p => !p.endsWith(extension),\n  })) {\n    if (f.content.includes('SvgIconData')) {\n      const [viewBox, element] =\n        /\\{\\s*viewBox:\\s*'(?<viewbox>[^']*)',\\s*element:\\s*(?<element>[^;]+);/u\n          .exec(f.content)\n          ?.slice(1) ?? [];\n      if (viewBox === undefined) {\n        continue;\n      }\n      if (element === undefined) {\n        continue;\n      }\n      let trimmed = element;\n      while (true) {\n        if (trimmed.includes('\\n')) {\n          trimmed = trimmed.replace('\\n', '');\n        } else if (trimmed.startsWith(' ') || trimmed.startsWith('\\t') || trimmed.startsWith('(')) {\n          trimmed = trimmed.slice(1);\n        } else if (\n          trimmed.endsWith(' ') ||\n          trimmed.endsWith('\\t') ||\n          trimmed.endsWith(')') ||\n          trimmed.endsWith(',') ||\n          trimmed.endsWith('}')\n        ) {\n          trimmed = trimmed.slice(0, -1);\n        } else {\n          break;\n        }\n      }\n      icons.push({name: basename(f.path).slice(0, -extension.length), viewBox, element: trimmed});\n    }\n  }\n  return icons;\n}\n\nfunction html(body: string): string {\n  return `\n<!DOCTYPE html>\n<html lang=\"en-US\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>ICONS</title>\n        <style>\n            .wrapper {\n                display: flex;\n                flex-wrap: wrap;\n                justify-content: center;\n                gap: 32px;\n                padding: 32px;\n            }\n            .icon {\n                width: 80px;\n                display: flex;\n                flex-direction: column;\n                gap: 8px;\n                align-items: center;\n                justify-content: center;\n            }\n            .icon svg {\n                fill: #000;\n            }\n            .icon-label {\n                color: #aaa;\n                white-space: nowrap;\n                text-overflow: ellipsis;\n                overflow: hidden;\n                width: 100%;\n                text-align: center;\n            }\n        </style>\n    </head>\n    <body>\n        ${body}\n    </body>\n</html>\n\n  `.trim();\n}\n\nexport interface IconServer {\n  port: number;\n  hasIcons: boolean;\n  stopServer: () => void;\n}\n\nexport async function startIconServer(root: string): Promise<IconServer> {\n  // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n  const hexHash = createHash('md5').update(root).digest('hex').slice(0, 4);\n  const port = 1024 + Math.floor(parseInt(hexHash, 16) / 2);\n  const initialIcons = await findIcons(root);\n\n  const server = createServer((req: IncomingMessage, res: ServerResponse) => {\n    findIcons(root)\n      .then(icons => {\n        const body = html(\n          `<div class=\"wrapper\">${icons\n            .map(\n              icon => `\n              <div class=\"icon\">\n                  <svg viewbox=\"${icon.viewBox}\" width=\"48\" height=\"48\">${icon.element}</svg>\n                  <div class=\"icon-label\" title=\"${icon.name}\">${icon.name}</div>\n              </div>\n          `\n            )\n            .join('')}</div>`\n        );\n        res.write(body);\n        res.end();\n      })\n      .catch((err: unknown) => {\n        res.write(html(`Failure to load icons: ${String(err)}`));\n        res.end();\n      });\n  }).listen(port);\n\n  return {\n    port,\n    hasIcons: initialIcons.length > 0,\n    stopServer: () => server.close(),\n  };\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"ansi-colors\");","import {cyan, gray, red, underline, yellow} from 'ansi-colors';\n\nimport {WorkspaceProject} from '@src/project/generate_workspace';\nimport {ErrorSeverity, ErrorType, ParsedError} from '@src/webpack-runner/error_parser';\n\nexport function formatProject(project: WorkspaceProject): string {\n  return `${cyan(project.projectName)} ${gray(project.type)}`;\n}\n\nexport function formatFilePath(filePath: string): string {\n  return underline(filePath);\n}\n\nfunction formatMessage(msg: string, severity: ErrorSeverity): string {\n  return severity === 'warning' ? yellow(msg) : red(msg);\n}\n\nconst padLeft = (value: string, size: number): string =>\n  value.length >= size ? value : padLeft(` ${value}`, size);\nconst padRight = (value: string, size: number): string =>\n  value.length >= size ? value : padRight(`${value} `, size);\n\nfunction formatLocation(loc?: {line: number; column?: number}): string {\n  const {line, column} = loc ?? {};\n  const padValue = 3;\n  const lineStr = String(line ?? '');\n  const columnStr = String(column ?? '');\n  if (lineStr.length === 0 && columnStr.length === 0) {\n    return padLeft('', 2 * padValue + 1);\n  }\n  return gray(`${padLeft(lineStr, padValue)}:${padRight(columnStr, padValue)}`);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction formatLabel(code: string, type: ErrorType): string {\n  return gray(code);\n}\n\nexport function formatError(err: ParsedError): string {\n  if ('type' in err) {\n    return `${formatLocation(err.loc.start)} ${formatMessage(\n      err.message,\n      err.severity\n    )} ${formatLabel(err.code, err.type)}`;\n  }\n  return formatMessage(`[${err.severity}] ${err.message}`, err.severity);\n}\n","const ansiRegex = new RegExp(\n  [\n    '[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n    '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))',\n  ].join('|'),\n  'gu'\n);\nconst stripAnsi = (s: string): string => s.replace(ansiRegex, '');\n\ntype AlignType = 'l' | 'r';\ntype Cell = string | number;\n\ninterface TextTableOptions {\n  align?: AlignType[];\n}\n\nfunction formatCell(cell: Cell): string {\n  return typeof cell === 'string' ? cell : cell.toLocaleString();\n}\n\nfunction padString(value: string, indent: number, right: boolean): string {\n  let valueStr = value;\n  for (let i = 0; i < indent; i++) {\n    valueStr = right ? `${valueStr} ` : ` ${valueStr}`;\n  }\n  return valueStr;\n}\n\nexport function table(data: Cell[][], options?: TextTableOptions): string {\n  if (data.length === 0) {\n    return '';\n  }\n  const {align = []} = options ?? {};\n  const maxWidths: number[] = [];\n  for (const line of data) {\n    for (const [columnIndex, cell] of line.entries()) {\n      maxWidths[columnIndex] = Math.max(\n        maxWidths[columnIndex] ?? 0,\n        stripAnsi(formatCell(cell)).length\n      );\n    }\n  }\n\n  return data\n    .map(line =>\n      line\n        .map((cell, colIndex, arr) => {\n          const content = formatCell(cell);\n          return colIndex === arr.length - 1 && align[colIndex] !== 'r'\n            ? content\n            : padString(\n                content,\n                (maxWidths[colIndex] ?? 0) - stripAnsi(content).length,\n                align[colIndex] !== 'r'\n              );\n        })\n        .join(' ')\n    )\n    .join('\\n');\n}\n","import {bgRed, bgYellow, cyan, gray, green, underline} from 'ansi-colors';\n\nimport {log} from '@src/logger';\nimport {ProjectName} from '@src/models';\nimport {WorkspaceProject} from '@src/project/generate_workspace';\nimport {formatError, formatFilePath, formatProject} from '@src/webpack-runner/error_formatter';\nimport {groupAndSortErrors, GroupedErrors} from '@src/webpack-runner/error_grouper';\nimport {ParsedError} from '@src/webpack-runner/error_parser';\nimport {IconServer} from '@src/webpack-runner/icon_server';\nimport {getLocalIp} from '@src/webpack-runner/ip';\nimport {ProjectStatus} from '@src/webpack-runner/runner';\nimport {table} from '@src/webpack-runner/text_table';\n\nexport function render(opts: {\n  watch: boolean;\n  statuses: Map<ProjectName, ProjectStatus>;\n  iconServer: IconServer | undefined;\n}): void {\n  const {watch, statuses, iconServer} = opts;\n  const errors = [...statuses.values()].flatMap(v => v.errors);\n  const groupedErrors = groupAndSortErrors(errors);\n\n  const summary = [...statuses.values()].map(status => {\n    return renderProjectStatus(status.project, status.build, status.deploy, groupedErrors);\n  });\n  summary.unshift([\n    underline(`Projects (${statuses.size})`),\n    underline('Build'),\n    underline('Deploy'),\n    underline(''),\n  ]);\n  const report = renderErrors(groupedErrors);\n\n  if (watch) {\n    process.stdout.write('\\u001B[2J\\u001B[3J\\u001B[H'); // clear terminal\n  }\n  log(table(summary));\n  if (iconServer?.hasIcons) {\n    log(`icons: http://${getLocalIp()}:${iconServer.port}`);\n  }\n  if (report.length > 0) {\n    log(`\\nBuild completed with ${renderErrorWarningCount(errors)}\\n`);\n    log(report);\n  }\n}\n\nexport function renderErrors(errors: GroupedErrors): string {\n  const {errorsByProjectByFile, globalErrors} = errors;\n  const blocks: string[] = [];\n\n  for (const globalError of globalErrors) {\n    blocks.push(formatError(globalError));\n  }\n\n  for (const [projectName, projectErrors] of errorsByProjectByFile.entries()) {\n    blocks.push(cyan(projectName));\n    for (const [file, errors] of projectErrors.entries()) {\n      blocks.push([formatFilePath(file), ...errors.map(err => formatError(err))].join('\\n'));\n    }\n  }\n\n  return blocks.join('\\n\\n');\n}\n\nconst timeSuffix = (val: {startTs?: number; endTs?: number}): string => {\n  const {startTs, endTs} = val;\n  if (startTs === undefined) {\n    return '';\n  }\n  if (endTs === undefined) {\n    return ` ${gray(`${Math.floor((Date.now() - startTs) / 1000).toLocaleString()}s`)}`;\n  }\n  return ` ${gray(`${Math.floor((endTs - startTs) / 1000).toLocaleString()}s`)}`;\n};\n\nexport function renderProjectStatus(\n  project: WorkspaceProject,\n  build: ProjectStatus['build'],\n  deploy: ProjectStatus['deploy'],\n  errors: GroupedErrors\n): string[] {\n  // #1 Column (project name)\n  const column1 = formatProject(project);\n\n  // #2 Column (build status)\n  let column2 = '';\n  const projectErrors = errors.errorsByProjectByFile.get(project.projectName);\n  if (build.status === 'pending') {\n    column2 = '';\n  } else if (build.status === 'in-progress') {\n    column2 = gray('in progress');\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  else if (build.status === 'done') {\n    column2 =\n      build.err !== undefined\n        ? bgRed.whiteBright(build.err)\n        : projectErrors\n          ? renderErrorWarningCount([...projectErrors.values()].flat())\n          : green('success');\n  }\n  column2 += timeSuffix(build);\n\n  // #3 Column (deploy status)\n  let column3 = '';\n  if (deploy.status === 'pending') {\n    column3 = '';\n  } else if (deploy.status === 'in-progress') {\n    column3 = gray('in progress');\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  else if (deploy.status === 'done') {\n    column3 = deploy.err !== undefined ? bgRed.whiteBright(deploy.err) : green('success');\n  }\n  column3 += timeSuffix(deploy);\n\n  // #4 column (URL)\n  const column4 = deploy.url ?? '';\n\n  return [column1, column2, column3, column4];\n}\n\nexport function renderErrorWarningCount(errors: ParsedError[]): string {\n  const errorCount = errors.filter(err => err.severity === 'error').length;\n  const warnCount = errors.filter(err => err.severity === 'warning').length;\n  const diag: string[] = [];\n\n  if (errorCount > 0) {\n    const plural = errorCount > 1 ? 's' : '';\n    diag.push(bgRed.whiteBright(` ${errorCount} error${plural} `));\n  }\n  if (warnCount > 0) {\n    const plural = warnCount > 1 ? 's' : '';\n    diag.push(bgYellow.whiteBright(` ${warnCount} warning${plural} `));\n  }\n  return diag.join(' ');\n}\n","import {networkInterfaces} from 'node:os';\n\nexport function getLocalIp(): string {\n  return (\n    Object.values(networkInterfaces())\n      .flat()\n      .find(net => net !== undefined && net.family === 'IPv4' && net.address.startsWith('192.168.'))\n      ?.address ?? '127.0.0.1'\n  );\n}\n","// Handle the locking logic.\n// We write a file /.build.lock with the current process and timestamp.\n// We continuously update the lock timestamp throughout runtime.\n// Before exiting we delete the lock file.\n// If at any point the lock file contains another pid, we know another process\n// is running the build and we exit. Except when the timestamp is older than\n// `MIN_LOCK_AGE_MS`, in this case it means another build process was running\n// and got killed without getting a chance to delete the lock file.\nimport {rmSync} from 'node:fs';\nimport {writeFile} from 'node:fs/promises';\nimport {join} from 'node:path';\n\nimport {maybeReadFile} from '@src/fs';\nimport {asNumber} from '@src/type_utils';\n\nconst MIN_LOCK_AGE_MS = 10000; // 10 seconds\nconst LOCK_UPDATE_PERIOD_MS = 1000; // 1 second\n\ninterface Lock {\n  pid: number;\n  ts: number;\n}\n\nfunction lockFilePath(root: string): string {\n  return join(root, '.build.lock');\n}\n\nasync function readLock(root: string): Promise<Lock | undefined> {\n  // Read the lock file\n  const lockFileContent = await maybeReadFile(lockFilePath(root));\n  if (lockFileContent === undefined) {\n    return undefined;\n  }\n\n  // Parse the content\n  const [pidTs, tsStr] = lockFileContent.split('-');\n  const pid = asNumber(pidTs);\n  const ts = asNumber(tsStr);\n  if (pid === undefined || ts === undefined) {\n    return undefined;\n  }\n\n  return {pid, ts};\n}\n\nasync function writeLock(root: string): Promise<void> {\n  await writeFile(lockFilePath(root), `${process.pid}-${Date.now()}`);\n}\n\nasync function checkLock(root: string): Promise<void> {\n  const lock = await readLock(root);\n  if (lock && lock.pid !== process.pid && Date.now() - lock.ts < MIN_LOCK_AGE_MS) {\n    console.error(`Lock ${lockFilePath(root)} is taken by the process ${lock.pid}`);\n    // eslint-disable-next-line n/no-process-exit\n    process.exit(1);\n  }\n}\n\nlet lockInterval: NodeJS.Timeout | undefined;\nexport function releaseLock(root: string): void {\n  if (lockInterval) {\n    clearInterval(lockInterval);\n  }\n  rmSync(lockFilePath(root), {force: true});\n}\n\nexport async function takelock(root: string): Promise<void> {\n  // Ensure the lock is available\n  await checkLock(root);\n  // Check and update the lock periodically\n  lockInterval = setInterval(() => {\n    checkLock(root)\n      .then(() => {\n        writeLock(root).catch(() => {});\n      })\n      .catch(() => {});\n  }, LOCK_UPDATE_PERIOD_MS);\n}\n","import {execSync} from 'node:child_process';\nimport {join} from 'node:path';\n\nimport {Configuration, Stats, webpack} from 'webpack';\n\nimport {registerExitCallback} from '@src/exit_handler';\nimport {globalError} from '@src/global_error';\nimport {error, log} from '@src/logger';\nimport {ProjectName, WorkspaceFragment} from '@src/models';\nimport {getProjectsFromWorkspaceFragment, WorkspaceProject} from '@src/project/generate_workspace';\nimport {readWorkspace} from '@src/project/vscode_workspace';\nimport {removeUndefined} from '@src/type_utils';\nimport {deployProject} from '@src/webpack-runner/deployment';\nimport {generateEnvFile} from '@src/webpack-runner/env_definition_file';\nimport {groupAndSortErrors} from '@src/webpack-runner/error_grouper';\nimport {ParsedError, parseError} from '@src/webpack-runner/error_parser';\nimport {IconServer, startIconServer} from '@src/webpack-runner/icon_server';\nimport {runnerLog} from '@src/webpack-runner/log';\nimport {render} from '@src/webpack-runner/renderer';\nimport {releaseLock, takelock} from '@src/webpack-runner/runner_lock';\n\ninterface RunWebpacksOptions {\n  root: string;\n  workspaceFragments: WorkspaceFragment[];\n  watch: boolean;\n}\n\ninterface Progress {\n  status: 'pending' | 'in-progress' | 'done';\n  buildId?: number;\n  err?: string;\n  url?: string;\n  startTs?: number;\n  endTs?: number;\n}\n\nexport interface ProjectStatus {\n  project: WorkspaceProject;\n  build: Progress;\n  deploy: Progress;\n  errors: ParsedError[];\n}\n\nconst name = 'WebpackRunner';\n\nlet globalRoot = '';\nlet stopIconServer: (() => void) | undefined;\nfunction exit(): void {\n  stopIconServer?.();\n  releaseLock(globalRoot);\n  process.stdin.setRawMode(false);\n  log('See you soon!');\n  // eslint-disable-next-line n/no-process-exit\n  process.exit(0);\n}\n\nexport async function runWebpacks(opts: RunWebpacksOptions): Promise<void> {\n  const {root, workspaceFragments, watch} = opts;\n  const projects = workspaceFragments.flatMap(f => getProjectsFromWorkspaceFragment(f));\n  const statuses = new Map<ProjectName, ProjectStatus>(\n    projects.map(p => {\n      return [\n        p.projectName,\n        {\n          project: p,\n          build: {status: 'pending'},\n          deploy: {status: 'pending'},\n          errors: [],\n          compilationFailure: undefined,\n        },\n      ] as const;\n    })\n  );\n\n  await generateEnvFile(root);\n  runnerLog(`generateEnvFile done`);\n\n  let iconServer: IconServer | undefined;\n  if (watch) {\n    try {\n      iconServer = await startIconServer(root);\n      stopIconServer = iconServer.stopServer;\n    } catch {\n      // Failure to start the icon server is not a big deal\n    }\n  }\n  runnerLog(`startIconServer done`);\n\n  function redraw(): void {\n    render({watch, statuses, iconServer});\n  }\n\n  //\n  // Called any time something changes\n  //\n  let lastRefresh = 0;\n  let shouldRefresh = false;\n  function autoRefresh(): void {\n    if (!shouldRefresh) {\n      runnerLog('stop refresh');\n      return;\n    }\n    const now = Date.now();\n    if (now - lastRefresh >= 100) {\n      redraw();\n      lastRefresh = now;\n    }\n    setTimeout(autoRefresh, 100);\n  }\n  function onChange(): void {\n    const isDone = [...statuses.values()].every(\n      s => s.build.status === 'done' && s.deploy.status === 'done'\n    );\n\n    if (watch) {\n      redraw();\n      if (!isDone && !shouldRefresh) {\n        shouldRefresh = true;\n        autoRefresh();\n      } else if (isDone && shouldRefresh) {\n        shouldRefresh = false;\n      }\n      return;\n    }\n\n    if (!isDone) {\n      return;\n    }\n    redraw();\n\n    const errors = [...statuses.values()].flatMap(v => v.errors);\n    const {globalErrors} = groupAndSortErrors(errors);\n    const noGlobalErrors =\n      globalErrors.length === 0 &&\n      [...statuses.values()].every(\n        status => status.build.err === undefined && status.deploy.err === undefined\n      );\n    if (noGlobalErrors) {\n      resolve();\n    } else {\n      reject();\n    }\n  }\n\n  const compilers = await Promise.all(\n    projects.map(async project => {\n      //\n      // Fetch the webpack config\n      //\n      const {projectName} = project;\n      const projectPath = join(root, projectName);\n      runnerLog(`loadConfig ${projectName} start`);\n      // eslint-disable-next-line import/dynamic-import-chunkname\n      const config = await import(/*webpackIgnore: true*/ join(projectPath, 'webpack.config.js'))\n        .then(({getConfig}) => getConfig({context: projectPath, watch}) as Configuration)\n        .catch((err: unknown) => {\n          const current = statuses.get(projectName);\n          if (current) {\n            current.build.err = String(err);\n          }\n          onChange();\n        });\n      runnerLog(`loadConfig ${projectName} done`);\n      if (!config) {\n        return;\n      }\n\n      //\n      // BUILD START callback\n      //\n      function buildStart(): void {\n        const current = statuses.get(projectName);\n        if (!current) {\n          return;\n        }\n        runnerLog(`Build start ${projectName}`);\n        current.build = {\n          startTs: Date.now(),\n          buildId: Math.random(),\n          status: 'in-progress',\n          err: undefined,\n        };\n        current.errors = [];\n        onChange();\n      }\n\n      //\n      // BUILD END callback\n      //\n      function buildEnd(err: Error | null, stats?: Stats): void {\n        const buildId = Math.random();\n        const current = statuses.get(projectName);\n        if (!current) {\n          return;\n        }\n        runnerLog(`Build end ${projectName} ${buildId}`);\n        current.build = {\n          status: 'done',\n          buildId,\n          err: undefined,\n          startTs: current.build.startTs,\n          endTs: Date.now(),\n        };\n        if (err || !stats) {\n          current.build.err = err ? String(err) : 'No result after compilation';\n          current.errors = [];\n        } else {\n          const errors = [\n            ...stats.compilation.errors.map(err => parseError(err, {root, severity: 'error'})),\n            ...stats.compilation.warnings.map(warn =>\n              parseError(warn, {root, severity: 'warning'})\n            ),\n          ];\n          current.errors = errors;\n          deployStart();\n        }\n        onChange();\n      }\n\n      //\n      // DEPLOY START callback\n      //\n      function deployStart(): void {\n        const current = statuses.get(projectName);\n        if (\n          !current ||\n          current.build.status !== 'done' ||\n          current.build.buildId === undefined ||\n          current.deploy.status === 'in-progress'\n        ) {\n          return;\n        }\n        const buildId = current.build.buildId;\n        const startTs = Date.now();\n        current.deploy = {status: 'in-progress', buildId, startTs};\n        onChange();\n        runnerLog(`Deploy START ${projectName} ${buildId}`);\n\n        deployProject(project, {root})\n          .then(({url}) => deployEnd({buildId, status: 'done', url, startTs}))\n          .catch((err: unknown) => deployEnd({buildId, status: 'done', err: String(err), startTs}));\n      }\n\n      //\n      // DEPLOY START callback\n      //\n      function deployEnd(status: Progress): void {\n        const current = statuses.get(projectName);\n        if (!current) {\n          return;\n        }\n        current.deploy = status;\n        current.deploy.endTs = Date.now();\n        onChange();\n        runnerLog(\n          `Deploy END ${projectName} ${status.buildId} ${status.url ?? ''} ${status.err ?? ''}`\n        );\n        if (current.build.status === 'done' && current.build.buildId !== status.buildId) {\n          deployStart();\n        }\n      }\n\n      //\n      // START\n      //\n      const compiler = webpack({...config, watch}, buildEnd);\n      compiler.hooks.run.tap(name, buildStart);\n      compiler.hooks.watchRun.tap(name, buildStart);\n      return compiler;\n    })\n  );\n\n  let resolvePromise: () => void;\n  let rejectPromise: (err?: unknown) => void;\n  const globalPromise = new Promise<void>((resolve, reject) => {\n    resolvePromise = resolve;\n    rejectPromise = reject;\n  });\n\n  let cleanupCalled = false;\n  const cleanup = async (): Promise<void> => {\n    if (cleanupCalled) {\n      return;\n    }\n    cleanupCalled = true;\n    await Promise.all(\n      compilers.map(\n        async compiler =>\n          await new Promise<void>((resolve, reject) => {\n            if (compiler) {\n              compiler.close(err => (err ? reject(err) : resolve()));\n            } else {\n              resolve();\n            }\n          })\n      )\n    );\n    releaseLock(globalRoot);\n    process.stdin.setRawMode(false);\n  };\n\n  const reject = (err?: unknown): void => {\n    cleanup()\n      .then(() => rejectPromise(err))\n      .catch((cleanupErr: unknown) => {\n        globalError('webpack runner cleanup error', cleanupErr);\n        rejectPromise(err);\n      });\n  };\n  const resolve = (): void => {\n    cleanup()\n      .then(resolvePromise)\n      .catch((cleanupErr: unknown) => {\n        globalError('webpack runner cleanup error', cleanupErr);\n        resolvePromise();\n      });\n  };\n\n  if (watch) {\n    process.stdin.setRawMode(true);\n    process.stdin.on('data', data => {\n      const str = data.toString();\n      // Handle ctrl+c\n      if (str === '\\u0003') {\n        console.log('ctrl-c received, cleaning up...');\n        cleanup()\n          .then(() => {\n            process.emit('SIGINT', 'SIGINT');\n          })\n          .catch(() => {\n            process.emit('SIGINT', 'SIGINT');\n          });\n      } else if (str === 'o') {\n        const errorPaths = removeUndefined(\n          [...statuses.values()]\n            .flatMap(status => status.errors)\n            .map(err => ('loc' in err ? err.loc.absolutePath : undefined))\n        );\n        const files = [...new Set([...errorPaths]).values()];\n        const openCommand = `code ${files.join(' ')}`;\n        execSync(openCommand);\n      }\n    });\n\n    process.on('SIGINT', () => {\n      exit();\n    });\n    process.on('beforeExit', () => {\n      exit();\n    });\n\n    // Handle uncaught error and exceptions\n    process.on('uncaughtException', err => {\n      error('Uncaught Exception');\n      error(err);\n      exit();\n    });\n\n    // Handle unhandled failing promises\n    process.on('unhandledRejection', err => {\n      error('Unhandled Rejection');\n      error(err);\n      exit();\n    });\n  }\n\n  registerExitCallback(cleanup);\n  return await globalPromise;\n}\n\nexport async function runAllWebpacks(\n  options: Omit<RunWebpacksOptions, 'projectPaths'>\n): Promise<void> {\n  const {root, watch} = options;\n  runnerLog(`Build runner START ${root}`);\n  globalRoot = root;\n  await takelock(root);\n  runnerLog(`Lock taken`);\n\n  const {fragments} = (await readWorkspace(root)) ?? {};\n  runnerLog(`Workspace read`);\n  if (!fragments) {\n    throw new Error(`No workspace projects at path ${root}`);\n  }\n  await runWebpacks({\n    root,\n    workspaceFragments: fragments,\n    watch,\n  });\n}\n","import {execSync} from 'node:child_process';\nimport {readdir} from 'node:fs/promises';\nimport {join} from 'node:path';\n\nimport {readFile, writeTsFile} from '@src/fs';\nimport {removeUndefined} from '@src/type_utils';\n\nexport async function generateEnvFile(\n  root: string,\n  overrides?: Record<string, string>\n): Promise<void> {\n  // Get the outputs generated by terraform\n  const terraformPath = join(root, 'terraform');\n  const res: Record<string, {type: unknown; value: unknown; sensitive: boolean}> = JSON.parse(\n    execSync(`terraform output -json`, {cwd: terraformPath}).toString()\n  );\n  const outputsEntries = removeUndefined(\n    Object.entries(res).map(([key, value]) => {\n      if (value.sensitive) {\n        return undefined;\n      }\n      if (\n        Array.isArray(value.type) &&\n        value.type[0] === 'object' &&\n        typeof value.value === 'object' &&\n        value.value !== null\n      ) {\n        return [\n          key.toUpperCase(),\n          Object.fromEntries(Object.entries(value.value).map(([k, v]) => [k.toUpperCase(), v])),\n        ];\n      }\n      if (value.type === 'string' && typeof value.value === 'string') {\n        return [key.toUpperCase(), value.value];\n      }\n      return undefined;\n    })\n  );\n\n  // Parse the outputs from the tf files to create defaults\n  const terraformDir = await readdir(terraformPath);\n  const terraformFiles = terraformDir.filter(f => f.endsWith('.tf'));\n  const terraformFilesContent = await Promise.all(\n    terraformFiles.map(async f => await readFile(join(terraformPath, f)))\n  );\n  const allTerraform = terraformFilesContent.join('\\n');\n  const outputMatches = allTerraform.matchAll(/output \"(?<outputName>[^\"]+)\" \\{/gu);\n  const defaultOutputs = Object.fromEntries(\n    [...outputMatches]\n      .map(o => o.groups?.['outputName'])\n      .filter(o => o !== undefined)\n      .map(o => [o.toUpperCase(), 'RUN_TERRAFORM_APPLY'])\n  );\n\n  const envConstants: Record<string, unknown> = {\n    ...defaultOutputs,\n    ...Object.fromEntries(outputsEntries),\n    ...overrides,\n  };\n\n  await writeTsFile(\n    join(root, 'shared', 'src', 'env.ts'),\n    Object.entries(envConstants)\n      .map(\n        ([key, value]) =>\n          `export const ${key} = ${JSON.stringify(value)}${\n            typeof value === 'string' ? ' as string' : ''\n          };`\n      )\n      .join('\\n')\n  );\n}\n","import {join} from 'node:path';\n\nimport {maybeReadFile, prettyJson, writeRawFile} from '@src/fs';\nimport {ProjectName, WorkspaceFragment, WorkspaceFragmentType} from '@src/models';\nimport {DEFAULT_REGION, getProjectsFromWorkspaceFragment} from '@src/project/generate_workspace';\nimport {\n  asBoolean,\n  asMap,\n  asMapArray,\n  asNumber,\n  asString,\n  asStringOrThrow,\n  removeUndefined,\n} from '@src/type_utils';\n\nexport function generateCodeWorkspace(\n  workspaceName: string,\n  workspaceFragments: WorkspaceFragment[]\n): Record<string, unknown> {\n  const projects = workspaceFragments.flatMap(f => getProjectsFromWorkspaceFragment(f));\n  const projectNames = projects.map(p => p.projectName);\n  return {\n    folders: [\n      ...projectNames.map(p => ({path: p})),\n      {path: 'terraform'},\n      {path: '.', name: 'root'},\n    ],\n    settings: {\n      'window.title': `${workspaceName}\\${separator}\\${activeEditorShort}`,\n      'files.exclude': Object.fromEntries([\n        ...projectNames.map(p => [p, true]),\n        ['terraform', true],\n      ]),\n      'editor.acceptSuggestionOnCommitCharacter': false,\n      'editor.suggestSelection': 'first',\n      'vsintellicode.modify.editor.suggestSelection': 'automaticallyOverrodeDefaultValue',\n      'explorer.confirmDelete': false,\n      'git.autofetch': true,\n      'git.confirmSync': false,\n      'typescript.preferences.importModuleSpecifier': 'non-relative',\n      'eslint.lintTask.enable': true,\n      'eslint.useESLintClass': true,\n      'editor.formatOnSave': true,\n      'editor.codeActionsOnSave': {\n        'source.fixAll': 'never',\n        'source.fixAll.eslint': 'explicit',\n      },\n      'editor.defaultFormatter': 'esbenp.prettier-vscode',\n      'editor.linkedEditing': true,\n      'emmet.showExpandedAbbreviation': 'never',\n      'files.associations': {\n        '*.tf': 'terraform',\n      },\n      '[typescript]': {\n        'editor.defaultFormatter': 'esbenp.prettier-vscode',\n      },\n      '[typescriptreact]': {\n        'editor.defaultFormatter': 'esbenp.prettier-vscode',\n      },\n      '[terraform]': {\n        'editor.defaultFormatter': 'hashicorp.terraform',\n      },\n    },\n    extensions: {\n      recommendations: [\n        'dbaeumer.vscode-eslint',\n        'esbenp.prettier-vscode',\n        'VisualStudioExptTeam.vscodeintellicode',\n        'styled-components.vscode-styled-components',\n        'naumovs.color-highlight',\n        'eamodio.gitlens',\n        'hashicorp.terraform',\n      ],\n    },\n  };\n}\n\nexport interface FileHash {\n  path: string;\n  hash: string;\n}\n\nexport interface WorkspaceOptions {\n  region: string;\n}\n\nexport interface Workspace {\n  fragments: WorkspaceFragment[];\n  version: string;\n  files: FileHash[];\n  options: WorkspaceOptions;\n}\n\nexport async function readWorkspace(workspacePath: string): Promise<Workspace | undefined> {\n  const workspaceContent = await maybeReadFile(join(workspacePath, '.workspace'));\n  if (workspaceContent === undefined) {\n    return undefined;\n  }\n  const workspaceData = asMap(JSON.parse(workspaceContent), {});\n\n  const fragments = removeUndefined(\n    asMapArray(workspaceData['fragments'], []).map<WorkspaceFragment | undefined>(fragData => {\n      const type = asString<WorkspaceFragmentType>(fragData['type']);\n      if (type === undefined) {\n        return undefined;\n      } else if (type === WorkspaceFragmentType.Shared) {\n        const frag: WorkspaceFragment = {type: WorkspaceFragmentType.Shared};\n        return frag;\n      } else if (type === WorkspaceFragmentType.SharedWeb) {\n        const frag: WorkspaceFragment = {type: WorkspaceFragmentType.SharedWeb};\n        return frag;\n      } else if (type === WorkspaceFragmentType.SharedNode) {\n        const frag: WorkspaceFragment = {type: WorkspaceFragmentType.SharedNode};\n        return frag;\n      } else if (type === WorkspaceFragmentType.WebApp) {\n        const alarmEmail = asString(fragData['alarmEmail']);\n        const appName = asStringOrThrow(fragData['appName']);\n        const authenticationData = asMap(fragData['authentication'], {});\n        const enabled = asBoolean(authenticationData['enabled'], false);\n        const domain = asString(fragData['domain']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.WebApp,\n          alarmEmail,\n          appName,\n          authentication: {enabled},\n          domain,\n        };\n        return frag;\n      } else if (type === WorkspaceFragmentType.StaticWebsite) {\n        const websiteName = asStringOrThrow<ProjectName>(fragData['websiteName']);\n        const domain = asString(fragData['domain']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.StaticWebsite,\n          websiteName,\n          domain,\n        };\n        return frag;\n      } else if (type === WorkspaceFragmentType.ApiLambda) {\n        const alarmEmail = asString(fragData['alarmEmail']);\n        const apiName = asStringOrThrow<ProjectName>(fragData['apiName']);\n        const domain = asString(fragData['domain']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.ApiLambda,\n          alarmEmail,\n          apiName,\n          domain,\n        };\n        return frag;\n      } else if (type === WorkspaceFragmentType.NodeScript) {\n        const scriptName = asStringOrThrow<ProjectName>(fragData['scriptName']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.NodeScript,\n          scriptName,\n        };\n        return frag;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      else if (type === WorkspaceFragmentType.StandaloneLambda) {\n        const lambdaName = asStringOrThrow<ProjectName>(fragData['lambdaName']);\n        const alarmEmail = asString(fragData['alarmEmail']);\n        const cloudwatchTriggerMinutes = asNumber(fragData['cloudwatchTriggerMinutes']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.StandaloneLambda,\n          lambdaName,\n          alarmEmail,\n          cloudwatchTriggerMinutes,\n        };\n        return frag;\n      }\n      return undefined;\n    })\n  );\n\n  const version = asStringOrThrow(workspaceData['version']);\n  const files = removeUndefined(\n    asMapArray(workspaceData['files'], []).map<FileHash | undefined>(fileData => {\n      const path = asString(fileData['path']);\n      const hash = asString(fileData['hash']);\n      if (path === undefined || hash === undefined) {\n        return undefined;\n      }\n      return {path, hash};\n    })\n  );\n\n  const optionsData = asMap(workspaceData['options'], {});\n  const region = asString(optionsData['region'], DEFAULT_REGION);\n  const options: WorkspaceOptions = {region};\n\n  return {fragments, version, files, options};\n}\n\nexport async function writeWorkspace(workspacePath: string, workspace: Workspace): Promise<void> {\n  workspace.files.sort((f1, f2) => f1.path.localeCompare(f2.path));\n  await writeRawFile(join(workspacePath, '.workspace'), await prettyJson(workspace));\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","__WEBPACK_EXTERNAL_createRequire","url","error","console","log","globalError","val","data","str","Error","stack","String","JSON","stringify","appendFileSync","called","callbacks","runCallbacks","fn","Promise","resolve","catch","err","process","on","access","readFile","readFileInternal","readdir","stat","promises","writeFile","mkdir","rm","async","path","toString","prettierConfig","parser","printWidth","singleQuote","trailingComma","bracketSpacing","arrowParens","endOfLine","writeRawFile","content","dirname","recursive","writeTsFile","ts","format","prettyTs","maybeReadFile","ProjectType","EslintType","TsConfigType","WebpackType","Web","LambdaFunction","Node","Lambda","LambdaApi","LambdaWebApi","NodeScript","Shared","Lib","SharedNode","SharedWeb","WorkspaceFragmentType","pascalCase","toLowerCase","split","map","s","firstChar","undefined","toUpperCase","slice","capitalize","join","fileURLToPath","notUndefined","removeUndefined","arr","filter","neverHappens","errorMessage","asMap","defaultValue","Array","isArray","asJson","json","parse","asString","asStringOrThrow","valueAsString","asArray","asMapArray","asNumber","isNaN","parsedValue","parseFloat","asBoolean","DEFAULT_REGION","booleanFlag","bool","hasApi","allFragments","find","f","type","ApiLambda","WebApp","fragmentFlags","baseFlags","HAS_API","parseDomain","domainStr","parts","rootDomain","subDomain","getProjectsFromWorkspaceFragment","fragment","StaticWebsite","projectName","websiteName","fromFragment","vars","__PROJECT_NAME__","__APP_NAME__","flags","terraform","domain","StandaloneLambda","lambdaName","__PROJECT_NAME_UPPERCASE__","api","webAppName","alarmEmail","cloudwatchTriggerMinutes","authentication","apiName","backendName","appName","frontendName","__APP_NAME_UPPERCASE__","__APP_NAME_PASCALCASE__","AUTHENTICATION","enabled","scriptName","execAsync","cmd","options","reject","exec","stdout","stderr","stderrStr","trim","length","ENABLED","startTs","logFilePath","runnerLog","msg","Date","now","rmSync","force","toLocaleString","getTerraformOutput","terraformOutputs","name","deployLambda","project","workspaceName","tmp","tmpdir","zipPath","randomUUID","codeBucket","region","lambdaNameTerraform","lambdaUrlTerraform","deployWebsite","websiteUrl","groupAndSortErrors","errors","errorsByProjectByFile","Map","globalErrors","projectErrors","set","fileErrors","loc","absolutePath","push","byFile","values","sort","err1","err2","start","diffLine","line","column","diffColumn","message","localeCompare","parseFilePath","root","relativePath","relative","sep","parseError","opts","severity","eslintError","file","code","ruleId","end","issue","location","match","_","extension","findIcons","icons","excludeDirs","excludeFiles","dirs","files","next","nextFile","shift","done","nextDir","dirEnts","withFileTypes","dirEnt","isDirectory","isFile","asyncIterator","iterFiles","p","includes","endsWith","viewBox","element","trimmed","replace","startsWith","basename","html","body","formatFilePath","filePath","underline","formatMessage","yellow","red","padLeft","size","padRight","formatError","lineStr","columnStr","gray","formatLocation","ansiRegex","RegExp","stripAnsi","formatCell","cell","render","watch","statuses","iconServer","flatMap","v","groupedErrors","summary","status","build","deploy","column1","cyan","formatProject","column2","bgRed","whiteBright","renderErrorWarningCount","flat","green","timeSuffix","column3","column4","renderProjectStatus","unshift","report","blocks","entries","renderErrors","write","align","maxWidths","columnIndex","Math","max","colIndex","indent","right","valueStr","i","padString","table","hasIcons","networkInterfaces","net","family","address","port","endTs","floor","errorCount","warnCount","diag","plural","bgYellow","MIN_LOCK_AGE_MS","LOCK_UPDATE_PERIOD_MS","lockFilePath","checkLock","lock","lockFileContent","pidTs","tsStr","pid","readLock","exit","lockInterval","releaseLock","clearInterval","takelock","setInterval","then","writeLock","stopIconServer","globalRoot","stdin","setRawMode","runWebpacks","workspaceFragments","projects","compilationFailure","overrides","terraformPath","res","execSync","cwd","outputsEntries","sensitive","fromEntries","k","terraformFiles","outputMatches","all","matchAll","envConstants","groups","generateEnvFile","hexHash","createHash","update","digest","parseInt","initialIcons","server","createServer","req","icon","listen","stopServer","close","startIconServer","redraw","lastRefresh","shouldRefresh","autoRefresh","setTimeout","onChange","isDone","every","compilers","projectPath","config","import","getConfig","context","current","buildStart","buildId","random","deployStart","outputRes","keys","deployProject","deployEnd","compiler","webpack","stats","compilation","warnings","warn","hooks","run","tap","watchRun","resolvePromise","rejectPromise","globalPromise","cleanupCalled","cleanup","cleanupErr","cb","emit","errorPaths","openCommand","Set","runAllWebpacks","fragments","workspacePath","workspaceContent","workspaceData","fragData","version","fileData","hash","readWorkspace"],"sourceRoot":""}