#!/usr/bin/env node --experimental-modules --no-warnings
import{createRequire as e}from"node:module";const a=e(import.meta.url)("node:fs/promises"),n=e(import.meta.url)("node:path"),t=console.error,r=console.log;let o=function(e){return e.Web="web",e.LambdaFunction="lambda_function",e.LambdaApi="lambda_api",e.LambdaWebApi="lambda_web_api",e.NodeScript="node_script",e.Shared="shared",e.SharedNode="shared-node",e.SharedWeb="shared-web",e}({}),i=function(e){return e.Web="web",e.Node="node",e.Lib="lib",e}({}),s=function(e){return e.Web="web",e.Node="node",e.Lib="lib",e}({}),c=function(e){return e.Web="web",e.Lib="lib",e.Lambda="lambda",e.NodeScript="node-script",e}({});const m={[o.Web]:{eslint:i.Web,tsconfig:s.Web,webpack:c.Web},[o.LambdaFunction]:{eslint:i.Node,tsconfig:s.Node,webpack:c.Lambda},[o.LambdaApi]:{eslint:i.Node,tsconfig:s.Node,webpack:c.Lambda},[o.LambdaWebApi]:{eslint:i.Node,tsconfig:s.Node,webpack:c.Lambda},[o.NodeScript]:{eslint:i.Node,tsconfig:s.Node,webpack:c.NodeScript},[o.Shared]:{eslint:i.Lib,tsconfig:s.Lib,webpack:c.Lib},[o.SharedNode]:{eslint:i.Node,tsconfig:s.Node,webpack:c.Lib},[o.SharedWeb]:{eslint:i.Web,tsconfig:s.Web,webpack:c.Lib}};let d=function(e){return e.StaticWebsite="static-website",e.StandaloneLambda="standalone-lambda",e.ApiLambda="api-lambda",e.WebApp="web-app",e.NodeScript="node-script",e.Shared="shared",e.SharedNode="shared-node",e.SharedWeb="shared-web",e}({});function p(e,a){return e.filter((e=>e.type===a))}const l=e(import.meta.url)("prompts"),u=e(import.meta.url)("node:child_process"),_=e(import.meta.url)("node:url"),f=e(import.meta.url)("node:fs"),b=e(import.meta.url)("prettier"),{access:w,readFile:h,readdir:g,stat:y}=f.promises,{writeFile:$,mkdir:A,rm:v}=f.promises;async function N(e){return(await h(e)).toString()}const S=e=>({parser:e,printWidth:100,singleQuote:!0,trailingComma:"es5",bracketSpacing:!1,arrowParens:"avoid",endOfLine:"auto"});async function E(e,a){return await(0,b.format)(e,S(a))}async function j(e,a){await A((0,n.dirname)(e),{recursive:!0}),await $(e,a)}async function k(e,a){const{compact:n}=a??{};return await(0,b.format)(n?JSON.stringify(e):JSON.stringify(e,void 0,2),S("json"))}async function C(e,a){const{compact:n}=a??{};return await(0,b.format)(n?JSON.stringify(e):JSON.stringify(e,void 0,2),S("jsonc"))}async function L(e){return await(0,b.format)(e,S("babel"))}async function W(e){const a=[],t=await g(e,{withFileTypes:!0}),r=[];for(const o of t){const t=(0,n.join)(e,o.name);o.isDirectory()?r.push(W(t).then((e=>{a.push(...e)}))):o.isFile()&&a.push(t)}return await Promise.all(r),a}const P=e(import.meta.url)("node:crypto");function T(e){return e.toLowerCase().split(/[^a-z]+/u).map((e=>function(e){const[a]=e;return void 0===a?"":a.toUpperCase()+e.slice(1)}(e))).join("")}function D(e){return e.toLowerCase().split(/[^a-z]+/u).join("_")}function O(e){const{webApps:a,apiLambdas:n}=e;return{path:"shared/src/api/api.ts",content:[[...a.map((e=>`import {${e.appName.toUpperCase()}_API} from '@shared/api/${e.appName}_api';`)),...n.map((e=>`import {${e.apiName.toUpperCase()}} from '@shared/api/${e.apiName}';`)),"import {AllApiSchema} from '@shared/api/core/api_schema';","import {ApiConfig, ApiName} from '@shared/api/core/api_types';",`import {${[...a.map((e=>`${e.appName.toUpperCase()}_BACKEND_URL`)),...n.map((e=>`${e.apiName.toUpperCase()}_URL`))].join(", ")}} from '@shared/env';`].join("\n"),`\n    export const ALL = {\n      ${[...a.map((e=>`${e.appName}_backend: ${e.appName.toUpperCase()}_API,`)),...n.map((e=>`${e.apiName}: ${e.apiName.toUpperCase()},`))].join("\n")}\n    } satisfies AllApiSchema;\n  `.trim(),`\n    export const API_CONFIGS = {\n      ${[...a.map((e=>`${e.appName}_backend: {host: ${e.appName.toUpperCase()}_BACKEND_URL},`)),...n.map((e=>`${e.apiName}: {host: ${e.apiName.toUpperCase()}_URL},`))].join("\n")}\n    } satisfies Record<ApiName, ApiConfig>;\n  `.trim()].join("\n\n")}}function U(e){return{path:"shared/src/models.ts",content:`\nimport {Brand} from '@shared/lib/type_utils';\n\n${e.map((e=>{const a=`${T(e.appName)}User`;return`\nexport type ${a}Id = Brand<'${a}Id', string>;\n\nexport interface ${a}Item {\nid: ${a}Id;\nhash: string;\nsalt: string;\nsessionDuration: number; // in seconds\n}\n`.trim()})).join("\n\n")}\n`}}const x="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";function I(e,a){let n="";const t=a??x,r=(0,P.randomBytes)(e);for(const e of r)n+=t[Math.floor(e/255*(t.length-1))];return n}const R=(0,n.join)((0,_.fileURLToPath)(import.meta.url),"../templates");async function F(e){const{dst:a,project:t,allFragments:r,workspace:i,workspaceName:s}=e,c=[],{projectName:m,type:l,vars:u}=t,_={__WORKSPACE_NAME__:s,__WORKSPACE_NAME_UPPERCASE__:(f=s,f.toUpperCase().split(/[^A-Z]+/u).join("_")),__COOKIE_ENCRYPTION_KEY__:I(32)};var f;const b=(0,n.join)(R,l),w=await W(b),h=[...await Promise.all(w.map((async e=>{const a=(0,n.relative)(b,e),t=(0,n.join)(m,a);let r=await N(e);if(e.endsWith("package.json")){const a=JSON.parse(await N(e));a.name=m,r=JSON.stringify(a,void 0,2)}for(const[e,a]of Object.entries({...u,..._}))r=r.replaceAll(e,a);return{path:t,content:r}})))];return l===o.Shared&&h.push(...function(e){const a=p(e,d.WebApp),n=p(e,d.ApiLambda),t=a.filter((e=>e.authentication.enabled));return[..._e(e)?[O({webApps:a,apiLambdas:n})]:[],...a.map((e=>{const a=`${T(e.appName)}User`;return{path:`shared/src/api/${e.appName}_api.ts`,content:e.authentication.enabled?`\nimport {Obj, SchemaToType, Str} from '@shared/api/core/api_schema';\nimport {${a}Id} from '@shared/models';\n\nconst Frontend${a}Schema = Obj({\n    id: Str<${a}Id>(),\n});\nexport type Frontend${a} = SchemaToType<typeof Frontend${a}Schema>;\n\nexport const ${e.appName.toUpperCase()}_API = {\n    '/login': {\n        POST: {\n            req: Obj({id: Str(), password: Str()}),\n            res: Frontend${a}Schema,\n        },\n    },\n    '/test': {\n        POST: {\n            req: Obj({query: Str()}),\n            res: Obj({data: Str()}),\n        },\n    },\n};\n      `:`\nimport {Obj, Str} from '@shared/api/core/api_schema';\n\nexport const ${e.appName.toUpperCase()}_API = {\n    '/test': {\n        POST: {\n            req: Obj({query: Str()}),\n            res: Obj({data: Str()}),\n        },\n    },\n};\n          `}})),...n.map((e=>({path:`shared/src/api/${e.apiName}.ts`,content:`\n  import {Unknown} from '@shared/api/core/api_schema';\n  \n  export const ${e.apiName.toUpperCase()} = {\n      '/test': {\n          GET: {\n              req: Unknown(),\n              res: Unknown(),\n          },\n      },\n  };\n        `}))),...0===t.length?[]:[U(t)]]}(r)),await Promise.all(h.map((async({path:e,content:n})=>{let o=n;const s=n.matchAll(/\/\/ @matthis\/skip-file:(?<flagName>[^:]+)(?<negate>:not)?:(?<flagValue>[^\s]*)/gu);for(const e of s){const{flagName:a,negate:n,flagValue:o}=e.groups??{};if(M({flagName:a,negate:n,flagValue:o},t,r))return}o=o.replaceAll(/ *\/\/ @matthis\/skip-file:[^:]+(?::not)?:[^\n]*\n/gu,"");const m=[],d=["include"];for(const e of o.split("\n")){if(e.includes("@matthis/end")){d.pop();continue}const a=/.*\/\/ @matthis\/start:(?<flagName>[^:]+)(?<negate>:not)?:(?<flagValue>[^\s]*).*/u.exec(e);if(a){const{flagName:e,negate:n,flagValue:o}=a.groups??{};d.push(M({flagName:e,negate:n,flagValue:o},t,r)?"include":"exclude")}else"include"===d.at(-1)&&m.push(e)}o=m.join("\n"),(e.endsWith(".ts")||e.endsWith(".tsx"))&&(o=await E(o,"typescript")),e.endsWith(".json")&&(o=await E(o,"json")),c.push(await ge(i,a,e,o))}))),c}function M(e,a,n){const{flagName:t,negate:r,flagValue:o}=e;if(void 0===t||void 0===o)return!1;const i=a.flags(n)[t]===o;return void 0!==r?!i:i}const z={project:"1.12.28",eslint:"1.8.5",prettier:"1.5.0",tsconfig:"1.7.4",webpack:"1.8.10",runner:"1.6.21",lambdaServerRuntime:"1.0.7"},V="5.5.x",q=">=20.10";function H(e){return[...new Set(e).values()]}function B(e,a){const n=H(a.map((e=>m[e.type].eslint))),t=H(a.map((e=>m[e.type].tsconfig))),r=H(a.map((e=>m[e.type].webpack)));return{name:e,license:"UNLICENSED",type:"module",engines:{node:q},scripts:{setup:"node ./setup.js",deploy:"node ./deploy.js",build:"node ./build.js",watch:"node ./build.js --watch"},prettier:"@matthis/prettier-config",devDependencies:Object.fromEntries([...n.map((e=>[`@matthis/eslint-config-${e}`,z.eslint])),["@matthis/prettier-config",z.prettier],...t.map((e=>[`@matthis/tsconfig-${e}`,z.tsconfig])),...r.map((e=>[`@matthis/webpack-${e}`,z.webpack])),["@matthis/webpack-runner",z.runner],["typescript",V]].sort(((e,a)=>e[0].localeCompare(a[0]))))}}function J(e,a){const{region:n}=a;return`\nterraform {\n  required_providers {\n    aws = {\n      source  = "hashicorp/aws"\n      version = "~> 5.1"\n    }\n  }\n}\n\nprovider "aws" {\n  region                   = "${n}"\n  default_tags {\n    tags = {\n      Project = "${e}"\n    }\n  }\n}\n\nprovider "aws" {\n  alias                    = "us-east-1"\n  region                   = "us-east-1"\n  default_tags {\n    tags = {\n      Project = "${e}"\n    }\n  }\n}\n\ndata "aws_region" "current" {}\noutput "region" {\n  value = data.aws_region.current.id\n}\n\ndata "aws_caller_identity" "current" {}\noutput "account_id" {\n  value = data.aws_caller_identity.current.account_id\n}\n`.trim()}function G(e,a){const n=`\nresource "aws_s3_bucket" "code" {\n  bucket_prefix = "${e.toLowerCase().replace(/[^a-z0-9.-]+/gu,"-")}-code-"\n}\n\noutput "code_bucket" {\n  value = aws_s3_bucket.code.id\n}\n`.trim(),t=`\ndata "aws_iam_policy_document" "cloudfront_access_to_code_policy" {\n  ${a.map((e=>`\n  statement {\n    actions = ["s3:GetObject"]\n    resources = [\n      "\${aws_s3_bucket.code.arn}/${e}/*",\n    ]\n    principals {\n      type        = "AWS"\n      identifiers = [aws_cloudfront_origin_access_identity.${e}.iam_arn]\n    }\n  }\n`.trim())).join("\n\n")}\n}\n\nresource "aws_s3_bucket_policy" "cloudfront_access_to_code" {\n  bucket = aws_s3_bucket.code.id\n  policy = data.aws_iam_policy_document.cloudfront_access_to_code_policy.json\n}\n`.trim(),r=[n];return a.length>0&&r.push(t),r.join("\n\n")}function K(e){return void 0!==e}function Q(e){return e.filter(K)}function Y(e,a){throw new Error(a)}function Z(e,a){return"object"!=typeof e||null===e||Array.isArray(e)?a:e}function X(e,a){return"string"==typeof e?e:a}function ee(e){const a=X(e);if(void 0===a)throw new Error(`Invalid value: \`${e}\` is not a string`);return a}function ae(e,a){return Array.isArray(e)?e:a}function ne(e,a){const n=ae(e);return void 0===n?a:Q(n.map((e=>Z(e))))}function te(e,a){if("number"==typeof e)return isNaN(e)?a:e;if("string"==typeof e)try{const n=parseFloat(e);return isNaN(n)?a:n}catch{return a}return a}function re(e,a){return"boolean"==typeof e?e:"number"==typeof e?!isNaN(e)&&0!==e:"string"==typeof e?"0"!==e&&"false"!==e&&("1"===e||"true"===e||a):a}function oe(e,a,n){const{region:t}=n;return[J(e,{region:t}),G(e,a.filter((e=>e.type===o.Web)).map((e=>e.projectName)))].join("\n\n")}function ie(e,a){const{projectName:n,terraform:t}=a;return"frontend"===t.type?function(e,a){const{domain:n}=a,t=`${e.toLowerCase().replace(/[^\d.a-z-]+/gu,"-")}-origin-id`;return`\noutput "${e}_cloudfront_domain_name" {\n  value       = ${n?`"${n.subDomain}.${n.rootDomain}"`:`aws_cloudfront_distribution.${e}.domain_name`}\n  description = "Domain (from cloudfront) where the \\"${e}\\" is available."\n}${void 0!==n?`\n\n# Domain\n\ndata "aws_route53_zone" "${e}" {\n  name = "${n.rootDomain}"\n}\n\nresource "aws_route53_record" "${e}_a" {\n  zone_id = data.aws_route53_zone.${e}.zone_id\n  name    = "${n.subDomain}.${n.rootDomain}"\n  type    = "A"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${e}.domain_name\n    zone_id                = aws_cloudfront_distribution.${e}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource "aws_route53_record" "${e}_aaaa" {\n  zone_id = data.aws_route53_zone.${e}.zone_id\n  name    = "${n.subDomain}.${n.rootDomain}"\n  type    = "AAAA"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${e}.domain_name\n    zone_id                = aws_cloudfront_distribution.${e}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource "aws_acm_certificate" "${e}" {\n  domain_name               = "*.${n.subDomain}.${n.rootDomain}"\n  subject_alternative_names = ["${n.subDomain}.${n.rootDomain}"]\n  validation_method         = "DNS"\n  provider                  = aws.us-east-1\n}\n\nresource "aws_route53_record" "${e}_certificate_validation" {\n  for_each = {\n    for dvo in aws_acm_certificate.${e}.domain_validation_options : dvo.domain_name => {\n      name   = dvo.resource_record_name\n      record = dvo.resource_record_value\n      type   = dvo.resource_record_type\n    }\n  }\n  provider        = aws.us-east-1\n  allow_overwrite = true\n  name            = each.value.name\n  records         = [each.value.record]\n  ttl             = 60\n  type            = each.value.type\n  zone_id         = data.aws_route53_zone.${e}.zone_id\n}\n\nresource "aws_acm_certificate_validation" "${e}" {\n  provider                = aws.us-east-1\n  certificate_arn         = aws_acm_certificate.${e}.arn\n  validation_record_fqdns = [for record in aws_route53_record.${e}_certificate_validation : record.fqdn]\n}`:""}\n\n# Cloudfront Distribution\n\nresource "aws_cloudfront_origin_access_identity" "${e}" {}\n  \nresource "aws_cloudfront_distribution" "${e}" {\n  origin {\n    domain_name = aws_s3_bucket.code.bucket_regional_domain_name\n    origin_id   = "${t}"\n    origin_path = "/${e}"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.${e}.cloudfront_access_identity_path\n    }\n  }\n  \n  enabled             = true\n  wait_for_deployment = false\n  is_ipv6_enabled     = true\n  price_class         = "PriceClass_100"${n?`\n  aliases             = ["${n.subDomain}.${n.rootDomain}"]`:""}\n  \n  default_root_object = "/index.html"\n  custom_error_response {\n    error_code         = 400\n    response_code      = 200\n    response_page_path = "/index.html"\n  }\n  custom_error_response {\n    error_code         = 403\n    response_code      = 200\n    response_page_path = "/index.html"\n  }\n  custom_error_response {\n    error_code         = 404\n    response_code      = 200\n    response_page_path = "/index.html"\n  }\n\n  default_cache_behavior {\n    allowed_methods        = ["HEAD", "GET"]\n    cached_methods         = ["HEAD", "GET"]\n    compress               = true\n    target_origin_id       = "${t}"\n    viewer_protocol_policy = "redirect-to-https"\n    \n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = "none"\n      }\n    }\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = "none"\n    }\n  }\n\n  viewer_certificate {${n?`\n    acm_certificate_arn      = aws_acm_certificate.${e}.arn\n    ssl_support_method       = "sni-only"\n    minimum_protocol_version = "TLSv1.2_2021"`:"\n    cloudfront_default_certificate = true"}\n  }\n}\n  `.trim()}(n,t):"lambda"===t.type?function(e,a,n){const{api:t,webAppName:r,alarmEmail:o,cloudwatchTriggerMinutes:i,domain:s,authentication:c}=n;return`\n# Define any extra role for the lambda here\ndata "aws_iam_policy_document" "${a}_extra_policy" {\n  ${c?.enabled?`statement {\n    actions = [\n      "dynamodb:GetItem",\n      "dynamodb:BatchGetItem",\n      "dynamodb:Query",\n      "dynamodb:Scan",\n      "dynamodb:PutItem",\n      "dynamodb:UpdateItem",\n      "dynamodb:DeleteItem",\n    ]\n    resources = [${void 0===r?"":`\n      "\${aws_dynamodb_table.${D(r)}_user_table.arn}",\n      "\${aws_dynamodb_table.${D(r)}_user_table.arn}/index/*",\n      "\${aws_dynamodb_table.${D(r)}_user_session_table.arn}",\n      "\${aws_dynamodb_table.${D(r)}_user_session_table.arn}/index/*",\n    `}]\n  }`:""}${void 0!==r?'\n\n  statement {\n    actions = [\n      "s3:GetObject",\n      "s3:GetObjectTagging"\n    ]\n    resources = [\n      "${aws_s3_bucket.code.arn}/*"\n    ]\n  }':""}\n}\n\nresource "aws_lambda_function" "${a}" {\n  function_name = "${e}-${a}"\n  s3_bucket     = aws_s3_object.${a}_archive.bucket\n  s3_key        = aws_s3_object.${a}_archive.key\n  handler       = "index.handler"\n  runtime       = "nodejs20.x"\n  role          = aws_iam_role.${a}_role.arn\n  timeout       = 900 // 15 minutes\n  memory_size   = 128 // Mo\n  environment {\n    variables = {${t?`\n      NODE_OPTIONS            = "--enable-source-maps"\n      CLOUDFRONT_HEADER_NAME  = random_string.${a}_cloudfront_header_name.result\n      CLOUDFRONT_HEADER_VALUE = random_string.${a}_cloudfront_header_value.result`:'\n      NODE_OPTIONS = "--enable-source-maps"'}\n    }\n  }\n}\n\noutput "${a}_function_name" {\n  value       = aws_lambda_function.${a}.function_name\n  description = "Function name of the \\"${e}-${a}\\" lambda"\n}\n${t?`\n# Lambda URL\n\nresource "aws_lambda_function_url" "${a}" {\n  function_name      = aws_lambda_function.${a}.function_name\n  authorization_type = "NONE"\n}\n\noutput "${a}_url" {\n  value       = "${s?`https://${s.subDomain}.${s.rootDomain}/`:`https://\${aws_cloudfront_distribution.${a}.domain_name}/`}"\n  description = "URL of \\"${a}\\""\n}${void 0!==s?`\n\n# Domain\n\ndata "aws_route53_zone" "${a}" {\n  name = "${s.rootDomain}"\n}\n\nresource "aws_route53_record" "${a}_a" {\n  zone_id = data.aws_route53_zone.${a}.zone_id\n  name    = "${s.subDomain}.${s.rootDomain}"\n  type    = "A"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${a}.domain_name\n    zone_id                = aws_cloudfront_distribution.${a}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource "aws_route53_record" "${a}_aaaa" {\n  zone_id = data.aws_route53_zone.${a}.zone_id\n  name    = "${s.subDomain}.${s.rootDomain}"\n  type    = "AAAA"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${a}.domain_name\n    zone_id                = aws_cloudfront_distribution.${a}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource "aws_acm_certificate" "${a}" {\n  domain_name               = "*.${s.subDomain}.${s.rootDomain}"\n  subject_alternative_names = ["${s.subDomain}.${s.rootDomain}"]\n  validation_method         = "DNS"\n  provider                  = aws.us-east-1\n}\n\nresource "aws_route53_record" "${a}_certificate_validation" {\n  for_each = {\n    for dvo in aws_acm_certificate.${a}.domain_validation_options : dvo.domain_name => {\n      name   = dvo.resource_record_name\n      record = dvo.resource_record_value\n      type   = dvo.resource_record_type\n    }\n  }\n  provider        = aws.us-east-1\n  allow_overwrite = true\n  name            = each.value.name\n  records         = [each.value.record]\n  ttl             = 60\n  type            = each.value.type\n  zone_id         = data.aws_route53_zone.${a}.zone_id\n}\n\nresource "aws_acm_certificate_validation" "${a}" {\n  provider                = aws.us-east-1\n  certificate_arn         = aws_acm_certificate.${a}.arn\n  validation_record_fqdns = [for record in aws_route53_record.${a}_certificate_validation : record.fqdn]\n}`:""}\n\n# Cloudfront Distribution\n\nresource "random_string" "${a}_cloudfront_header_name" {\n  length  = 16\n  upper   = false\n  numeric = false\n  special = false\n}\n\nresource "random_string" "${a}_cloudfront_header_value" {\n  length  = 32\n  special = false\n}\n\nresource "aws_cloudfront_distribution" "${a}" {\n  origin {\n    # Remove "https://" prefix and "/" suffix\n    domain_name = replace(replace(aws_lambda_function_url.${a}.function_url, "https://", ""), "/", "")\n    origin_id   = aws_lambda_function.${a}.function_name\n\n    custom_origin_config {\n      https_port             = 443\n      http_port              = 80\n      origin_protocol_policy = "https-only"\n      origin_ssl_protocols   = ["TLSv1.2"]\n    }\n\n    custom_header {\n      name  = random_string.${a}_cloudfront_header_name.result\n      value = random_string.${a}_cloudfront_header_value.result\n    }\n  }\n\n  enabled             = true\n  wait_for_deployment = false\n  is_ipv6_enabled     = true\n  price_class         = "PriceClass_100"${s?`\n  aliases             = ["${s.subDomain}.${s.rootDomain}"]`:""}\n\n  default_cache_behavior {\n    allowed_methods        = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]\n    cached_methods         = ["HEAD", "GET"]\n    compress               = true\n    target_origin_id       = aws_lambda_function.${a}.function_name\n    viewer_protocol_policy = "redirect-to-https"\n    # Managed-CachingDisabled\n    cache_policy_id = "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"\n    # Managed-AllViewerExceptHostHeader\n    origin_request_policy_id = "b689b0a8-53d0-40ab-baf2-68738e2966ac"\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = "none"\n    }\n  }\n\n  viewer_certificate {${s?`\n    acm_certificate_arn      = aws_acm_certificate.${a}.arn\n    ssl_support_method       = "sni-only"\n    minimum_protocol_version = "TLSv1.2_2021"`:"\n    cloudfront_default_certificate = true"}\n  }\n}`:""}\n${void 0!==i?`# Cloudwatch trigger\n\nresource "aws_lambda_permission" "cloudwatch_invoke_${a}" {\n  statement_id  = "AllowExecutionFromCloudWatch"\n  action        = "lambda:InvokeFunction"\n  function_name = aws_lambda_function.${a}.arn\n  principal     = "events.amazonaws.com"\n  source_arn    = aws_cloudwatch_event_rule.${a}_trigger_rate.arn\n}\n\nresource "aws_cloudwatch_event_rule" "${a}_trigger_rate" {\n  name_prefix         = "${a}.rate-${i}-minutes."\n  schedule_expression = "rate(${i} minute${i>1?"s":""})"\n}\n\nresource "aws_cloudwatch_event_target" "${a}_trigger_target" {\n  rule = aws_cloudwatch_event_rule.${a}_trigger_rate.name\n  arn  = aws_lambda_function.${a}.arn\n}\n`:""}\n# IAM role\n\nresource "aws_iam_role" "${a}_role" {\n  name = "${e}-${a}-role"\n  assume_role_policy = jsonencode({\n    Version = "2012-10-17"\n    Statement = [\n      {\n        Action = "sts:AssumeRole"\n        Principal = {\n          Service = "lambda.amazonaws.com"\n        }\n        Effect = "Allow"\n      },\n    ]\n  })\n  \n  inline_policy {\n    name   = "${e}-${a}-extra-policy"\n    policy = data.aws_iam_policy_document.${a}_extra_policy.json\n  }\n}\n\noutput "${a}_role_arn" {\n  value = aws_iam_role.${a}_role.arn\n}\n\n# Cloudwatch logging\n\nresource "aws_cloudwatch_log_group" "${a}" {\n  name = "/aws/lambda/${e}-${a}"\n}\n\nresource "aws_iam_policy" "${a}_cloudwatch" {\n  name = "${e}-${a}-cloudwatch-policy"\n  policy = jsonencode({\n    Version = "2012-10-17"\n    Statement = [\n      {\n        Action = [\n          "logs:CreateLogStream",\n          "logs:PutLogEvents",\n        ]\n        Effect = "Allow"\n        Resource = [\n          "\${aws_cloudwatch_log_group.${a}.arn}",\n          "\${aws_cloudwatch_log_group.${a}.arn}:*",\n        ]\n      }\n    ]\n  })\n}\n\nresource "aws_iam_role_policy_attachment" "${a}_cloudwatch" {\n  role       = aws_iam_role.${a}_role.name\n  policy_arn = aws_iam_policy.${a}_cloudwatch.arn\n}\n${void 0!==o?`\n# Cloudwatch error monitoring\n\nresource "aws_cloudwatch_log_metric_filter" "${a}_log_errors" {\n  name           = "${e}-${a}-log-error-metric-filter"\n  pattern        = "[ts, id, level = \\"ERROR\\", msg]"\n  log_group_name = aws_cloudwatch_log_group.${a}.name\n\n  metric_transformation {\n    name          = "${e}-${a}-errors"\n    namespace     = "${e}"\n    value         = "1"\n    default_value = "0"\n    unit          = "Count"\n  }\n}\n\nresource "aws_cloudwatch_metric_alarm" "${a}_log_errors" {\n  alarm_name          = "${e}-${a}-log-error-metric-alarm"\n  metric_name         = aws_cloudwatch_log_metric_filter.${a}_log_errors.metric_transformation[0].name\n  namespace           = aws_cloudwatch_log_metric_filter.${a}_log_errors.metric_transformation[0].namespace\n  evaluation_periods  = 1\n  period              = 3600\n  statistic           = "Sum"\n  comparison_operator = "GreaterThanOrEqualToThreshold"\n  threshold           = 1\n  actions_enabled     = true\n  alarm_actions       = [aws_sns_topic.${a}_log_errors.arn]\n  ok_actions          = [aws_sns_topic.${a}_log_errors.arn]\n  treat_missing_data  = "notBreaching"\n}\n\nresource "aws_sns_topic" "${a}_log_errors" {\n  name = "${e}-${a}-log-error-sns-topic"\n}\n\nresource "aws_sns_topic_subscription" "${a}_log_errors" {\n  endpoint  = "${o}"\n  protocol  = "email"\n  topic_arn = aws_sns_topic.${a}_log_errors.arn\n}\n`:""}\n# Dummy source code useful only during the initial setup\nresource "aws_s3_object" "${a}_archive" {\n  bucket         = aws_s3_bucket.code.id\n  key            = "${a}/dist.zip"\n  content_base64 = "UEsDBBQACAAIAGaKwlYAAAAAAAAAADYAAAAIACAAaW5kZXguanNVVA0AB3AIemRyCHpkcAh6ZHV4CwABBPUBAAAEFAAAAEutKMgvKinWy0jMS8lJLVKwVUgsrsxLVkgrzUsuyczPU9DQVKjmUlAoSi0pLcpTUFe35qq15gIAUEsHCP0ak1o4AAAANgAAAFBLAQIUAxQACAAIAGaKwlb9GpNaOAAAADYAAAAIACAAAAAAAAAAAACkgQAAAABpbmRleC5qc1VUDQAHcAh6ZHIIemRwCHpkdXgLAAEE9QEAAAQUAAAAUEsFBgAAAAABAAEAVgAAAI4AAAAAAA=="\n}\n\n`.trim()}(e,n,t):void("no-terraform"!==t.type&&Y(0,"Terraform type"))}function se(e,a){const n=D(a);return`\noutput "${n}_user_table_name" {\n  value = aws_dynamodb_table.${n}_user_table.name\n}\n\noutput "${n}_user_index_name" {\n  value = {\n    for obj in aws_dynamodb_table.${n}_user_table.global_secondary_index : "${n}_user_by_\${obj.hash_key}\${length(obj.range_key) > 0 ? "_sorted_by_\${obj.range_key}" : ""}" => obj.name\n  }\n}\n\nresource "aws_dynamodb_table" "${n}_user_table" {\n  name         = "${`${T(e)}${T(a)}`}User"\n  billing_mode = "PAY_PER_REQUEST"\n  hash_key     = "id"\n\n  attribute {\n    name = "id"\n    type = "S"\n  }\n}`.trim()}function ce(e,a){const n=D(a);return`output "${n}_user_session_table_name" {\n  value = aws_dynamodb_table.${n}_user_session_table.name\n}\n\noutput "${n}_user_session_index_name" {\n  value = {\n    for obj in aws_dynamodb_table.${n}_user_session_table.global_secondary_index : "${n}_user_session_by_\${obj.hash_key}\${ length(obj.range_key) > 0 ? "_sorted_by_\${obj.range_key}" : "" }" => obj.name\n  }\n}\n\nresource "aws_dynamodb_table" "${n}_user_session_table" {\n  name         = "${`${T(e)}${T(a)}`}UserSession"\n  billing_mode = "PAY_PER_REQUEST"\n  hash_key     = "token"\n\n  attribute {\n    name = "token"\n    type = "S"\n  }\n\n  ttl {\n    attribute_name = "expiresAt"\n    enabled        = true\n  }\n}`.trim()}function me(e,a){const n=a.flatMap((e=>we(e))).map((e=>e.projectName));return{folders:[...n.map((e=>({path:e}))),{path:"terraform"},{path:".",name:"root"}],settings:{"window.title":`${e}\${separator}\${activeEditorShort}`,"files.exclude":Object.fromEntries([...n.map((e=>[e,!0])),["terraform",!0]]),"editor.acceptSuggestionOnCommitCharacter":!1,"editor.suggestSelection":"first","vsintellicode.modify.editor.suggestSelection":"automaticallyOverrodeDefaultValue","explorer.confirmDelete":!1,"git.autofetch":!0,"git.confirmSync":!1,"typescript.preferences.importModuleSpecifier":"non-relative","eslint.lintTask.enable":!0,"eslint.useESLintClass":!0,"editor.formatOnSave":!0,"editor.codeActionsOnSave":{"source.fixAll":"never","source.fixAll.eslint":"explicit"},"editor.defaultFormatter":"esbenp.prettier-vscode","editor.linkedEditing":!0,"emmet.showExpandedAbbreviation":"never","files.associations":{"*.tf":"terraform"},"[typescript]":{"editor.defaultFormatter":"esbenp.prettier-vscode"},"[typescriptreact]":{"editor.defaultFormatter":"esbenp.prettier-vscode"},"[terraform]":{"editor.defaultFormatter":"hashicorp.terraform"}},extensions:{recommendations:["dbaeumer.vscode-eslint","esbenp.prettier-vscode","VisualStudioExptTeam.vscodeintellicode","styled-components.vscode-styled-components","naumovs.color-highlight","eamodio.gitlens","hashicorp.terraform"]}}}async function de(e){const a=await async function(e){try{return(await N(e)).toString()}catch{return}}((0,n.join)(e,".workspace"));if(void 0===a)return;const t=Z(JSON.parse(a),{});return{fragments:Q(ne(t.fragments,[]).map((e=>{const a=X(e.type);if(void 0!==a){if(a===d.Shared){return{type:d.Shared}}if(a===d.SharedWeb){return{type:d.SharedWeb}}if(a===d.SharedNode){return{type:d.SharedNode}}if(a===d.WebApp){const a=X(e.alarmEmail),n=ee(e.appName),t=re(Z(e.authentication,{}).enabled,!1),r=X(e.domain);return{type:d.WebApp,alarmEmail:a,appName:n,authentication:{enabled:t},domain:r}}if(a===d.StaticWebsite){const a=ee(e.websiteName),n=X(e.domain);return{type:d.StaticWebsite,websiteName:a,domain:n}}if(a===d.ApiLambda){const a=X(e.alarmEmail),n=ee(e.apiName),t=X(e.domain);return{type:d.ApiLambda,alarmEmail:a,apiName:n,domain:t}}if(a===d.NodeScript){const a=ee(e.scriptName);return{type:d.NodeScript,scriptName:a}}if(a===d.StandaloneLambda){const a=ee(e.lambdaName),n=X(e.alarmEmail),t=te(e.cloudwatchTriggerMinutes);return{type:d.StandaloneLambda,lambdaName:a,alarmEmail:n,cloudwatchTriggerMinutes:t}}}}))),version:ee(t.version),files:Q(ne(t.files,[]).map((e=>{const a=X(e.path),n=X(e.hash);if(void 0!==a&&void 0!==n)return{path:a,hash:n}}))),options:{region:X(Z(t.options,{}).region,pe)}}}const pe="eu-west-3",le=(0,n.join)((0,_.fileURLToPath)(import.meta.url),"../templates"),ue=e=>e?"true":"false";function _e(e){return void 0!==e.find((e=>e.type===d.ApiLambda||e.type===d.WebApp))}function fe(e){return a=>({...{HAS_API:ue(_e(a))},...e})}function be(e){if(void 0===e)return;const a=e.split("."),n=a.slice(-2).join(".");return{subDomain:a.slice(0,-2).join("."),rootDomain:n}}function we(e){if(e.type===d.StaticWebsite)return[{projectName:e.websiteName,type:o.Web,fromFragment:e,vars:{__PROJECT_NAME__:e.websiteName,__APP_NAME__:e.websiteName},flags:fe({}),terraform:{type:"frontend",domain:be(e.domain)}}];if(e.type===d.StandaloneLambda)return[{projectName:e.lambdaName,type:o.LambdaFunction,fromFragment:e,vars:{__PROJECT_NAME__:e.lambdaName,__PROJECT_NAME_UPPERCASE__:e.lambdaName.toUpperCase()},flags:fe({}),terraform:{type:"lambda",api:!1,webAppName:void 0,alarmEmail:e.alarmEmail,cloudwatchTriggerMinutes:e.cloudwatchTriggerMinutes,domain:void 0,authentication:void 0}}];if(e.type===d.ApiLambda)return[{projectName:e.apiName,type:o.LambdaApi,fromFragment:e,vars:{__PROJECT_NAME__:e.apiName,__PROJECT_NAME_UPPERCASE__:e.apiName.toUpperCase()},flags:fe({}),terraform:{type:"lambda",api:!0,webAppName:void 0,alarmEmail:e.alarmEmail,cloudwatchTriggerMinutes:void 0,domain:be(e.domain),authentication:void 0}}];if(e.type===d.WebApp){const a=`${e.appName}_backend`,n=`${e.appName}_frontend`,t={__APP_NAME__:e.appName,__APP_NAME_UPPERCASE__:e.appName.toUpperCase(),__APP_NAME_PASCALCASE__:T(e.appName)},r=fe({AUTHENTICATION:ue(e.authentication.enabled)});return[{projectName:n,type:o.Web,fromFragment:e,vars:t,flags:r,terraform:{type:"frontend",domain:void 0===e.domain?void 0:be(`static.${e.domain}`)}},{projectName:a,type:o.LambdaWebApi,fromFragment:e,vars:t,flags:r,terraform:{type:"lambda",api:!0,webAppName:e.appName,alarmEmail:e.alarmEmail,cloudwatchTriggerMinutes:void 0,domain:be(e.domain),authentication:e.authentication}}]}if(e.type===d.NodeScript)return[{projectName:e.scriptName,type:o.NodeScript,fromFragment:e,vars:{__PROJECT_NAME__:e.scriptName},flags:fe({}),terraform:{type:"no-terraform"}}];if(e.type===d.SharedNode){const a="shared-node";return[{projectName:a,type:o.SharedNode,fromFragment:e,vars:{__PROJECT_NAME__:a},flags:fe({}),terraform:{type:"no-terraform"}}]}if(e.type===d.SharedWeb){const a="shared-web";return[{projectName:a,type:o.SharedWeb,fromFragment:e,vars:{__PROJECT_NAME__:a},flags:fe({}),terraform:{type:"no-terraform"}}]}if(e.type===d.Shared){const a="shared";return[{projectName:a,type:o.Shared,fromFragment:e,vars:{__PROJECT_NAME__:a},flags:fe({}),terraform:{type:"no-terraform"}}]}Y(0,`Unknown ProjectType ${e.type}`)}async function he(e,a,t,o,i){const s=t.flatMap((e=>we(e))),c=await Promise.all(s.map((async n=>await F({dst:e,project:n,allFragments:t,workspace:i,workspaceName:a})))),m=(0,n.join)((0,_.fileURLToPath)(import.meta.url),"../scripts"),p=async(a,n)=>await ge(i,e,a,n),l=await Promise.all([p("package.json",await k(B(a,s))),p("app.code-workspace",await C(me(a,t))),p(".gitignore","\n.DS_Store\nnode_modules\nbuild\ndist\ntmp\nyarn-error.log\n.yarn-warnings.log\nyarn.lock\nterraform/.terraform\nterraform/.terraform*\nterraform/*.tfstate.backup\nterraform/archives\n*/log\n/shared/src/env.ts\n/.build.lock\n    ".trim()),p("setup.js",await L(await N((0,n.join)(m,"setup.js")))),p("deploy.js",await L(await N((0,n.join)(m,"deploy.js")).then((e=>e.replaceAll("__WORKSPACE_NAME__",a))))),p("build.js",await L(await N((0,n.join)(m,"build.js"))))]),f=(0,n.join)(le,".vscode"),b=await W(f),w=await Promise.all(b.map((async e=>{const a=(0,n.relative)(f,e),t=(0,n.join)(".vscode",a),r=await N(e);return await p(t,r)}))),h=await Promise.all([...t.filter((e=>e.type===d.WebApp)).filter((e=>e.authentication.enabled)).flatMap((e=>[p((0,n.join)("terraform",`dynamo_table_${D(e.appName)}_user.tf`),ye(se(a,e.appName))),p((0,n.join)("terraform",`dynamo_table_${D(e.appName)}_user_session.tf`),ye(ce(a,e.appName)))])),p((0,n.join)("terraform","base.tf"),ye(oe(a,s,o))),...s.map((async e=>{const t=ie(a,e);if(void 0===t)return;const r=`${e.projectName}_terraform`;return await p((0,n.join)("terraform",`${r}.tf`),ye(t))}))]);await async function(e,a){a.files.sort(((e,a)=>e.path.localeCompare(a.path))),await j((0,n.join)(e,".workspace"),await k(a))}(e,{files:Q([...c.flat(),...l,...h,...w]),fragments:t,version:z.project,options:o}),r("Running post install script");const g=[`cd ${e}`,"node setup.js","git init"];(0,u.execSync)(g.join(" && "),{stdio:["ignore","inherit","inherit"]}),r("Run the following to get started:"),r(`cd ${(0,n.relative)(process.cwd(),e)}; code app.code-workspace; yarn watch`)}async function ge(e,a,t,r){const o=r.split("\n"),i=function(e){const a="string"==typeof e?e:e.toString();return(0,P.createHash)("md5").update(a).digest("hex")}(o.filter((e=>!e.endsWith(" // @matthis/ignore"))).join("\n")),s=e?.files.find((e=>e.path===t))?.hash;if(i!==s){const e=o.map((e=>e.replaceAll(" // @matthis/ignore",""))).join("\n");await j((0,n.join)(a,t),e)}return{path:t,hash:i}}const ye=e=>e.endsWith("\n")?e:`${e}\n`;async function $e(){const{workspaceRegion:e}=await(0,l.prompt)({type:"text",name:"workspaceRegion",message:"AWS Region",initial:pe,validate:e=>e.length>0});return ee(e)}const Ae=/^[a-zA-Z0-9_]+$/u;async function ve(e,a,n){let t=a;if(n.includes(t)){let e=2;for(;n.includes(t);)t=`${a}_${e}`,e++}const{value:r}=await(0,l.prompt)({type:"text",name:"value",message:e,initial:t,validate:e=>e.length>0});if("string"!=typeof r)throw new Error(`${e} is required`);if(!Ae.test(r))throw new Error(`Invalid project name "${r}". Allowed characters are a-z, A-Z, 0-9 and _`);if(n.includes(r))throw new Error(`${r} is taken`);return r}async function Ne(e){if(!0!==(await(0,l.prompt)({type:"confirm",name:"value",message:"Add an alarm when an error is logged?",initial:e})).value)return;const a=await(0,l.prompt)({type:"text",name:"value",message:"Which email to send the alarm to?"});return"string"==typeof a.value?a.value:void 0}async function Se(){const e=await(0,l.prompt)({type:"text",name:"value",message:"Enter the email the alarm will be sent to (leave empty for no alarm)."});if("string"==typeof e.value)return e.value}async function Ee(){if(!0===(await(0,l.prompt)({type:"confirm",name:"value",message:"Use a custom domain?"})).value)return await je()}async function je(){const e=await(0,l.prompt)({type:"text",name:"value",message:"Enter the domain name (leave empty for no domain)."});if("string"==typeof e.value&&0!==e.value.length)return e.value}async function ke(){return{enabled:!0===(await(0,l.prompt)({type:"confirm",name:"value",message:"Use authentication?"})).value}}async function Ce(){const e=await(0,l.prompt)({type:"text",name:"value",message:"Enter the trigger period in minutes (leave empty for no trigger)",initial:1}),a=parseFloat(e.value);if(!(Number.isNaN(a)||a<=0))return a}const Le="i_am_done",We={[d.WebApp]:"Web App",[d.StaticWebsite]:"Static Website",[d.StandaloneLambda]:"Standalone Lambda",[d.ApiLambda]:"API Lambda",[d.NodeScript]:"Node Script"};async function Pe(e){const a=["terraform","shared","shared-web","shared-node",...e.flatMap((e=>we(e).map((e=>e.projectName))))],{workspaceFragmentType:n}=await(0,l.prompt)({type:"select",name:"workspaceFragmentType",message:"Choose a type of project to add to the workspace",choices:[...Object.entries(We).map((([e,a])=>({value:e,title:a}))),{title:"I'm done",value:Le}]});if(void 0===n||n===Le)return e;const t=n;if(t===d.StaticWebsite){const n=await ve("Website project name","website",a),r=await Ee();return[...e,{type:t,websiteName:n,domain:r}]}if(t===d.StandaloneLambda){const n=await ve("Lambda project name","lambda",a),r=await Ne(!0),o=await async function(){if(!0===(await(0,l.prompt)({type:"confirm",name:"value",message:"Add a Cloudwatch trigger?",initial:!0})).value)return await Ce()}();return[...e,{type:t,lambdaName:n,alarmEmail:r,cloudwatchTriggerMinutes:o}]}if(t===d.ApiLambda){const n=await ve("API name","api",a),r=await Ne(!1),o=await Ee();return[...e,{type:t,apiName:n,alarmEmail:r,domain:o}]}if(t===d.WebApp){const n=await ve("App name","app",a),r=await Ne(!1),o=await Ee(),i=await ke();return[...e,{type:t,appName:n,alarmEmail:r,domain:o,authentication:i}]}if(t===d.NodeScript){const n=await ve("Script project name","script",a);return[...e,{type:t,scriptName:n}]}Y(0,`Unknown WorkspaceFragmentType "${t}"`)}const Te="i_am_done";async function De(e){return e.type===d.Shared||e.type===d.SharedNode||e.type===d.SharedWeb?e:e.type===d.StaticWebsite?await async function(e){const{type:a,websiteName:n,domain:t}=e,{attribute:r}=await(0,l.prompt)({type:"select",name:"attribute",message:"What do you want to update?",choices:[{title:`Domain name: ${t??"<not set>"}`,value:"domain"},{title:"I'm done",value:Te}]});if(void 0===r||r===Te)return e;if("domain"===r){return{type:a,websiteName:n,domain:await je()}}return e}(e):e.type===d.StandaloneLambda?await async function(e){const{type:a,lambdaName:n,alarmEmail:t,cloudwatchTriggerMinutes:r}=e,{attribute:o}=await(0,l.prompt)({type:"select",name:"attribute",message:"What do you want to update?",choices:[{title:`Alarm email: ${t??"<not set>"}`,value:"alarmEmail"},{title:`Cloudwatch trigger (in min): ${r??"<not set>"}`,value:"cloudwatchTriggerMinutes"},{title:"I'm done",value:Te}]});if(void 0===o||o===Te)return e;if("alarmEmail"===o){return{type:a,lambdaName:n,alarmEmail:await Se(),cloudwatchTriggerMinutes:r}}if("cloudwatchTriggerMinutes"===o){return{type:a,lambdaName:n,alarmEmail:t,cloudwatchTriggerMinutes:await Ce()}}return e}(e):e.type===d.ApiLambda?await async function(e){const{type:a,apiName:n,alarmEmail:t,domain:r}=e,{attribute:o}=await(0,l.prompt)({type:"select",name:"attribute",message:"What do you want to update?",choices:[{title:`Domain name: ${r??"<not set>"}`,value:"domain"},{title:`Alarm email: ${t??"<not set>"}`,value:"alarmEmail"},{title:"I'm done",value:Te}]});if(void 0===o||o===Te)return e;if("domain"===o){return{type:a,apiName:n,alarmEmail:t,domain:await je()}}if("alarmEmail"===o){return{type:a,apiName:n,alarmEmail:await Se(),domain:r}}return e}(e):e.type===d.WebApp?await async function(e){const{type:a,appName:n,alarmEmail:t,authentication:r,domain:o}=e,{attribute:i}=await(0,l.prompt)({type:"select",name:"attribute",message:"What do you want to update?",choices:[{title:`Domain name: ${o??"<not set>"}`,value:"domain"},{title:`Alarm email: ${t??"<not set>"}`,value:"alarmEmail"},{title:"Authentication: "+(r.enabled?"yes":"no"),value:"authentication"},{title:"I'm done",value:Te}]});if(void 0===i||i===Te)return e;if("domain"===i){return{type:a,appName:n,alarmEmail:t,authentication:r,domain:await je()}}if("alarmEmail"===i){return{type:a,appName:n,alarmEmail:await Se(),authentication:r,domain:o}}if("authentication"===i){return{type:a,appName:n,alarmEmail:t,authentication:await ke(),domain:o}}return e}(e):e.type===d.NodeScript?await async function(e){const{attribute:a}=await(0,l.prompt)({type:"select",name:"attribute",message:"What do you want to update?",choices:[{title:"I'm done",value:Te}]});if(void 0===a||a===Te)return e;return e}(e):void Y()}function Oe(e){return e.type===d.Shared?"shared":e.type===d.SharedNode?"shared-node":e.type===d.SharedWeb?"shared-web":e.type===d.ApiLambda?`${e.apiName} (lambda api)`:e.type===d.NodeScript?`${e.scriptName} (node script)`:e.type===d.StandaloneLambda?`${e.lambdaName} (lambda function)`:e.type===d.StaticWebsite?`${e.websiteName} (static website)`:e.type===d.WebApp?`${e.appName} (web app)`:void Y()}const Ue="i_am_done";async function xe(e){const{action:a}=await(0,l.prompt)({type:"select",name:"action",message:"What do you want to do",choices:[{title:"Add a project",value:"add"},{title:"Update a project",value:"update"},{title:"I'm done",value:Ue}]});if(void 0===a||a===Ue)return e;if("add"===a){const a=await Pe(e);return await xe(a)}if("update"===a){const a=await async function(e){const{workspaceFragmentIndex:a}=await(0,l.prompt)({type:"select",name:"workspaceFragmentIndex",message:"Which project do you want to update",choices:[...e.map(((e,a)=>({value:a,title:Oe(e)}))),{title:"I'm done",value:Te}]});if(void 0===a||a===Te)return e;const n=a,t=e[n];if(!t)return e;let r=!0,o=t;for(;r;){const e=await De(o);r=e!==o,o=e}const i=[...e];return i[n]=o,i}(e);return await xe(a)}return e}function Ie(e){return e.filter((e=>![d.Shared,d.SharedNode,d.SharedWeb].includes(e.type)))}(async function(){let e,r,o=process.cwd(),i=[];const s=await de(o);for(void 0===s?(e=await async function(){const{workspaceName:e}=await(0,l.prompt)({type:"text",name:"workspaceName",message:"Workspace name",validate:e=>e.length>0});return ee(e)}(),o=(0,n.join)(o,e),r={region:await $e()},await(0,a.mkdir)(o)):(e=(0,n.basename)(o),r=s.options,i=Ie(s.fragments));;)try{i=await xe(i);break}catch(e){t(String(e))}const c=e;await he(o,c,function(e){const a=Ie(e);let n=!1,t=!1;for(const a of e)a.type===d.Shared||a.type===d.SharedNode||a.type===d.SharedWeb||(a.type===d.ApiLambda||a.type===d.NodeScript||a.type===d.StandaloneLambda?t=!0:a.type===d.WebApp?(t=!0,n=!0):a.type===d.StaticWebsite?n=!0:Y());a.push({type:d.Shared}),t&&a.push({type:d.SharedNode});n&&a.push({type:d.SharedWeb});return a}(i),r,s)})().catch(t);
//# sourceMappingURL=index.js.map