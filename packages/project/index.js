#!/usr/bin/env node --experimental-modules --no-warnings
import{createRequire as e}from"node:module";const n=e(import.meta.url)("node:fs/promises"),a=e(import.meta.url)("node:path"),t=console.error,o=console.log;let r=function(e){return e.Web="web",e.LambdaFunction="lambda_function",e.LambdaApi="lambda_api",e.LambdaWebApi="lambda_web_api",e.NodeScript="node_script",e.Shared="shared",e.SharedNode="shared-node",e.SharedWeb="shared-web",e}({}),i=function(e){return e.Web="web",e.Node="node",e.Lib="lib",e}({}),s=function(e){return e.Web="web",e.Node="node",e.Lib="lib",e}({}),c=function(e){return e.Web="web",e.Lib="lib",e.Lambda="lambda",e.NodeScript="node-script",e}({});const l={[r.Web]:{eslint:i.Web,tsconfig:s.Web,webpack:c.Web},[r.LambdaFunction]:{eslint:i.Node,tsconfig:s.Node,webpack:c.Lambda},[r.LambdaApi]:{eslint:i.Node,tsconfig:s.Node,webpack:c.Lambda},[r.LambdaWebApi]:{eslint:i.Node,tsconfig:s.Node,webpack:c.Lambda},[r.NodeScript]:{eslint:i.Node,tsconfig:s.Node,webpack:c.NodeScript},[r.Shared]:{eslint:i.Lib,tsconfig:s.Lib,webpack:c.Lib},[r.SharedNode]:{eslint:i.Node,tsconfig:s.Node,webpack:c.Lib},[r.SharedWeb]:{eslint:i.Web,tsconfig:s.Web,webpack:c.Lib}};let d=function(e){return e.StaticWebsite="static-website",e.StandaloneLambda="standalone-lambda",e.ApiLambda="api-lambda",e.WebApp="web-app",e.NodeScript="node-script",e.Shared="shared",e.SharedNode="shared-node",e.SharedWeb="shared-web",e}({});function m(e,n){return e.filter((e=>e.type===n))}const u=e(import.meta.url)("prompts"),p=e(import.meta.url)("node:child_process"),_=e(import.meta.url)("node:url"),f=e(import.meta.url)("node:fs"),b=e(import.meta.url)("prettier"),{access:h,readFile:w,readdir:g,stat:y}=f.promises,{writeFile:v,mkdir:$,rm:A}=f.promises;async function N(e){return(await w(e)).toString()}const S=e=>({parser:e,printWidth:100,singleQuote:!0,trailingComma:"es5",bracketSpacing:!1,arrowParens:"avoid",endOfLine:"auto"});async function E(e,n){return await(0,b.format)(e,S(n))}async function j(e,n){await $((0,a.dirname)(e),{recursive:!0}),await v(e,n)}async function k(e,n){const{compact:a}=n??{};return await(0,b.format)(a?JSON.stringify(e):JSON.stringify(e,void 0,2),S("json"))}async function W(e,n){const{compact:a}=n??{};return await(0,b.format)(a?JSON.stringify(e):JSON.stringify(e,void 0,2),S("jsonc"))}async function D(e){return await(0,b.format)(e,S("babel"))}async function L(e){const n=[],t=await g(e,{withFileTypes:!0}),o=[];for(const r of t){const t=(0,a.join)(e,r.name);r.isDirectory()?o.push(L(t).then((e=>{n.push(...e)}))):r.isFile()&&n.push(t)}return await Promise.all(o),n}const C=e(import.meta.url)("node:crypto");function O(e){return e.toLowerCase().split(/[^a-z]+/u).map((e=>function(e){const[n]=e;return void 0===n?"":n.toUpperCase()+e.slice(1)}(e))).join("")}function P(e){return e.toLowerCase().split(/[^a-z]+/u).join("_")}function T(e){const{webApps:n,apiLambdas:a}=e;return{path:"shared/src/api/api.ts",content:[[...n.map((e=>`import {${e.appName.toUpperCase()}_API} from '@shared/api/${e.appName}_api';`)),...a.map((e=>`import {${e.apiName.toUpperCase()}} from '@shared/api/${e.apiName}';`)),"import {AllApiSchema} from '@shared/api/core/api_schema';","import {ApiConfig, ApiName} from '@shared/api/core/api_types';",`import {${[...n.map((e=>`${e.appName.toUpperCase()}_BACKEND_URL`)),...a.map((e=>`${e.apiName.toUpperCase()}_URL`))].join(", ")}} from '@shared/env';`].join("\n"),`\n    export const ALL = {\n      ${[...n.map((e=>`${e.appName}_backend: ${e.appName.toUpperCase()}_API,`)),...a.map((e=>`${e.apiName}: ${e.apiName.toUpperCase()},`))].join("\n")}\n    } satisfies AllApiSchema;\n  `.trim(),`\n    export const API_CONFIGS = {\n      ${[...n.map((e=>`${e.appName}_backend: {host: ${e.appName.toUpperCase()}_BACKEND_URL},`)),...a.map((e=>`${e.apiName}: {host: ${e.apiName.toUpperCase()}_URL},`))].join("\n")}\n    } satisfies Record<ApiName, ApiConfig>;\n  `.trim()].join("\n\n")}}function I(e){return{path:"shared/src/models.ts",content:`\nimport {Brand} from '@shared/lib/type_utils';\n\n${e.map((e=>{const n=`${O(e.appName)}User`;return`\nexport type ${n}Id = Brand<'${n}Id', string>;\n\nexport interface ${n}Item {\nid: ${n}Id;\nhash: string;\nsalt: string;\nsessionDuration: number; // in seconds\n}\n`.trim()})).join("\n\n")}\n`}}const x="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";function U(e,n){let a="";const t=n??x,o=(0,C.randomBytes)(e);for(const e of o)a+=t[Math.floor(e/255*(t.length-1))];return a}const z=(0,a.join)((0,_.fileURLToPath)(import.meta.url),"../templates");async function R(e){const{dst:n,project:t,allFragments:o,workspace:i,workspaceName:s}=e,c=[],{projectName:l,type:u,vars:p}=t,_={__WORKSPACE_NAME__:s,__WORKSPACE_NAME_UPPERCASE__:(f=s,f.toUpperCase().split(/[^A-Z]+/u).join("_")),__COOKIE_ENCRYPTION_KEY__:U(32)};var f;const b=(0,a.join)(z,u),h=await L(b),w=[...await Promise.all(h.map((async e=>{const n=(0,a.relative)(b,e),t=(0,a.join)(l,n);let o=await N(e);if(e.endsWith("package.json")){const n=JSON.parse(await N(e));n.name=l,o=JSON.stringify(n,void 0,2)}for(const[e,n]of Object.entries({...p,..._}))o=o.replaceAll(e,n);return{path:t,content:o}})))];return u===r.Shared&&w.push(...function(e){const n=m(e,d.WebApp),a=m(e,d.ApiLambda),t=n.filter((e=>e.authentication.enabled));return[...fe(e)?[T({webApps:n,apiLambdas:a})]:[],...n.map((e=>{const n=`${O(e.appName)}User`;return{path:`shared/src/api/${e.appName}_api.ts`,content:e.authentication.enabled?`\nimport {Obj, SchemaToType, Str} from '@shared/api/core/api_schema';\nimport {${n}Id} from '@shared/models';\n\nconst Frontend${n}Schema = Obj({\n    id: Str<${n}Id>(),\n});\nexport type Frontend${n} = SchemaToType<typeof Frontend${n}Schema>;\n\nexport const ${e.appName.toUpperCase()}_API = {\n    '/login': {\n        POST: {\n            req: Obj({id: Str(), password: Str()}),\n            res: Frontend${n}Schema,\n        },\n    },\n    '/test': {\n        POST: {\n            req: Obj({query: Str()}),\n            res: Obj({data: Str()}),\n        },\n    },\n};\n      `:`\nimport {Obj, Str} from '@shared/api/core/api_schema';\n\nexport const ${e.appName.toUpperCase()}_API = {\n    '/test': {\n        POST: {\n            req: Obj({query: Str()}),\n            res: Obj({data: Str()}),\n        },\n    },\n};\n          `}})),...a.map((e=>({path:`shared/src/api/${e.apiName}.ts`,content:`\n  import {Unknown} from '@shared/api/core/api_schema';\n  \n  export const ${e.apiName.toUpperCase()} = {\n      '/test': {\n          GET: {\n              req: Unknown(),\n              res: Unknown(),\n          },\n      },\n  };\n        `}))),...0===t.length?[]:[I(t)]]}(o)),await Promise.all(w.map((async({path:e,content:a})=>{let r=a;const s=a.matchAll(/\/\/ @matthis\/skip-file:(?<flagName>[^:]+)(?<negate>:not)?:(?<flagValue>[^\s]*)/gu);for(const e of s){const{flagName:n,negate:a,flagValue:r}=e.groups??{};if(M({flagName:n,negate:a,flagValue:r},t,o))return}r=r.replaceAll(/ *\/\/ @matthis\/skip-file:[^:]+(?::not)?:[^\n]*\n/gu,"");const l=[],d=["include"];for(const e of r.split("\n")){if(e.includes("@matthis/end")){d.pop();continue}const n=/.*\/\/ @matthis\/start:(?<flagName>[^:]+)(?<negate>:not)?:(?<flagValue>[^\s]*).*/u.exec(e);if(n){const{flagName:e,negate:a,flagValue:r}=n.groups??{};d.push(M({flagName:e,negate:a,flagValue:r},t,o)?"include":"exclude")}else"include"===d.at(-1)&&l.push(e)}r=l.join("\n"),(e.endsWith(".ts")||e.endsWith(".tsx"))&&(r=await E(r,"typescript")),e.endsWith(".json")&&(r=await E(r,"json")),c.push(await ge(i,n,e,r))}))),c}function M(e,n,a){const{flagName:t,negate:o,flagValue:r}=e;if(void 0===t||void 0===r)return!1;const i=n.flags(a)[t]===r;return void 0!==o?!i:i}const F={project:"1.13.9",eslint:"1.8.5",prettier:"1.5.0",tsconfig:"1.7.4",webpack:"1.8.10",runner:"1.6.22",lambdaServerRuntime:"1.0.7"},H="5.5.x",V=">=20.10";function q(e){return[...new Set(e).values()]}function J(e,n){const a=q(n.map((e=>l[e.type].eslint))),t=q(n.map((e=>l[e.type].tsconfig))),o=q(n.map((e=>l[e.type].webpack)));return{name:e,license:"UNLICENSED",type:"module",engines:{node:V},scripts:{setup:"node ./setup.js",deploy:"node ./deploy.js",build:"node ./build.js",watch:"node ./build.js --watch"},prettier:"@matthis/prettier-config",devDependencies:Object.fromEntries([...a.map((e=>[`@matthis/eslint-config-${e}`,F.eslint])),["@matthis/prettier-config",F.prettier],...t.map((e=>[`@matthis/tsconfig-${e}`,F.tsconfig])),...o.map((e=>[`@matthis/webpack-${e}`,F.webpack])),["@matthis/webpack-runner",F.runner],["typescript",H]].sort(((e,n)=>e[0].localeCompare(n[0]))))}}function B(e){return void 0===e?"null":`"${e}"`}function Z(e,n){const{region:a,envs:t}=n;let o;const r=Object.keys(t);if(0===r.length){o={envs:{default:{isDefault:!0}},defaultEnvName:"default"}}else if(1===r.length){const e=r[0];o={envs:{[e]:{...t[e],isDefault:!0}},defaultEnvName:e}}else{const e=Object.entries(t).find((([e,n])=>n.isDefault))?.[0];if(void 0===e)throw new Error(`Encountered ${r.length} envs (${r.join(", ")}) but none is the default env`);o={envs:t,defaultEnvName:e}}return`\n\nlocals {\n  all_envs = {\n${Object.entries(o.envs).map((([e,n])=>`    ${e} = {account_id = ${B(n.accountId)}, hosted_zone = ${B(n.hostedZone)}}${n.isDefault?" # default":""}`)).join("\n")}\n  }\n}\n\nlocals {\n  current_env = lookup(local.all_envs, terraform.workspace, local.all_envs["${o.defaultEnvName}"])\n  current_env_name = "${o.defaultEnvName}"\n}\n\nterraform {\n  required_providers {\n    aws = {\n      source  = "hashicorp/aws"\n      version = "~> 5.0" # Use the latest 5.x versions\n    }\n  }\n}\n\nprovider "aws" {\n  region                   = "${a}"\n  allowed_account_ids      = local.current_env.account_id != null ? [local.current_env.account_id] : null\n  default_tags {\n    tags = {\n      Project = "${e}"\n    }\n  }\n}\n\nprovider "aws" {\n  alias                    = "us-east-1"\n  region                   = "us-east-1"\n  default_tags {\n    tags = {\n      Project = "${e}"\n    }\n  }\n}\n\noutput "current_env" {\n  value = data.aws_caller_identity.current.account_id\n}\n\ndata "aws_region" "current" {}\noutput "region" {\n  value = data.aws_region.current.id\n}\n\ndata "aws_caller_identity" "current" {}\noutput "account_id" {\n  value = data.aws_caller_identity.current.account_id\n}\n\ndata "aws_route53_zone" "main" {\n  name = local.current_env.hosted_zone\n}\n\n`.trim()}function G(e,n){const a=`\nresource "aws_s3_bucket" "code" {\n  bucket_prefix = "${e.toLowerCase().replace(/[^a-z0-9.-]+/gu,"-")}-code-"\n}\n\noutput "code_bucket" {\n  value = aws_s3_bucket.code.id\n}\n`.trim(),t=`\ndata "aws_iam_policy_document" "cloudfront_access_to_code_policy" {\n  ${n.map((e=>`\n  statement {\n    actions = ["s3:GetObject"]\n    resources = [\n      "\${aws_s3_bucket.code.arn}/${e}/*",\n    ]\n    principals {\n      type        = "AWS"\n      identifiers = [aws_cloudfront_origin_access_identity.${e}.iam_arn]\n    }\n  }\n`.trim())).join("\n\n")}\n}\n\nresource "aws_s3_bucket_policy" "cloudfront_access_to_code" {\n  bucket = aws_s3_bucket.code.id\n  policy = data.aws_iam_policy_document.cloudfront_access_to_code_policy.json\n}\n`.trim(),o=[a];return n.length>0&&o.push(t),o.join("\n\n")}function K(e){return void 0!==e}function Q(e){return e.filter(K)}function Y(e,n){throw new Error(n)}function X(e,n){return"object"!=typeof e||null===e||Array.isArray(e)?n:e}function ee(e,n){return"string"==typeof e?e:n}function ne(e){const n=ee(e);if(void 0===n)throw new Error(`Invalid value: \`${e}\` is not a string`);return n}function ae(e,n){return Array.isArray(e)?e:n}function te(e,n){const a=ae(e);return void 0===a?n:Q(a.map((e=>X(e))))}function oe(e,n){if("number"==typeof e)return isNaN(e)?n:e;if("string"==typeof e)try{const a=parseFloat(e);return isNaN(a)?n:a}catch{return n}return n}function re(e,n){return"boolean"==typeof e?e:"number"==typeof e?!isNaN(e)&&0!==e:"string"==typeof e?"0"!==e&&"false"!==e&&("1"===e||"true"===e||n):n}function ie(e,n,a){return[Z(e,a),G(e,n.filter((e=>e.type===r.Web)).map((e=>e.projectName)))].join("\n\n")}function se(e,n){const{projectName:a,terraform:t}=n;return"frontend"===t.type?function(e,n){const{subDomain:a}=n,t=`${e.toLowerCase().replace(/[^\d.a-z-]+/gu,"-")}-origin-id`;return`\noutput "${e}_cloudfront_domain_name" {\n  value       = "${a}\${local.current_env.hosted_zone}"\n  description = "Domain where the \\"${e}\\" is available."\n}\n\n# Domain\n\nresource "aws_route53_record" "${e}_a" {\n  zone_id = data.aws_route53_zone.main.zone_id\n  name    = "${a}\${local.current_env.hosted_zone}"\n  type    = "A"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${e}.domain_name\n    zone_id                = aws_cloudfront_distribution.${e}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource "aws_route53_record" "${e}_aaaa" {\n  zone_id = data.aws_route53_zone.main.zone_id\n  name    = "${a}\${local.current_env.hosted_zone}"\n  type    = "AAAA"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${e}.domain_name\n    zone_id                = aws_cloudfront_distribution.${e}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource "aws_acm_certificate" "${e}" {\n  domain_name               = "*.${a}\${local.current_env.hosted_zone}"\n  subject_alternative_names = ["${a}\${local.current_env.hosted_zone}"]\n  validation_method         = "DNS"\n  provider                  = aws.us-east-1\n}\n\nresource "aws_route53_record" "${e}_certificate_validation" {\n  for_each = {\n    for dvo in aws_acm_certificate.${e}.domain_validation_options : dvo.domain_name => {\n      name   = dvo.resource_record_name\n      record = dvo.resource_record_value\n      type   = dvo.resource_record_type\n    }\n  }\n  provider        = aws.us-east-1\n  allow_overwrite = true\n  name            = each.value.name\n  records         = [each.value.record]\n  ttl             = 60\n  type            = each.value.type\n  zone_id         = data.aws_route53_zone.main.zone_id\n}\n\nresource "aws_acm_certificate_validation" "${e}" {\n  provider                = aws.us-east-1\n  certificate_arn         = aws_acm_certificate.${e}.arn\n  validation_record_fqdns = [for record in aws_route53_record.${e}_certificate_validation : record.fqdn]\n}\n    \n# Cloudfront Distribution\n\nresource "aws_cloudfront_origin_access_identity" "${e}" {}\n  \nresource "aws_cloudfront_distribution" "${e}" {\n  origin {\n    domain_name = aws_s3_bucket.code.bucket_regional_domain_name\n    origin_id   = "${t}"\n    origin_path = "/${e}"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.${e}.cloudfront_access_identity_path\n    }\n  }\n  \n  enabled             = true\n  wait_for_deployment = false\n  is_ipv6_enabled     = true\n  price_class         = "PriceClass_100"\n  aliases             = ["${a}\${local.current_env.hosted_zone}"]\n  \n  default_root_object = "/index.html"\n  custom_error_response {\n    error_code         = 400\n    response_code      = 200\n    response_page_path = "/index.html"\n  }\n  custom_error_response {\n    error_code         = 403\n    response_code      = 200\n    response_page_path = "/index.html"\n  }\n  custom_error_response {\n    error_code         = 404\n    response_code      = 200\n    response_page_path = "/index.html"\n  }\n\n  default_cache_behavior {\n    allowed_methods        = ["HEAD", "GET"]\n    cached_methods         = ["HEAD", "GET"]\n    compress               = true\n    target_origin_id       = "${t}"\n    viewer_protocol_policy = "redirect-to-https"\n    \n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = "none"\n      }\n    }\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = "none"\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate.${e}.arn\n    ssl_support_method       = "sni-only"\n    minimum_protocol_version = "TLSv1.2_2021"\n  }\n}\n  `.trim()}(a,t):"lambda"===t.type?function(e,n,a){const{api:t,webAppName:o,alarmEmail:r,cloudwatchTriggerMinutes:i,subDomain:s,authentication:c}=a;return`\n# Define any extra role for the lambda here\ndata "aws_iam_policy_document" "${n}_extra_policy" {\n  ${c?.enabled?`statement {\n    actions = [\n      "dynamodb:GetItem",\n      "dynamodb:BatchGetItem",\n      "dynamodb:Query",\n      "dynamodb:Scan",\n      "dynamodb:PutItem",\n      "dynamodb:UpdateItem",\n      "dynamodb:DeleteItem",\n    ]\n    resources = [${void 0===o?"":`\n      "\${aws_dynamodb_table.${P(o)}_user_table.arn}",\n      "\${aws_dynamodb_table.${P(o)}_user_table.arn}/index/*",\n      "\${aws_dynamodb_table.${P(o)}_user_session_table.arn}",\n      "\${aws_dynamodb_table.${P(o)}_user_session_table.arn}/index/*",\n    `}]\n  }`:""}${void 0!==o?'\n\n  statement {\n    actions = [\n      "s3:GetObject",\n      "s3:GetObjectTagging"\n    ]\n    resources = [\n      "${aws_s3_bucket.code.arn}/*"\n    ]\n  }':""}\n}\n\nresource "aws_lambda_function" "${n}" {\n  function_name = "${e}-${n}"\n  s3_bucket     = aws_s3_object.${n}_archive.bucket\n  s3_key        = aws_s3_object.${n}_archive.key\n  handler       = "index.handler"\n  runtime       = "nodejs20.x"\n  role          = aws_iam_role.${n}_role.arn\n  timeout       = 900 // 15 minutes\n  memory_size   = 128 // Mo\n  environment {\n    variables = {${t?`\n      NODE_OPTIONS            = "--enable-source-maps"\n      CLOUDFRONT_HEADER_NAME  = random_string.${n}_cloudfront_header_name.result\n      CLOUDFRONT_HEADER_VALUE = random_string.${n}_cloudfront_header_value.result`:'\n      NODE_OPTIONS = "--enable-source-maps"'}\n    }\n  }\n}\n\noutput "${n}_function_name" {\n  value       = aws_lambda_function.${n}.function_name\n  description = "Function name of the \\"${e}-${n}\\" lambda"\n}\n${t&&void 0!==s?`\n# Lambda URL\n\nresource "aws_lambda_function_url" "${n}" {\n  function_name      = aws_lambda_function.${n}.function_name\n  authorization_type = "NONE"\n}\n\noutput "${n}_url" {\n  value       = "https://${s}\${local.current_env.hosted_zone}/"\n  description = "URL of \\"${n}\\""\n}\n\n# Domain\n\nresource "aws_route53_record" "${n}_a" {\n  zone_id = data.aws_route53_zone.main.zone_id\n  name    = "${s}\${local.current_env.hosted_zone}"\n  type    = "A"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${n}.domain_name\n    zone_id                = aws_cloudfront_distribution.${n}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource "aws_route53_record" "${n}_aaaa" {\n  zone_id = data.aws_route53_zone.main.zone_id\n  name    = "${s}\${local.current_env.hosted_zone}"\n  type    = "AAAA"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${n}.domain_name\n    zone_id                = aws_cloudfront_distribution.${n}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource "aws_acm_certificate" "${n}" {\n  domain_name               = "*.${s}\${local.current_env.hosted_zone}"\n  subject_alternative_names = ["${s}\${local.current_env.hosted_zone}"]\n  validation_method         = "DNS"\n  provider                  = aws.us-east-1\n}\n\nresource "aws_route53_record" "${n}_certificate_validation" {\n  for_each = {\n    for dvo in aws_acm_certificate.${n}.domain_validation_options : dvo.domain_name => {\n      name   = dvo.resource_record_name\n      record = dvo.resource_record_value\n      type   = dvo.resource_record_type\n    }\n  }\n  provider        = aws.us-east-1\n  allow_overwrite = true\n  name            = each.value.name\n  records         = [each.value.record]\n  ttl             = 60\n  type            = each.value.type\n  zone_id         = data.aws_route53_zone.main.zone_id\n}\n\nresource "aws_acm_certificate_validation" "${n}" {\n  provider                = aws.us-east-1\n  certificate_arn         = aws_acm_certificate.${n}.arn\n  validation_record_fqdns = [for record in aws_route53_record.${n}_certificate_validation : record.fqdn]\n}`:""}\n\n# Cloudfront Distribution\n\nresource "random_string" "${n}_cloudfront_header_name" {\n  length  = 16\n  upper   = false\n  numeric = false\n  special = false\n}\n\nresource "random_string" "${n}_cloudfront_header_value" {\n  length  = 32\n  special = false\n}\n\nresource "aws_cloudfront_distribution" "${n}" {\n  origin {\n    # Remove "https://" prefix and "/" suffix\n    domain_name = replace(replace(aws_lambda_function_url.${n}.function_url, "https://", ""), "/", "")\n    origin_id   = aws_lambda_function.${n}.function_name\n\n    custom_origin_config {\n      https_port             = 443\n      http_port              = 80\n      origin_protocol_policy = "https-only"\n      origin_ssl_protocols   = ["TLSv1.2"]\n    }\n\n    custom_header {\n      name  = random_string.${n}_cloudfront_header_name.result\n      value = random_string.${n}_cloudfront_header_value.result\n    }\n  }\n\n  enabled             = true\n  wait_for_deployment = false\n  is_ipv6_enabled     = true\n  price_class         = "PriceClass_100"\n  aliases             = ["${s}\${local.current_env.hosted_zone}"]\n\n  default_cache_behavior {\n    allowed_methods        = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]\n    cached_methods         = ["HEAD", "GET"]\n    compress               = true\n    target_origin_id       = aws_lambda_function.${n}.function_name\n    viewer_protocol_policy = "redirect-to-https"\n    # Managed-CachingDisabled\n    cache_policy_id = "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"\n    # Managed-AllViewerExceptHostHeader\n    origin_request_policy_id = "b689b0a8-53d0-40ab-baf2-68738e2966ac"\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = "none"\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate.${n}.arn\n    ssl_support_method       = "sni-only"\n    minimum_protocol_version = "TLSv1.2_2021"\n  }\n}\n${void 0!==i?`# Cloudwatch trigger\n\nresource "aws_lambda_permission" "cloudwatch_invoke_${n}" {\n  statement_id  = "AllowExecutionFromCloudWatch"\n  action        = "lambda:InvokeFunction"\n  function_name = aws_lambda_function.${n}.arn\n  principal     = "events.amazonaws.com"\n  source_arn    = aws_cloudwatch_event_rule.${n}_trigger_rate.arn\n}\n\nresource "aws_cloudwatch_event_rule" "${n}_trigger_rate" {\n  name_prefix         = "${n}.rate-${i}-minutes."\n  schedule_expression = "rate(${i} minute${i>1?"s":""})"\n}\n\nresource "aws_cloudwatch_event_target" "${n}_trigger_target" {\n  rule = aws_cloudwatch_event_rule.${n}_trigger_rate.name\n  arn  = aws_lambda_function.${n}.arn\n}\n`:""}\n# IAM role\n\nresource "aws_iam_role" "${n}_role" {\n  name = "${e}-${n}-role"\n  assume_role_policy = jsonencode({\n    Version = "2012-10-17"\n    Statement = [\n      {\n        Action = "sts:AssumeRole"\n        Principal = {\n          Service = "lambda.amazonaws.com"\n        }\n        Effect = "Allow"\n      },\n    ]\n  })\n  \n  inline_policy {\n    name   = "${e}-${n}-extra-policy"\n    policy = data.aws_iam_policy_document.${n}_extra_policy.json\n  }\n}\n\noutput "${n}_role_arn" {\n  value = aws_iam_role.${n}_role.arn\n}\n\n# Cloudwatch logging\n\nresource "aws_cloudwatch_log_group" "${n}" {\n  name = "/aws/lambda/${e}-${n}"\n}\n\nresource "aws_iam_policy" "${n}_cloudwatch" {\n  name = "${e}-${n}-cloudwatch-policy"\n  policy = jsonencode({\n    Version = "2012-10-17"\n    Statement = [\n      {\n        Action = [\n          "logs:CreateLogStream",\n          "logs:PutLogEvents",\n        ]\n        Effect = "Allow"\n        Resource = [\n          "\${aws_cloudwatch_log_group.${n}.arn}",\n          "\${aws_cloudwatch_log_group.${n}.arn}:*",\n        ]\n      }\n    ]\n  })\n}\n\nresource "aws_iam_role_policy_attachment" "${n}_cloudwatch" {\n  role       = aws_iam_role.${n}_role.name\n  policy_arn = aws_iam_policy.${n}_cloudwatch.arn\n}\n${void 0!==r?`\n# Cloudwatch error monitoring\n\nresource "aws_cloudwatch_log_metric_filter" "${n}_log_errors" {\n  name           = "${e}-${n}-log-error-metric-filter"\n  pattern        = "[ts, id, level = \\"ERROR\\", msg]"\n  log_group_name = aws_cloudwatch_log_group.${n}.name\n\n  metric_transformation {\n    name          = "${e}-${n}-errors"\n    namespace     = "${e}"\n    value         = "1"\n    default_value = "0"\n    unit          = "Count"\n  }\n}\n\nresource "aws_cloudwatch_metric_alarm" "${n}_log_errors" {\n  alarm_name          = "${e}-${n}-log-error-metric-alarm"\n  metric_name         = aws_cloudwatch_log_metric_filter.${n}_log_errors.metric_transformation[0].name\n  namespace           = aws_cloudwatch_log_metric_filter.${n}_log_errors.metric_transformation[0].namespace\n  evaluation_periods  = 1\n  period              = 3600\n  statistic           = "Sum"\n  comparison_operator = "GreaterThanOrEqualToThreshold"\n  threshold           = 1\n  actions_enabled     = true\n  alarm_actions       = [aws_sns_topic.${n}_log_errors.arn]\n  ok_actions          = [aws_sns_topic.${n}_log_errors.arn]\n  treat_missing_data  = "notBreaching"\n}\n\nresource "aws_sns_topic" "${n}_log_errors" {\n  name = "${e}-${n}-log-error-sns-topic"\n}\n\nresource "aws_sns_topic_subscription" "${n}_log_errors" {\n  endpoint  = "${r}"\n  protocol  = "email"\n  topic_arn = aws_sns_topic.${n}_log_errors.arn\n}\n`:""}\n# Dummy source code useful only during the initial setup\nresource "aws_s3_object" "${n}_archive" {\n  bucket         = aws_s3_bucket.code.id\n  key            = "${n}/dist.zip"\n  content_base64 = "UEsDBBQACAAIAGaKwlYAAAAAAAAAADYAAAAIACAAaW5kZXguanNVVA0AB3AIemRyCHpkcAh6ZHV4CwABBPUBAAAEFAAAAEutKMgvKinWy0jMS8lJLVKwVUgsrsxLVkgrzUsuyczPU9DQVKjmUlAoSi0pLcpTUFe35qq15gIAUEsHCP0ak1o4AAAANgAAAFBLAQIUAxQACAAIAGaKwlb9GpNaOAAAADYAAAAIACAAAAAAAAAAAACkgQAAAABpbmRleC5qc1VUDQAHcAh6ZHIIemRwCHpkdXgLAAEE9QEAAAQUAAAAUEsFBgAAAAABAAEAVgAAAI4AAAAAAA=="\n}\n\n`.trim()}(e,a,t):void("no-terraform"!==t.type&&Y(0,"Terraform type"))}function ce(e,n){const a=P(n);return`\noutput "${a}_user_table_name" {\n  value = aws_dynamodb_table.${a}_user_table.name\n}\n\noutput "${a}_user_index_name" {\n  value = {\n    for obj in aws_dynamodb_table.${a}_user_table.global_secondary_index : "${a}_user_by_\${obj.hash_key}\${length(obj.range_key) > 0 ? "_sorted_by_\${obj.range_key}" : ""}" => obj.name\n  }\n}\n\nresource "aws_dynamodb_table" "${a}_user_table" {\n  name         = "${`${O(e)}${O(n)}`}User"\n  billing_mode = "PAY_PER_REQUEST"\n  hash_key     = "id"\n\n  attribute {\n    name = "id"\n    type = "S"\n  }\n}`.trim()}function le(e,n){const a=P(n);return`output "${a}_user_session_table_name" {\n  value = aws_dynamodb_table.${a}_user_session_table.name\n}\n\noutput "${a}_user_session_index_name" {\n  value = {\n    for obj in aws_dynamodb_table.${a}_user_session_table.global_secondary_index : "${a}_user_session_by_\${obj.hash_key}\${ length(obj.range_key) > 0 ? "_sorted_by_\${obj.range_key}" : "" }" => obj.name\n  }\n}\n\nresource "aws_dynamodb_table" "${a}_user_session_table" {\n  name         = "${`${O(e)}${O(n)}`}UserSession"\n  billing_mode = "PAY_PER_REQUEST"\n  hash_key     = "token"\n\n  attribute {\n    name = "token"\n    type = "S"\n  }\n\n  ttl {\n    attribute_name = "expiresAt"\n    enabled        = true\n  }\n}`.trim()}function de(e,n){const a=n.flatMap((e=>he(e))).map((e=>e.projectName));return{folders:[...a.map((e=>({path:e}))),{path:"terraform"},{path:".",name:"root"}],settings:{"window.title":`${e}\${separator}\${activeEditorShort}`,"files.exclude":Object.fromEntries([...a.map((e=>[e,!0])),["terraform",!0]]),"editor.acceptSuggestionOnCommitCharacter":!1,"editor.suggestSelection":"first","vsintellicode.modify.editor.suggestSelection":"automaticallyOverrodeDefaultValue","explorer.confirmDelete":!1,"git.autofetch":!0,"git.confirmSync":!1,"typescript.preferences.importModuleSpecifier":"non-relative","eslint.lintTask.enable":!0,"eslint.useESLintClass":!0,"editor.formatOnSave":!0,"editor.codeActionsOnSave":{"source.fixAll":"never","source.fixAll.eslint":"explicit"},"editor.defaultFormatter":"esbenp.prettier-vscode","editor.linkedEditing":!0,"emmet.showExpandedAbbreviation":"never","files.associations":{"*.tf":"terraform"},"[typescript]":{"editor.defaultFormatter":"esbenp.prettier-vscode"},"[typescriptreact]":{"editor.defaultFormatter":"esbenp.prettier-vscode"},"[terraform]":{"editor.defaultFormatter":"hashicorp.terraform"}},extensions:{recommendations:["dbaeumer.vscode-eslint","esbenp.prettier-vscode","VisualStudioExptTeam.vscodeintellicode","styled-components.vscode-styled-components","naumovs.color-highlight","eamodio.gitlens","hashicorp.terraform"]}}}async function me(e){const n=await async function(e){try{return(await N(e)).toString()}catch{return}}((0,a.join)(e,".workspace"));if(void 0===n)return;const t=X(JSON.parse(n),{}),o=Q(te(t.fragments,[]).map((e=>{const n=ee(e.type);if(void 0!==n){if(n===d.Shared){return{type:d.Shared}}if(n===d.SharedWeb){return{type:d.SharedWeb}}if(n===d.SharedNode){return{type:d.SharedNode}}if(n===d.WebApp){const n=ee(e.alarmEmail),a=ne(e.appName),t=re(X(e.authentication,{}).enabled,!1),o=ne(e.subDomain);return{type:d.WebApp,alarmEmail:n,appName:a,authentication:{enabled:t},subDomain:o}}if(n===d.StaticWebsite){const n=ne(e.websiteName),a=ne(e.subDomain);return{type:d.StaticWebsite,websiteName:n,subDomain:a}}if(n===d.ApiLambda){const n=ee(e.alarmEmail),a=ne(e.apiName),t=ne(e.subDomain);return{type:d.ApiLambda,alarmEmail:n,apiName:a,subDomain:t}}if(n===d.NodeScript){const n=ne(e.scriptName);return{type:d.NodeScript,scriptName:n}}if(n===d.StandaloneLambda){const n=ne(e.lambdaName),a=ee(e.alarmEmail),t=oe(e.cloudwatchTriggerMinutes);return{type:d.StandaloneLambda,lambdaName:n,alarmEmail:a,cloudwatchTriggerMinutes:t}}}}))),r=ne(t.version),i=Q(te(t.files,[]).map((e=>{const n=ee(e.path),a=ee(e.hash);if(void 0!==n&&void 0!==a)return{path:n,hash:a}}))),s=X(t.options,{});return{fragments:o,version:r,files:i,options:{region:ee(s.region,ue),envs:Object.fromEntries(Object.entries(X(s.envs,{})).map((([e,n])=>{const a=X(n,{});return[e,{accountId:ee(a.accountId),hostedZone:ee(a.hostedZone)}]})))}}}const ue="eu-west-3",pe=(0,a.join)((0,_.fileURLToPath)(import.meta.url),"../templates"),_e=e=>e?"true":"false";function fe(e){return void 0!==e.find((e=>e.type===d.ApiLambda||e.type===d.WebApp))}function be(e){return n=>({...{HAS_API:_e(fe(n))},...e})}function he(e){if(e.type===d.StaticWebsite)return[{projectName:e.websiteName,type:r.Web,fromFragment:e,vars:{__PROJECT_NAME__:e.websiteName,__APP_NAME__:e.websiteName},flags:be({}),terraform:{type:"frontend",subDomain:e.subDomain}}];if(e.type===d.StandaloneLambda)return[{projectName:e.lambdaName,type:r.LambdaFunction,fromFragment:e,vars:{__PROJECT_NAME__:e.lambdaName,__PROJECT_NAME_UPPERCASE__:e.lambdaName.toUpperCase()},flags:be({}),terraform:{type:"lambda",api:!1,webAppName:void 0,alarmEmail:e.alarmEmail,cloudwatchTriggerMinutes:e.cloudwatchTriggerMinutes,subDomain:void 0,authentication:void 0}}];if(e.type===d.ApiLambda)return[{projectName:e.apiName,type:r.LambdaApi,fromFragment:e,vars:{__PROJECT_NAME__:e.apiName,__PROJECT_NAME_UPPERCASE__:e.apiName.toUpperCase()},flags:be({}),terraform:{type:"lambda",api:!0,webAppName:void 0,alarmEmail:e.alarmEmail,cloudwatchTriggerMinutes:void 0,subDomain:e.subDomain,authentication:void 0}}];if(e.type===d.WebApp){const n=`${e.appName}_backend`,a=`${e.appName}_frontend`,t={__APP_NAME__:e.appName,__APP_NAME_UPPERCASE__:e.appName.toUpperCase(),__APP_NAME_PASCALCASE__:O(e.appName)},o=be({AUTHENTICATION:_e(e.authentication.enabled)});return[{projectName:a,type:r.Web,fromFragment:e,vars:t,flags:o,terraform:{type:"frontend",subDomain:`static.${e.subDomain}`}},{projectName:n,type:r.LambdaWebApi,fromFragment:e,vars:t,flags:o,terraform:{type:"lambda",api:!0,webAppName:e.appName,alarmEmail:e.alarmEmail,cloudwatchTriggerMinutes:void 0,subDomain:e.subDomain,authentication:e.authentication}}]}if(e.type===d.NodeScript)return[{projectName:e.scriptName,type:r.NodeScript,fromFragment:e,vars:{__PROJECT_NAME__:e.scriptName},flags:be({}),terraform:{type:"no-terraform"}}];if(e.type===d.SharedNode){const n="shared-node";return[{projectName:n,type:r.SharedNode,fromFragment:e,vars:{__PROJECT_NAME__:n},flags:be({}),terraform:{type:"no-terraform"}}]}if(e.type===d.SharedWeb){const n="shared-web";return[{projectName:n,type:r.SharedWeb,fromFragment:e,vars:{__PROJECT_NAME__:n},flags:be({}),terraform:{type:"no-terraform"}}]}if(e.type===d.Shared){const n="shared";return[{projectName:n,type:r.Shared,fromFragment:e,vars:{__PROJECT_NAME__:n},flags:be({}),terraform:{type:"no-terraform"}}]}Y(0,`Unknown ProjectType ${e.type}`)}async function we(e,n,t,r,i){const s=t.flatMap((e=>he(e))),c=await Promise.all(s.map((async a=>await R({dst:e,project:a,allFragments:t,workspace:i,workspaceName:n})))),l=(0,a.join)((0,_.fileURLToPath)(import.meta.url),"../scripts"),m=async(n,a)=>await ge(i,e,n,a),u=await Promise.all([m("package.json",await k(J(n,s))),m("app.code-workspace",await W(de(n,t))),m(".gitignore","\n.DS_Store\nnode_modules\nbuild\ndist\ntmp\nyarn-error.log\n.yarn-warnings.log\nyarn.lock\nterraform/.terraform\nterraform/.terraform*\nterraform/*.tfstate.backup\nterraform/archives\n*/log\n/shared/src/env.ts\n/.build.lock\n    ".trim()),m("setup.js",await D(await N((0,a.join)(l,"setup.js")))),m("deploy.js",await D(await N((0,a.join)(l,"deploy.js")).then((e=>e.replaceAll("__WORKSPACE_NAME__",n))))),m("build.js",await D(await N((0,a.join)(l,"build.js"))))]),f=(0,a.join)(pe,".vscode"),b=await L(f),h=await Promise.all(b.map((async e=>{const n=(0,a.relative)(f,e),t=(0,a.join)(".vscode",n),o=await N(e);return await m(t,o)}))),w=await Promise.all([...t.filter((e=>e.type===d.WebApp)).filter((e=>e.authentication.enabled)).flatMap((e=>[m((0,a.join)("terraform",`dynamo_table_${P(e.appName)}_user.tf`),ye(ce(n,e.appName))),m((0,a.join)("terraform",`dynamo_table_${P(e.appName)}_user_session.tf`),ye(le(n,e.appName)))])),m((0,a.join)("terraform","base.tf"),ye(ie(n,s,r))),...s.map((async e=>{const t=se(n,e);if(void 0===t)return;const o=`${e.projectName}_terraform`;return await m((0,a.join)("terraform",`${o}.tf`),ye(t))}))]);await async function(e,n){n.files.sort(((e,n)=>e.path.localeCompare(n.path))),await j((0,a.join)(e,".workspace"),await k(n))}(e,{files:Q([...c.flat(),...u,...w,...h]),fragments:t,version:F.project,options:r}),o("Running post install script");const g=[`cd ${e}`,"node setup.js","git init"];(0,p.execSync)(g.join(" && "),{stdio:["ignore","inherit","inherit"]})}async function ge(e,n,t,o){const r=o.split("\n"),i=function(e){const n="string"==typeof e?e:e.toString();return(0,C.createHash)("md5").update(n).digest("hex")}(r.filter((e=>!e.endsWith(" // @matthis/ignore"))).join("\n")),s=e?.files.find((e=>e.path===t))?.hash;if(i!==s){const e=r.map((e=>e.replaceAll(" // @matthis/ignore",""))).join("\n");await j((0,a.join)(n,t),e)}return{path:t,hash:i}}const ye=e=>e.endsWith("\n")?e:`${e}\n`;async function ve(){const{workspaceRegion:e}=await(0,u.prompt)({type:"text",name:"workspaceRegion",message:"AWS Region",initial:ue,validate:e=>e.length>0});return ne(e)}const $e=/^[a-zA-Z0-9_]+$/u;async function Ae(e,n,a){let t=n;if(a.includes(t)){let e=2;for(;a.includes(t);)t=`${n}_${e}`,e++}const{value:o}=await(0,u.prompt)({type:"text",name:"value",message:e,initial:t,validate:e=>e.length>0});if("string"!=typeof o)throw new Error(`${e} is required`);if(!$e.test(o))throw new Error(`Invalid project name "${o}". Allowed characters are a-z, A-Z, 0-9 and _`);if(a.includes(o))throw new Error(`${o} is taken`);return o}async function Ne(e){if(!0!==(await(0,u.prompt)({type:"confirm",name:"value",message:"Add an alarm when an error is logged?",initial:e})).value)return;const n=await(0,u.prompt)({type:"text",name:"value",message:"Which email to send the alarm to?"});return"string"==typeof n.value?n.value:void 0}async function Se(){const e=await(0,u.prompt)({type:"text",name:"value",message:"Enter the email the alarm will be sent to (leave empty for no alarm)."});if("string"==typeof e.value)return e.value}async function Ee(){const e=(await(0,u.prompt)({type:"text",name:"value",message:"Subdomain (leave empty for root domain)."})).value;if("string"!=typeof e)throw new Error("Subdomain is mandatory");return 0===e.length||e.endsWith(".")?e:`${e}.`}async function je(){return{enabled:!0===(await(0,u.prompt)({type:"confirm",name:"value",message:"Use authentication?"})).value}}async function ke(){const e=await(0,u.prompt)({type:"text",name:"value",message:"Enter the trigger period in minutes (leave empty for no trigger)",initial:1}),n=parseFloat(e.value);if(!(Number.isNaN(n)||n<=0))return n}async function We(){const e=await(0,u.prompt)({type:"text",name:"value",message:"Enter terraform env name"});if("string"==typeof e.value&&0!==e.value.length)return e.value}async function De(){const e=await(0,u.prompt)({type:"text",name:"value",message:"Enter AWS account ID"});if("string"==typeof e.value&&0!==e.value.length)return e.value}async function Le(){return!0===(await(0,u.prompt)({type:"confirm",name:"value",message:"Is it the default env?",initial:!0})).value}async function Ce(){const e=(await(0,u.prompt)({type:"text",name:"value",message:"Hosted zone"})).value;if("string"!=typeof e||0===e.length)throw new Error("Hosted zone is mandatory");return e}const Oe="i_am_done",Pe={[d.WebApp]:"Web App",[d.StaticWebsite]:"Static Website",[d.StandaloneLambda]:"Standalone Lambda",[d.ApiLambda]:"API Lambda",[d.NodeScript]:"Node Script"};async function Te(e){const n=["terraform","shared","shared-web","shared-node",...e.flatMap((e=>he(e).map((e=>e.projectName))))],{workspaceFragmentType:a}=await(0,u.prompt)({type:"select",name:"workspaceFragmentType",message:"Choose a type of project to add to the workspace",choices:[...Object.entries(Pe).map((([e,n])=>({value:e,title:n}))),{title:"I'm done",value:Oe}]});if(void 0===a||a===Oe)return e;const t=a;if(t===d.StaticWebsite){const a=await Ae("Website project name","website",n),o=await Ee();return[...e,{type:t,websiteName:a,subDomain:o}]}if(t===d.StandaloneLambda){const a=await Ae("Lambda project name","lambda",n),o=await Ne(!0),r=await async function(){if(!0===(await(0,u.prompt)({type:"confirm",name:"value",message:"Add a Cloudwatch trigger?",initial:!0})).value)return await ke()}();return[...e,{type:t,lambdaName:a,alarmEmail:o,cloudwatchTriggerMinutes:r}]}if(t===d.ApiLambda){const a=await Ae("API name","api",n),o=await Ne(!1),r=await Ee();return[...e,{type:t,apiName:a,alarmEmail:o,subDomain:r}]}if(t===d.WebApp){const a=await Ae("App name","app",n),o=await Ne(!1),r=await Ee(),i=await je();return[...e,{type:t,appName:a,alarmEmail:o,subDomain:r,authentication:i}]}if(t===d.NodeScript){const a=await Ae("Script project name","script",n);return[...e,{type:t,scriptName:a}]}Y(0,`Unknown WorkspaceFragmentType "${t}"`)}const Ie="i_am_done";async function xe(e,n){const a=n[e];if(!a)return n;const{accountId:t,hostedZone:o}=a,r=Object.entries(n).find((([e,{isDefault:n}])=>n))?.[0],{attribute:i}=await(0,u.prompt)({type:"select",name:"attribute",message:"What do you want to update?",choices:[{title:`Name of the env: ${e}`,value:"envName"},{title:`AWS account ID: ${t??"<not set>"}`,value:"accountId"},{title:`Is it the default env?: default env is ${r??"not set"}`,value:"isDefault"},{title:`Hosted zone: ${o}`,value:"hostedZone"},{title:"I'm done",value:Ie}]});if(void 0===i||i===Ie)return n;if("envName"===i){const t=await We()??e;return Object.fromEntries([...Object.entries(n).filter((([n])=>n!==e)),[t,a]])}if("accountId"===i){const t=await De();return{...n,[e]:{...a,accountId:t}}}if("isDefault"===i){const t=await Le();return{...n,[e]:{...a,isDefault:t}}}if("hostedZone"===i){const t=await Ce();return{...n,[e]:{...a,hostedZone:t}}}return n}const Ue="i_am_done";async function ze(e){return e.type===d.Shared||e.type===d.SharedNode||e.type===d.SharedWeb?e:e.type===d.StaticWebsite?await async function(e){const{type:n,websiteName:a,subDomain:t}=e,{attribute:o}=await(0,u.prompt)({type:"select",name:"attribute",message:"What do you want to update?",choices:[{title:`Subdomain: "${t}"`,value:"subDomain"},{title:"I'm done",value:Ue}]});if(void 0===o||o===Ue)return e;if("subDomain"===o){return{type:n,websiteName:a,subDomain:await Ee()}}return e}(e):e.type===d.StandaloneLambda?await async function(e){const{type:n,lambdaName:a,alarmEmail:t,cloudwatchTriggerMinutes:o}=e,{attribute:r}=await(0,u.prompt)({type:"select",name:"attribute",message:"What do you want to update?",choices:[{title:`Alarm email: ${t??"<not set>"}`,value:"alarmEmail"},{title:`Cloudwatch trigger (in min): ${o??"<not set>"}`,value:"cloudwatchTriggerMinutes"},{title:"I'm done",value:Ue}]});if(void 0===r||r===Ue)return e;if("alarmEmail"===r){return{type:n,lambdaName:a,alarmEmail:await Se(),cloudwatchTriggerMinutes:o}}if("cloudwatchTriggerMinutes"===r){return{type:n,lambdaName:a,alarmEmail:t,cloudwatchTriggerMinutes:await ke()}}return e}(e):e.type===d.ApiLambda?await async function(e){const{type:n,apiName:a,alarmEmail:t,subDomain:o}=e,{attribute:r}=await(0,u.prompt)({type:"select",name:"attribute",message:"What do you want to update?",choices:[{title:`Subdomain: "${o}"`,value:"subDomain"},{title:`Alarm email: ${t??"<not set>"}`,value:"alarmEmail"},{title:"I'm done",value:Ue}]});if(void 0===r||r===Ue)return e;if("subDomain"===r){return{type:n,apiName:a,alarmEmail:t,subDomain:await Ee()}}if("alarmEmail"===r){return{type:n,apiName:a,alarmEmail:await Se(),subDomain:o}}return e}(e):e.type===d.WebApp?await async function(e){const{type:n,appName:a,alarmEmail:t,authentication:o,subDomain:r}=e,{attribute:i}=await(0,u.prompt)({type:"select",name:"attribute",message:"What do you want to update?",choices:[{title:`Subdomain: "${r}"`,value:"subDomain"},{title:`Alarm email: ${t??"<not set>"}`,value:"alarmEmail"},{title:"Authentication: "+(o.enabled?"yes":"no"),value:"authentication"},{title:"I'm done",value:Ue}]});if(void 0===i||i===Ue)return e;if("subDomain"===i){return{type:n,appName:a,alarmEmail:t,authentication:o,subDomain:await Ee()}}if("alarmEmail"===i){return{type:n,appName:a,alarmEmail:await Se(),authentication:o,subDomain:r}}if("authentication"===i){return{type:n,appName:a,alarmEmail:t,authentication:await je(),subDomain:r}}return e}(e):e.type===d.NodeScript?await async function(e){const{attribute:n}=await(0,u.prompt)({type:"select",name:"attribute",message:"What do you want to update?",choices:[{title:"I'm done",value:Ue}]});if(void 0===n||n===Ue)return e;return e}(e):void Y()}function Re(e){return e.type===d.Shared?"shared":e.type===d.SharedNode?"shared-node":e.type===d.SharedWeb?"shared-web":e.type===d.ApiLambda?`${e.apiName} (lambda api)`:e.type===d.NodeScript?`${e.scriptName} (node script)`:e.type===d.StandaloneLambda?`${e.lambdaName} (lambda function)`:e.type===d.StaticWebsite?`${e.websiteName} (static website)`:e.type===d.WebApp?`${e.appName} (web app)`:void Y()}const Me="i_am_done";async function Fe(e){const{frags:n,envs:a}=e,{action:t}=await(0,u.prompt)({type:"select",name:"action",message:"What do you want to do",choices:[{title:"Add a project",value:"add-project"},{title:"Update a project",value:"update-project"},{title:"Add env",value:"add-env"},{title:"Update env",value:"update-env"},{title:"I'm done",value:Me}]});if(void 0===t||t===Me)return{frags:n,envs:a};if("add-project"===t){const e=await Te(n);return await Fe({frags:e,envs:a})}if("update-project"===t){const e=await async function(e){const{workspaceFragmentIndex:n}=await(0,u.prompt)({type:"select",name:"workspaceFragmentIndex",message:"Which project do you want to update",choices:[...e.map(((e,n)=>({value:n,title:Re(e)}))),{title:"I'm done",value:Ue}]});if(void 0===n||n===Ue)return e;const a=n,t=e[a];if(!t)return e;let o=!0,r=t;for(;o;){const e=await ze(r);o=e!==r,r=e}const i=[...e];return i[a]=r,i}(n);return await Fe({frags:e,envs:a})}if("add-env"===t){const e=await async function(e){const n=await We();if(void 0===n)return e;const a=await De(),t=await Le(),o=await Ce();if(n in e)throw new Error(`env ${n} already exists`);return{...e,[n]:{accountId:a,hostedZone:o,isDefault:t}}}(a);return await Fe({frags:n,envs:e})}if("update-env"===t){const e=await async function(e){const{envName:n}=await(0,u.prompt)({type:"select",name:"envName",message:"Which env do you want to update",choices:[...Object.keys(e).map((e=>({value:e,title:e}))),{title:"I'm done",value:Ie}]});if(!e[n])return e;let a=!0,t=e;for(;a;){const e=await xe(n,t);a=JSON.stringify(e)!==JSON.stringify(t),t=e}return t}(a);return await Fe({frags:n,envs:e})}return{frags:n,envs:a}}function He(e){return e.filter((e=>![d.Shared,d.SharedNode,d.SharedWeb].includes(e.type)))}(async function(){let e,o,r=process.cwd(),i=[];const s=await me(r),c=void 0===s;for(c?(console.log("----------------------------------"),console.log("Ready to create a new workspace."),console.log(`A new directory ${r}/<workspace-name> will be created`),console.log("----------------------------------"),e=await async function(){const{workspaceName:e}=await(0,u.prompt)({type:"text",name:"workspaceName",message:"Workspace name",validate:e=>e.length>0});return ne(e)}(),r=(0,a.join)(r,e),o={region:await ve(),envs:{}},await(0,n.mkdir)(r)):(e=(0,a.basename)(r),console.log("----------------------------------"),console.log(`Existing project "${e}" detected.`),console.log("We can update it if you'd like."),console.log("----------------------------------"),o=s.options,i=He(s.fragments));;)try{const e=await Fe({frags:i,envs:o.envs});i=e.frags,o.envs=e.envs;break}catch(e){t(String(e))}const l=i.map((e=>function(e){if(e.type===d.Shared)return"shared";if(e.type===d.SharedNode)return"shared-node";if(e.type===d.SharedWeb)return"shared-web";if(e.type===d.ApiLambda){const n=void 0===e.alarmEmail?"":`, errors alarm sent to ${e.alarmEmail}`;return`${e.apiName}: lambda API, subdomain: "${e.subDomain}"${n}`}if(e.type===d.NodeScript)return`${e.scriptName}: node script`;if(e.type===d.StandaloneLambda){const n=void 0===e.alarmEmail?"":`, errors alarm sent to ${e.alarmEmail}`,a=1===e.cloudwatchTriggerMinutes?"":"s",t=void 0===e.cloudwatchTriggerMinutes?"":` triggered every ${e.cloudwatchTriggerMinutes} minute${a}`;return`${e.lambdaName}: standalone lambda${t}${n}`}if(e.type===d.StaticWebsite)return`${e.websiteName}: static website, subdomain: "${e.subDomain}"`;if(e.type===d.WebApp){const n=void 0===e.alarmEmail?"":`, backend errors alarm sent to ${e.alarmEmail})`,a=e.authentication.enabled?", auth enabled":"";return`${e.appName}: webapp, subdomain: ${e.subDomain}${a}${n}`}Y()}(e))).join("\n"),m=Object.entries(o.envs).sort((([e],[n])=>e.localeCompare(n))).map((([e,n])=>{const a=[];void 0!==n.accountId&&a.push(`AWS account ${n.accountId}`),void 0!==n.hostedZone&&a.push(`Hosted zone ${n.hostedZone}`);let t=a.join(", ");return n.isDefault&&(t+=" (default)"),t.length>0&&(t=`: ${t}`),`- ${e}${t}`})).join("\n");c?(console.log("----------------------------------"),console.log(`Project "${e}" created`),console.log(l),console.log("----------------------------------"),console.log(`Terraform prepared in region ${o.region}`),console.log(m),console.log("----------------------------------")):(console.log("----------------------------------"),console.log(`Project "${e}" updated`),console.log(l),console.log("----------------------------------"),console.log(`Terraform prepared in region ${o.region}`),console.log(m),console.log("----------------------------------"));const p=e;await we(r,p,function(e){const n=He(e);let a=!1,t=!1;for(const n of e)n.type===d.Shared||n.type===d.SharedNode||n.type===d.SharedWeb||(n.type===d.ApiLambda||n.type===d.NodeScript||n.type===d.StandaloneLambda?t=!0:n.type===d.WebApp?(t=!0,a=!0):n.type===d.StaticWebsite?a=!0:Y());n.push({type:d.Shared}),t&&n.push({type:d.SharedNode});a&&n.push({type:d.SharedWeb});return n}(i),o,s),c?(console.log("----------------------------------"),console.log("Next steps:"),console.log("- Ensure you AWS credentials are up to date and for the correct account"),console.log(`- Initialize the infrastructure: cd ${(0,a.join)(e,"terraform")}; terraform init; terraform apply`),console.log("- Start the project: cd ..; code app.code-workspace; yarn watch"),console.log("----------------------------------")):(console.log("----------------------------------"),console.log("Next steps:"),console.log("- Review the changes made by the update and run `terraform apply` if needed"),console.log("- Start the project: code app.code-workspace; yarn watch"),console.log("----------------------------------"))})().catch(t);
//# sourceMappingURL=index.js.map