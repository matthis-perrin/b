{"version":3,"file":"index.js","mappings":"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","sources":["webpack://b/external node-commonjs \"node:fs/promises\"","webpack://b/external node-commonjs \"node:path\"","webpack://b/./src/logger.ts","webpack://b/./src/models.ts","webpack://b/external node-commonjs \"prompts\"","webpack://b/external node-commonjs \"node:child_process\"","webpack://b/external node-commonjs \"node:url\"","webpack://b/external node-commonjs \"node:fs\"","webpack://b/external node-commonjs \"prettier\"","webpack://b/./src/fs.ts","webpack://b/external node-commonjs \"node:crypto\"","webpack://b/./src/string_utils.ts","webpack://b/./src/project/dynamic_template.ts","webpack://b/./src/rand_safe.ts","webpack://b/./src/project/generate_project.ts","webpack://b/./src/versions.ts","webpack://b/./src/project/package_json.ts","webpack://b/./src/project/terraform/provider.ts","webpack://b/./src/project/terraform/s3.ts","webpack://b/./src/type_utils.ts","webpack://b/./src/project/terraform/all.ts","webpack://b/./src/project/terraform/frontend.ts","webpack://b/./src/project/terraform/lambda.ts","webpack://b/./src/project/terraform/dynamo_user.ts","webpack://b/./src/project/terraform/dynamo_user_session.ts","webpack://b/./src/project/vscode_workspace.ts","webpack://b/./src/project/generate_workspace.ts","webpack://b/./src/project/gitignore.ts","webpack://b/./src/hash.ts","webpack://b/./src/project/ask_for_common.ts","webpack://b/./src/project/ask_for_new_workspace_fragment.ts","webpack://b/./src/project/ask_for_terraform_env_update.ts","webpack://b/./src/project/ask_for_workspace_update.ts","webpack://b/./src/project/ask_for_workspace_fragments.ts","webpack://b/./src/project/ask_for_new_terraform_env.ts","webpack://b/./src/project/init_project.ts"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:fs/promises\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:path\");","export const error: (message?: unknown, ...optionalParams: unknown[]) => void = console.error;\nexport const log: (message?: unknown, ...optionalParams: unknown[]) => void = console.log;\n","import {Brand} from '@src/type_utils';\n\nexport type WorkspaceName = Brand<string, 'WorkspaceName'>;\nexport type ProjectName = Brand<string, 'ProjectName'>;\n\n//\n// Project type\n//\n\nexport enum ProjectType {\n  Web = 'web',\n  LambdaFunction = 'lambda_function',\n  LambdaApi = 'lambda_api',\n  LambdaWebApi = 'lambda_web_api',\n  NodeScript = 'node_script',\n  Shared = 'shared',\n  SharedNode = 'shared-node',\n  SharedWeb = 'shared-web',\n}\n\nexport enum EslintType {\n  Web = 'web',\n  Node = 'node',\n  Lib = 'lib',\n}\n\nexport enum TsConfigType {\n  Web = 'web',\n  Node = 'node',\n  Lib = 'lib',\n}\nexport enum WebpackType {\n  Web = 'web',\n  Lib = 'lib', // shared\n  Lambda = 'lambda',\n  NodeScript = 'node-script',\n}\n\nexport interface ProjectTypeMetadata {\n  eslint: EslintType;\n  tsconfig: TsConfigType;\n  webpack?: WebpackType;\n}\n\nexport const PROJECT_TYPE_TO_METADATA = {\n  [ProjectType.Web]: {\n    eslint: EslintType.Web,\n    tsconfig: TsConfigType.Web,\n    webpack: WebpackType.Web,\n  },\n  [ProjectType.LambdaFunction]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lambda,\n  },\n  [ProjectType.LambdaApi]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lambda,\n  },\n  [ProjectType.LambdaWebApi]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lambda,\n  },\n  [ProjectType.NodeScript]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.NodeScript,\n  },\n  [ProjectType.Shared]: {\n    eslint: EslintType.Lib,\n    tsconfig: TsConfigType.Lib,\n    webpack: WebpackType.Lib,\n  },\n  [ProjectType.SharedNode]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lib,\n  },\n  [ProjectType.SharedWeb]: {\n    eslint: EslintType.Web,\n    tsconfig: TsConfigType.Web,\n    webpack: WebpackType.Lib,\n  },\n} satisfies Record<ProjectType, ProjectTypeMetadata>;\n\n//\n// Workspace Fragment type\n//\n\nexport enum WorkspaceFragmentType {\n  StaticWebsite = 'static-website',\n  StandaloneLambda = 'standalone-lambda',\n  ApiLambda = 'api-lambda',\n  WebApp = 'web-app',\n  NodeScript = 'node-script',\n  Shared = 'shared',\n  SharedNode = 'shared-node',\n  SharedWeb = 'shared-web',\n}\n\ninterface WorkspaceFragmentBase {\n  type: WorkspaceFragmentType;\n}\n\nexport interface WebAppAuthentication {\n  enabled: boolean;\n}\n\nexport interface WorkspaceFragmentRegistry {\n  [WorkspaceFragmentType.StaticWebsite]: {\n    type: WorkspaceFragmentType.StaticWebsite;\n    websiteName: ProjectName;\n    subDomain: string;\n  };\n  [WorkspaceFragmentType.StandaloneLambda]: {\n    type: WorkspaceFragmentType.StandaloneLambda;\n    lambdaName: ProjectName;\n    alarmEmail: string | undefined;\n    cloudwatchTriggerMinutes: number | undefined;\n  };\n  [WorkspaceFragmentType.ApiLambda]: {\n    type: WorkspaceFragmentType.ApiLambda;\n    apiName: ProjectName;\n    alarmEmail: string | undefined;\n    subDomain: string;\n  };\n  [WorkspaceFragmentType.WebApp]: {\n    type: WorkspaceFragmentType.WebApp;\n    appName: string;\n    alarmEmail: string | undefined;\n    subDomain: string;\n    authentication: WebAppAuthentication;\n  };\n  [WorkspaceFragmentType.NodeScript]: {\n    type: WorkspaceFragmentType.NodeScript;\n    scriptName: ProjectName;\n  };\n  [WorkspaceFragmentType.Shared]: {\n    type: WorkspaceFragmentType.Shared;\n  };\n  [WorkspaceFragmentType.SharedNode]: {\n    type: WorkspaceFragmentType.SharedNode;\n  };\n  [WorkspaceFragmentType.SharedWeb]: {\n    type: WorkspaceFragmentType.SharedWeb;\n  };\n}\n\ntype RegistryIsValid =\n  WorkspaceFragmentRegistry extends Record<WorkspaceFragmentType, WorkspaceFragmentBase>\n    ? boolean\n    : never;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction validateRegistry(): RegistryIsValid {\n  return true;\n}\n\nexport function filterFragments<T extends WorkspaceFragmentType>(\n  frags: WorkspaceFragment[],\n  type: T\n): WorkspaceFragmentRegistry[T][] {\n  return frags.filter(frag => frag.type === type) as WorkspaceFragmentRegistry[T][];\n}\n\nexport type WorkspaceFragment = WorkspaceFragmentRegistry[keyof WorkspaceFragmentRegistry];\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"prompts\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:child_process\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:url\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"prettier\");","import {exec} from 'node:child_process';\nimport {promises, readFileSync} from 'node:fs';\nimport {dirname, join} from 'node:path';\n\nimport {BuiltInParserName, format} from 'prettier';\n\nexport const {access, readFile: readFileInternal, readdir, stat} = promises;\nconst {writeFile, mkdir, rm} = promises;\n\nexport async function readFile(path: string): Promise<string> {\n  const buffer = await readFileInternal(path);\n  return buffer.toString();\n}\n\nconst prettierConfig = (parser: BuiltInParserName) =>\n  ({\n    parser,\n    printWidth: 100,\n    singleQuote: true,\n    trailingComma: 'es5',\n    bracketSpacing: false,\n    arrowParens: 'avoid',\n    endOfLine: 'auto',\n  }) as const;\n\nexport async function prettierFormat(str: string, parser: BuiltInParserName): Promise<string> {\n  return await format(str, prettierConfig(parser));\n}\n\nexport async function writeRawFile(path: string, content: string): Promise<void> {\n  await mkdir(dirname(path), {recursive: true});\n  await writeFile(path, content);\n}\n\nexport async function prettyJson(json: unknown, opts?: {compact?: boolean}): Promise<string> {\n  const {compact} = opts ?? {};\n  return await format(\n    compact ? JSON.stringify(json) : JSON.stringify(json, undefined, 2),\n    prettierConfig('json')\n  );\n}\nexport async function prettyJsonc(json: unknown, opts?: {compact?: boolean}): Promise<string> {\n  const {compact} = opts ?? {};\n  return await format(\n    compact ? JSON.stringify(json) : JSON.stringify(json, undefined, 2),\n    prettierConfig('jsonc')\n  );\n}\nexport async function writeJsonFile(path: string, json: unknown): Promise<void> {\n  await writeRawFile(path, await prettyJson(json));\n}\n\nexport async function prettyJs(js: string): Promise<string> {\n  return await format(js, prettierConfig('babel'));\n}\nexport async function writeJsFile(path: string, js: string): Promise<void> {\n  await writeRawFile(path, await prettyJs(js));\n}\n\nexport async function prettyTs(ts: string): Promise<string> {\n  return await format(ts, prettierConfig('typescript'));\n}\nexport async function writeTsFile(path: string, ts: string): Promise<void> {\n  await writeRawFile(path, await prettyTs(ts));\n}\n\nexport async function writeRawFileIfNotExists(path: string, content: string): Promise<void> {\n  if (await exists(path)) {\n    return;\n  }\n  await writeRawFile(path, content);\n}\n\nexport async function rmDir(dirPath: string): Promise<void> {\n  await rm(dirPath, {recursive: true, force: true});\n}\n\nexport async function cleanDir(dirPath: string): Promise<void> {\n  try {\n    await rmDir(dirPath);\n  } finally {\n    await mkdir(dirPath, {recursive: true});\n  }\n}\n\nexport async function cp(from: string, to: string): Promise<void> {\n  return await new Promise((resolve, reject) => {\n    exec(`cp -R ${from} ${to}`, err => (err ? reject(err) : resolve()));\n  });\n}\n\nexport async function exists(path: string): Promise<boolean> {\n  try {\n    await access(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function maybeReadFile(path: string): Promise<string | undefined> {\n  try {\n    const fileContent = await readFile(path);\n    return fileContent.toString();\n  } catch {\n    return undefined;\n  }\n}\n\nexport function maybeReadFileSync(path: string): string | undefined {\n  try {\n    const fileContent = readFileSync(path);\n    return fileContent.toString();\n  } catch {\n    return undefined;\n  }\n}\n\nexport async function listFiles(path: string): Promise<string[]> {\n  const files: string[] = [];\n  const ents = await readdir(path, {withFileTypes: true});\n  const promises: Promise<void>[] = [];\n  for (const ent of ents) {\n    const entPath = join(path, ent.name);\n    if (ent.isDirectory()) {\n      promises.push(\n        listFiles(entPath).then(subFiles => {\n          files.push(...subFiles);\n        })\n      );\n    } else if (ent.isFile()) {\n      files.push(entPath);\n    }\n  }\n  await Promise.all(promises);\n  return files;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:crypto\");","export function capitalize(value: string): string {\n  const [firstChar] = value;\n  return firstChar === undefined ? '' : firstChar.toUpperCase() + value.slice(1);\n}\n\nexport function uncapitalize(value: string): string {\n  const [firstChar] = value;\n  return firstChar === undefined ? '' : firstChar.toLowerCase() + value.slice(1);\n}\n\nexport function pascalCase(str: string): string {\n  return str\n    .toLowerCase()\n    .split(/[^a-z]+/u)\n    .map(s => capitalize(s))\n    .join('');\n}\n\nexport function upperCase(str: string): string {\n  return str\n    .toUpperCase()\n    .split(/[^A-Z]+/u)\n    .join('_');\n}\n\nexport function lowerCase(str: string): string {\n  return str\n    .toLowerCase()\n    .split(/[^a-z]+/u)\n    .join('_');\n}\n","import {\n  filterFragments,\n  WorkspaceFragment,\n  WorkspaceFragmentRegistry,\n  WorkspaceFragmentType,\n} from '@src/models';\nimport {hasApi} from '@src/project/generate_workspace';\nimport {pascalCase} from '@src/string_utils';\n\ninterface TemplateFile {\n  path: string;\n  content: string;\n}\n\nexport function generateSharedFiles(allFragments: WorkspaceFragment[]): TemplateFile[] {\n  const webApps = filterFragments(allFragments, WorkspaceFragmentType.WebApp);\n  const apiLambdas = filterFragments(allFragments, WorkspaceFragmentType.ApiLambda);\n  const webAppsWithAuth = webApps.filter(app => app.authentication.enabled);\n  return [\n    ...(hasApi(allFragments) ? [generateSharedApiFile({webApps, apiLambdas})] : []),\n    ...webApps.map(webApp => {\n      const userType = `${pascalCase(webApp.appName)}User`;\n      return {\n        path: `shared/src/api/${webApp.appName}_api.ts`,\n        content: webApp.authentication.enabled\n          ? `\nimport {Obj, SchemaToType, Str} from '@shared/api/core/api_schema';\nimport {${userType}Id} from '@shared/models';\n\nconst Frontend${userType}Schema = Obj({\n    id: Str<${userType}Id>(),\n});\nexport type Frontend${userType} = SchemaToType<typeof Frontend${userType}Schema>;\n\nexport const ${webApp.appName.toUpperCase()}_API = {\n    '/login': {\n        POST: {\n            req: Obj({id: Str(), password: Str()}),\n            res: Frontend${userType}Schema,\n        },\n    },\n    '/test': {\n        POST: {\n            req: Obj({query: Str()}),\n            res: Obj({data: Str()}),\n        },\n    },\n};\n      `\n          : `\nimport {Obj, Str} from '@shared/api/core/api_schema';\n\nexport const ${webApp.appName.toUpperCase()}_API = {\n    '/test': {\n        POST: {\n            req: Obj({query: Str()}),\n            res: Obj({data: Str()}),\n        },\n    },\n};\n          `,\n      };\n    }),\n    ...apiLambdas.map(apiLambda => ({\n      path: `shared/src/api/${apiLambda.apiName}.ts`,\n      content: `\n  import {Unknown} from '@shared/api/core/api_schema';\n  \n  export const ${apiLambda.apiName.toUpperCase()} = {\n      '/test': {\n          GET: {\n              req: Unknown(),\n              res: Unknown(),\n          },\n      },\n  };\n        `,\n    })),\n    ...(webAppsWithAuth.length === 0 ? [] : [generateSharedModelFile(webAppsWithAuth)]),\n  ];\n}\n\nfunction generateSharedApiFile(opts: {\n  webApps: WorkspaceFragmentRegistry['web-app'][];\n  apiLambdas: WorkspaceFragmentRegistry['api-lambda'][];\n}): TemplateFile {\n  const {webApps, apiLambdas} = opts;\n\n  // IMPORTS\n  const imports = [\n    ...webApps.map(\n      webApp =>\n        `import {${webApp.appName.toUpperCase()}_API} from '@shared/api/${webApp.appName}_api';`\n    ),\n    ...apiLambdas.map(\n      apiLambda =>\n        `import {${apiLambda.apiName.toUpperCase()}} from '@shared/api/${apiLambda.apiName}';`\n    ),\n    `import {AllApiSchema} from '@shared/api/core/api_schema';`,\n    `import {ApiConfig, ApiName} from '@shared/api/core/api_types';`,\n    `import {${[\n      ...webApps.map(webApp => `${webApp.appName.toUpperCase()}_BACKEND_URL`),\n      ...apiLambdas.map(apiLambda => `${apiLambda.apiName.toUpperCase()}_URL`),\n    ].join(', ')}} from '@shared/env';`,\n  ].join('\\n');\n\n  // APIs DEF\n  const apisDef = `\n    export const ALL = {\n      ${[\n        ...webApps.map(webApp => `${webApp.appName}_backend: ${webApp.appName.toUpperCase()}_API,`),\n        ...apiLambdas.map(apiLambda => `${apiLambda.apiName}: ${apiLambda.apiName.toUpperCase()},`),\n      ].join('\\n')}\n    } satisfies AllApiSchema;\n  `.trim();\n\n  // APIs CONFIG\n  const apisConfig = `\n    export const API_CONFIGS = {\n      ${[\n        ...webApps.map(\n          webApp =>\n            `${webApp.appName}_backend: {host: ${webApp.appName.toUpperCase()}_BACKEND_URL},`\n        ),\n        ...apiLambdas.map(\n          apiLambda => `${apiLambda.apiName}: {host: ${apiLambda.apiName.toUpperCase()}_URL},`\n        ),\n      ].join('\\n')}\n    } satisfies Record<ApiName, ApiConfig>;\n  `.trim();\n\n  return {\n    path: 'shared/src/api/api.ts',\n    content: [imports, apisDef, apisConfig].join('\\n\\n'),\n  };\n}\n\nfunction generateSharedModelFile(\n  webAppsWithAuth: WorkspaceFragmentRegistry['web-app'][]\n): TemplateFile {\n  return {\n    path: 'shared/src/models.ts',\n    content: `\nimport {Brand} from '@shared/lib/type_utils';\n\n${webAppsWithAuth\n  .map(webApp => {\n    const userType = `${pascalCase(webApp.appName)}User`;\n    return `\nexport type ${userType}Id = Brand<'${userType}Id', string>;\n\nexport interface ${userType}Item {\nid: ${userType}Id;\nhash: string;\nsalt: string;\nsessionDuration: number; // in seconds\n}\n`.trim();\n  })\n  .join('\\n\\n')}\n`,\n  };\n}\n","import {randomBytes} from 'node:crypto';\n\nconst ALPHANUM = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nexport function randomStringSafe(length: number, set?: string): string {\n  let result = '';\n  const characters = set ?? ALPHANUM;\n  const bytes = randomBytes(length);\n  for (const byte of bytes) {\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    result += characters[Math.floor((byte / 255) * (characters.length - 1))];\n  }\n  return result;\n}\n\nconst UID_LENGTH = 16;\nexport function uidSafe(prefix?: string): string {\n  const id = randomStringSafe(UID_LENGTH);\n  return prefix === undefined ? id : `${prefix}${id}`;\n}\n\nconst NONCE_BYTE_SIZE = 16;\nexport function generateNonce(): string {\n  return randomBytes(NONCE_BYTE_SIZE).toString('base64');\n}\n","import {join, relative} from 'node:path';\nimport {fileURLToPath} from 'node:url';\n\nimport {listFiles, prettierFormat, readFile} from '@src/fs';\nimport {ProjectType, WorkspaceFragment} from '@src/models';\nimport {generateSharedFiles} from '@src/project/dynamic_template';\nimport {WorkspaceProject, writeWorkspaceFile} from '@src/project/generate_workspace';\nimport {FileHash, Workspace, WorkspaceOptions} from '@src/project/vscode_workspace';\nimport {randomStringSafe} from '@src/rand_safe';\nimport {upperCase} from '@src/string_utils';\n\nconst TEMPLATES_PATH = join(fileURLToPath(import.meta.url), '../templates');\n\nexport async function generateProject(opts: {\n  dst: string;\n  project: WorkspaceProject;\n  fragments: WorkspaceFragment[];\n  options: WorkspaceOptions;\n  previousWorkspace: Workspace | undefined;\n}): Promise<FileHash[]> {\n  const {dst, project, fragments, options, previousWorkspace} = opts;\n  const workspaceName = options.workspaceName;\n\n  const written: FileHash[] = [];\n  const {projectName, type, vars} = project;\n  const defaultVars = {\n    __WORKSPACE_NAME__: workspaceName,\n    __WORKSPACE_NAME_UPPERCASE__: upperCase(workspaceName),\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    __COOKIE_ENCRYPTION_KEY__: randomStringSafe(32),\n  };\n\n  // Copy template files\n  const templatePath = join(TEMPLATES_PATH, type);\n  const files = await listFiles(templatePath);\n  const filesToWrite = [\n    ...(await Promise.all(\n      files.map(async file => {\n        const relativePath = relative(templatePath, file);\n        const dstPath = join(projectName, relativePath);\n\n        let content = await readFile(file);\n        if (file.endsWith('package.json')) {\n          const packageJson = JSON.parse(await readFile(file));\n          packageJson['name'] = projectName;\n          content = JSON.stringify(packageJson, undefined, 2);\n        }\n        for (const [varName, varValue] of Object.entries({...vars, ...defaultVars})) {\n          content = content.replaceAll(varName, varValue);\n        }\n\n        return {path: dstPath, content};\n      })\n    )),\n  ];\n  if (type === ProjectType.Shared) {\n    filesToWrite.push(...generateSharedFiles(fragments));\n  }\n\n  await Promise.all(\n    filesToWrite.map(async ({path, content}) => {\n      let formattedContent = content;\n\n      // Handle @matthis/skip-file directives\n      const skipFileMatches = content.matchAll(\n        /\\/\\/ @matthis\\/skip-file:(?<flagName>[^:]+)(?<negate>:not)?:(?<flagValue>[^\\s]*)/gu\n      );\n      for (const skipFileMatch of skipFileMatches) {\n        const {flagName, negate, flagValue} = skipFileMatch.groups ?? {};\n        if (flagMatch({flagName, negate, flagValue}, project, fragments)) {\n          return;\n        }\n      }\n      // Remove the lines that contain the @matthis/skip-file directives\n      formattedContent = formattedContent.replaceAll(\n        / *\\/\\/ @matthis\\/skip-file:[^:]+(?::not)?:[^\\n]*\\n/gu,\n        ''\n      );\n\n      // Handle @matthis/start and @matthis/end directives\n      const fileLines: string[] = [];\n      const depth: ('include' | 'exclude')[] = ['include'];\n      for (const line of formattedContent.split('\\n')) {\n        // Look for @matthis/end\n        if (line.includes('@matthis/end')) {\n          depth.pop();\n          continue;\n        }\n\n        // Look for @matthis/start\n        const matchStart =\n          /.*\\/\\/ @matthis\\/start:(?<flagName>[^:]+)(?<negate>:not)?:(?<flagValue>[^\\s]*).*/u.exec(\n            line\n          );\n        if (matchStart) {\n          const {flagName, negate, flagValue} = matchStart.groups ?? {};\n          depth.push(\n            flagMatch({flagName, negate, flagValue}, project, fragments) ? 'include' : 'exclude'\n          );\n          continue;\n        }\n\n        if (depth.at(-1) === 'include') {\n          fileLines.push(line);\n        }\n      }\n      formattedContent = fileLines.join('\\n');\n\n      if (path.endsWith('.ts') || path.endsWith('.tsx')) {\n        formattedContent = await prettierFormat(formattedContent, 'typescript');\n      }\n      if (path.endsWith('.json')) {\n        formattedContent = await prettierFormat(formattedContent, 'json');\n      }\n      written.push(await writeWorkspaceFile(previousWorkspace, dst, path, formattedContent));\n    })\n  );\n\n  return written;\n}\n\nfunction flagMatch(\n  flag: {flagName?: string; negate?: string; flagValue?: string},\n  project: WorkspaceProject,\n  allFragments: WorkspaceFragment[]\n): boolean {\n  const {flagName, negate, flagValue} = flag;\n  if (flagName === undefined || flagValue === undefined) {\n    return false;\n  }\n  const projectFlagValue = project.flags(allFragments)[flagName];\n  const projectFlagMatchValue = projectFlagValue === flagValue;\n  return negate !== undefined ? !projectFlagMatchValue : projectFlagMatchValue;\n}\n","export const PACKAGE_VERSIONS = {\n  project: '1.13.14',\n  eslint: '1.8.5',\n  prettier: '1.5.0',\n  tsconfig: '1.7.4',\n  webpack: '1.8.10',\n  runner: '1.6.24',\n  lambdaServerRuntime: '1.0.7',\n};\n\nexport const ESLINT_VERSION = '9.8.x';\nexport const PRETTIER_VERSION = '3.3.3';\nexport const TYPESCRIPT_VERSION = '5.5.x';\nexport const MIN_NODE_VERSION = '20.10';\nexport const NODE_VERSION = `>=${MIN_NODE_VERSION}`;\nexport const CORE_JS_VERSION = '3.37';\n\nexport const LIB_VERSIONS = {\n  '@types/react': '18.2.x',\n  '@types/react-dom': '18.2.x',\n  react: '18.2.x',\n  'react-dom': '18.2.x',\n  'styled-components': '6.1.x',\n};\n","import {PROJECT_TYPE_TO_METADATA, WorkspaceName} from '@src/models';\nimport {WorkspaceProject} from '@src/project/generate_workspace';\nimport {NODE_VERSION, PACKAGE_VERSIONS, TYPESCRIPT_VERSION} from '@src/versions';\n\nfunction uniq<T>(val: T[]): T[] {\n  return [...new Set(val).values()];\n}\n\nexport function generateWorkspacePackageJson(\n  workspaceName: WorkspaceName,\n  projects: WorkspaceProject[]\n): Record<string, unknown> {\n  const eslintRuntimes = uniq(projects.map(p => PROJECT_TYPE_TO_METADATA[p.type].eslint));\n  const tsconfigRuntimes = uniq(projects.map(p => PROJECT_TYPE_TO_METADATA[p.type].tsconfig));\n  const webpackRuntimes = uniq(projects.map(p => PROJECT_TYPE_TO_METADATA[p.type].webpack));\n\n  return {\n    name: workspaceName,\n    license: 'UNLICENSED',\n    type: 'module',\n    engines: {\n      node: NODE_VERSION,\n    },\n    scripts: {\n      setup: 'node ./setup.js',\n      deploy: 'node ./deploy.js',\n      build: 'node ./build.js',\n      watch: 'node ./build.js --watch',\n    },\n    prettier: '@matthis/prettier-config',\n    devDependencies: Object.fromEntries(\n      (\n        [\n          ...eslintRuntimes.map(runtime => [\n            `@matthis/eslint-config-${runtime}`,\n            PACKAGE_VERSIONS.eslint,\n          ]),\n          ['@matthis/prettier-config', PACKAGE_VERSIONS.prettier],\n          ...tsconfigRuntimes.map(runtime => [\n            `@matthis/tsconfig-${runtime}`,\n            PACKAGE_VERSIONS.tsconfig,\n          ]),\n          ...webpackRuntimes.map(runtime => [\n            `@matthis/webpack-${runtime}`,\n            PACKAGE_VERSIONS.webpack,\n          ]),\n          ['@matthis/webpack-runner', PACKAGE_VERSIONS.runner],\n          ['typescript', TYPESCRIPT_VERSION],\n        ] as [string, string][]\n      ).sort((d1, d2) => d1[0].localeCompare(d2[0]))\n    ),\n  };\n}\n","import {TerraformEnv, WorkspaceOptions} from '@src/project/vscode_workspace';\n\nfunction stringOrNull(val?: string): string {\n  return val === undefined ? 'null' : `\"${val}\"`;\n}\n\nexport function generateAwsProviderTerraform(opts: WorkspaceOptions): string {\n  const {region, envs, workspaceName} = opts;\n\n  // If no envs are defined, create a virtual dummy env as default\n  let envsAndDefault: {envs: Record<string, TerraformEnv>; defaultEnvName: string};\n  const envNames = Object.keys(envs);\n  if (envNames.length === 0) {\n    const defaultEnv: TerraformEnv = {isDefault: true};\n    envsAndDefault = {envs: {default: defaultEnv}, defaultEnvName: 'default'};\n  } else if (envNames.length === 1) {\n    const firstEnvName = envNames[0]!; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    const firstEnv = {...envs[firstEnvName]!, isDefault: true}; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    envsAndDefault = {envs: {[firstEnvName]: firstEnv}, defaultEnvName: firstEnvName};\n  } else {\n    const defaultEnvName = Object.entries(envs).find(([_, env]) => env.isDefault)?.[0];\n    if (defaultEnvName === undefined) {\n      throw new Error(\n        `Encountered ${envNames.length} envs (${envNames.join(', ')}) but none is the default env`\n      );\n    }\n    envsAndDefault = {envs, defaultEnvName};\n  }\n\n  return `\n\nlocals {\n  all_envs = {\n${Object.entries(envsAndDefault.envs)\n  .map(\n    ([name, env]) =>\n      `    ${name} = {account_id = ${stringOrNull(env.accountId)}, hosted_zone = ${stringOrNull(env.hostedZone)}}${env.isDefault ? ' # default' : ''}`\n  )\n  .join('\\n')}\n  }\n}\n\nlocals {\n  current_env = lookup(local.all_envs, terraform.workspace, local.all_envs[\"${envsAndDefault.defaultEnvName}\"])\n  current_env_name = \"${envsAndDefault.defaultEnvName}\"\n}\n\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\" # Use the latest 5.x versions\n    }\n  }\n}\n\nprovider \"aws\" {\n  region                   = \"${region}\"\n  allowed_account_ids      = local.current_env.account_id != null ? [local.current_env.account_id] : null\n  default_tags {\n    tags = {\n      Project = \"${workspaceName}\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  alias                    = \"us-east-1\"\n  region                   = \"us-east-1\"\n  default_tags {\n    tags = {\n      Project = \"${workspaceName}\"\n    }\n  }\n}\n\noutput \"current_env\" {\n  value = data.aws_caller_identity.current.account_id\n}\n\ndata \"aws_region\" \"current\" {}\noutput \"region\" {\n  value = data.aws_region.current.id\n}\n\ndata \"aws_caller_identity\" \"current\" {}\noutput \"account_id\" {\n  value = data.aws_caller_identity.current.account_id\n}\n\ndata \"aws_route53_zone\" \"main\" {\n  name = local.current_env.hosted_zone\n}\n\n`.trim();\n}\n","import {ProjectName} from '@src/models';\nimport {WorkspaceOptions} from '@src/project/vscode_workspace';\n\nexport function generateS3BucketTerraform(\n  workspaceOptions: WorkspaceOptions,\n  webProjectNames: ProjectName[]\n): string {\n  const {workspaceName} = workspaceOptions;\n  const bucketName = workspaceName.toLowerCase().replace(/[^a-z0-9.-]+/gu, '-');\n\n  const CODE_BUCKET = `\nresource \"aws_s3_bucket\" \"code\" {\n  bucket_prefix = \"${bucketName}-code-\"\n}\n\noutput \"code_bucket\" {\n  value = aws_s3_bucket.code.id\n}\n`.trim();\n\n  const CLOUDFRONT_ACCESS = `\ndata \"aws_iam_policy_document\" \"cloudfront_access_to_code_policy\" {\n  ${webProjectNames\n    .map(p =>\n      `\n  statement {\n    actions = [\"s3:GetObject\"]\n    resources = [\n      \"\\${aws_s3_bucket.code.arn}/${p}/*\",\n    ]\n    principals {\n      type        = \"AWS\"\n      identifiers = [aws_cloudfront_origin_access_identity.${p}.iam_arn]\n    }\n  }\n`.trim()\n    )\n    .join('\\n\\n')}\n}\n\nresource \"aws_s3_bucket_policy\" \"cloudfront_access_to_code\" {\n  bucket = aws_s3_bucket.code.id\n  policy = data.aws_iam_policy_document.cloudfront_access_to_code_policy.json\n}\n`.trim();\n\n  const out = [CODE_BUCKET];\n  if (webProjectNames.length > 0) {\n    out.push(CLOUDFRONT_ACCESS);\n  }\n  return out.join('\\n\\n');\n}\n","function notUndefined<T>(val: T | undefined): val is T {\n  return val !== undefined;\n}\n\nexport function isString(val: unknown): val is string {\n  return typeof val === 'string';\n}\n\nexport function isNumber(val: unknown): val is number {\n  return typeof val === 'number';\n}\n\nexport function iterNumberEnum<T extends Record<string, string | number>>(e: T): T[keyof T][] {\n  return Object.values(e).filter(isNumber) as unknown as T[keyof T][];\n}\n\nexport function iterStringEnum<T extends Record<string, string>>(e: T): T[keyof T][] {\n  return Object.values(e).filter(isString) as unknown as T[keyof T][];\n}\n\nexport function removeUndefined<T>(arr: (T | undefined)[]): T[] {\n  return arr.filter(notUndefined);\n}\n\nexport function removeUndefinedOrNullProps<T extends Record<string, unknown>>(obj: T): {} {\n  return Object.fromEntries(\n    Object.entries(obj).filter(e => e[1] !== undefined && e[1] !== null)\n  ) as T;\n}\n\nexport function neverHappens(value: never, errorMessage?: string): never {\n  throw new Error(errorMessage);\n}\n\nexport type AnyInterface<T> = {[K in keyof T]: unknown};\n\nexport function asMap(value: unknown): Record<string, unknown> | undefined;\nexport function asMap(\n  value: unknown,\n  defaultValue: Record<string, unknown>\n): Record<string, unknown>;\nexport function asMap(\n  value: unknown,\n  defaultValue?: Record<string, unknown>\n): Record<string, unknown> | undefined {\n  return typeof value === 'object' && value !== null && !Array.isArray(value)\n    ? (value as Record<string, unknown>)\n    : defaultValue;\n}\nexport function asMapOrThrow(value: unknown): Record<string, unknown> {\n  const valueAsMap = asMap(value);\n  if (valueAsMap === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a map`);\n  }\n  return valueAsMap;\n}\n\nexport function asJson(value: string): Record<string, unknown> | undefined;\nexport function asJson(\n  value: string,\n  defaultValue: Record<string, unknown>\n): Record<string, unknown>;\nexport function asJson(\n  value: string,\n  defaultValue?: Record<string, unknown>\n): Record<string, unknown> | undefined {\n  try {\n    const json = JSON.parse(value);\n    const res = asMap(json);\n    return res ?? defaultValue;\n  } catch {\n    return defaultValue;\n  }\n}\nexport function asJsonOrThrow(value: string): Record<string, unknown> {\n  const valueAsJson = asJson(value);\n  if (valueAsJson === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a valid JSON string of a map`);\n  }\n  return valueAsJson;\n}\n\nexport function asJsonString(value: unknown): Record<string, unknown> | undefined;\nexport function asJsonString(\n  value: unknown,\n  defaultValue: Record<string, unknown>\n): Record<string, unknown>;\nexport function asJsonString(\n  value: unknown,\n  defaultValue?: Record<string, unknown>\n): Record<string, unknown> | undefined {\n  const str = asString(value);\n  return str === undefined\n    ? defaultValue\n    : defaultValue === undefined\n      ? asJson(str)\n      : asJson(str, defaultValue);\n}\nexport function asJsonStringOrThrow(value: unknown): Record<string, unknown> {\n  return asJsonOrThrow(asStringOrThrow(value));\n}\n\nexport function asString<T extends string = string>(value: unknown): T | undefined;\nexport function asString<T extends string = string>(value: unknown, defaultValue: string): T;\nexport function asString<T extends string = string>(\n  value: unknown,\n  defaultValue?: string\n): T | undefined {\n  return (typeof value === 'string' ? value : defaultValue) as T;\n}\nexport function asStringOrThrow<T extends string = string>(value: unknown): T {\n  const valueAsString = asString<T>(value);\n  if (valueAsString === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a string`);\n  }\n  return valueAsString;\n}\n\nexport function asStringEnum<T extends Record<string, string>>(\n  value: unknown,\n  enu: T\n): T[keyof T] | undefined;\nexport function asStringEnum<T extends Record<string, string>>(\n  value: unknown,\n  enu: T,\n  defaultValue: T[keyof T]\n): T[keyof T];\nexport function asStringEnum<T extends Record<string, string>>(\n  value: unknown,\n  enu: T,\n  defaultValue?: T[keyof T]\n): T[keyof T] | undefined {\n  return (\n    typeof value === 'string' && Object.values(enu).includes(value as T[keyof T])\n      ? value\n      : defaultValue\n  ) as T[keyof T];\n}\nexport function asStringEnumOrThrow<T extends Record<string, string>>(\n  value: unknown,\n  enu: T\n): T[keyof T] {\n  const valueAsString = asStringEnum<T>(value, enu);\n  if (valueAsString === undefined) {\n    throw new Error(\n      `Invalid value: \\`${value}\\` is not a string or not one of ${JSON.stringify(\n        Object.values(enu)\n      )}`\n    );\n  }\n  return valueAsString;\n}\n\nexport function asArray<T = unknown>(value: unknown): T[] | undefined;\nexport function asArray<T = unknown>(value: unknown, defaultValue: unknown[]): T[];\nexport function asArray<T = unknown>(value: unknown, defaultValue?: unknown[]): T[] | undefined {\n  return (Array.isArray(value) ? value : defaultValue) as T[];\n}\nexport function asArrayOrThrow<T = unknown>(value: unknown): T[] {\n  if (!Array.isArray(value)) {\n    throw new Error(`Invalid value: \\`${value}\\` is not an array`);\n  }\n  return value as T[];\n}\n\nexport function asStringArray<T extends string = string>(value: unknown): T[] | undefined;\nexport function asStringArray<T extends string = string>(\n  value: unknown,\n  defaultValue: string[]\n): T[];\nexport function asStringArray<T extends string = string>(\n  value: unknown,\n  defaultValue?: string[]\n): T[] | undefined {\n  const arr = asArray(value);\n  if (arr === undefined) {\n    return defaultValue as T[];\n  }\n  return removeUndefined(arr.map(s => asString<T>(s)));\n}\n\nexport function asStringArrayOrThrow<T extends string = string>(value: unknown): T[] {\n  const arr = asArrayOrThrow(value);\n  return arr.map(s => asStringOrThrow<T>(s));\n}\n\nexport function asMapArray(value: unknown): Record<string, unknown>[] | undefined;\nexport function asMapArray(\n  value: unknown,\n  defaultValue: Record<string, unknown>[]\n): Record<string, unknown>[];\nexport function asMapArray(\n  value: unknown,\n  defaultValue?: Record<string, unknown>[]\n): Record<string, unknown>[] | undefined {\n  const arr = asArray(value);\n  if (arr === undefined) {\n    return defaultValue;\n  }\n  return removeUndefined(arr.map(s => asMap(s)));\n}\nexport function asMapArrayOrThrow(value: unknown): Record<string, unknown>[] {\n  const arr = asArrayOrThrow(value);\n  return arr.map(s => asMapOrThrow(s));\n}\n\nexport function asNumber<T extends number = number>(value: unknown): T | undefined;\nexport function asNumber<T extends number = number>(value: unknown, defaultValue: number): T;\nexport function asNumber<T extends number = number>(\n  value: unknown,\n  defaultValue?: number\n): T | undefined {\n  if (typeof value === 'number') {\n    return (!isNaN(value) ? value : defaultValue) as T;\n  }\n  if (typeof value === 'string') {\n    try {\n      const parsedValue = parseFloat(value);\n      return (!isNaN(parsedValue) ? parsedValue : defaultValue) as T;\n    } catch {\n      return defaultValue as T;\n    }\n  }\n  return defaultValue as T;\n}\nexport function asNumberOrThrow<T extends number = number>(value: unknown): T {\n  const valueAsNumber = asNumber(value);\n  if (valueAsNumber === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a number`);\n  }\n  return valueAsNumber as T;\n}\n\nexport function asBoolean(value: unknown): boolean | undefined;\nexport function asBoolean(value: unknown, defaultValue: boolean): boolean;\nexport function asBoolean(value: unknown, defaultValue?: boolean): boolean | undefined {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  if (typeof value === 'number') {\n    return !isNaN(value) ? value !== 0 : false;\n  }\n  if (typeof value === 'string') {\n    if (value === '0' || value === 'false') {\n      return false;\n    } else if (value === '1' || value === 'true') {\n      return true;\n    }\n    return defaultValue;\n  }\n  return defaultValue;\n}\n\nexport function asBooleanOrThrow(value: unknown): boolean {\n  const valueAsBoolean = asBoolean(value);\n  if (valueAsBoolean === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a boolean`);\n  }\n  return valueAsBoolean;\n}\n\nconst TIMESTAMP_REGEX = /^[0-9]{1,15}$/u;\nexport function asDate(value: unknown): Date | undefined;\nexport function asDate(value: unknown, defaultValue: Date): Date;\nexport function asDate(value: unknown, defaultValue?: Date): Date | undefined {\n  const date =\n    value instanceof Date\n      ? value\n      : new Date(\n          typeof value === 'string' && TIMESTAMP_REGEX.test(value)\n            ? parseFloat(value)\n            : String(value)\n        );\n  return isNaN(date.getTime()) ? defaultValue : date;\n}\n\nexport function asDateOrThrow(value: unknown): Date {\n  const valueAsDate = asDate(value);\n  if (valueAsDate === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` cannot be parsed as a Date`);\n  }\n  return valueAsDate;\n}\n\n// export function asDate(value: unknown): Date | undefined;\n// export function asDate(value: unknown, defaultValue: Date): Date;\n// export function asDate(value: unknown, defaultValue?: Date): Date | undefined {\n//   if (typeof value === 'number') {\n//     return new Date(value);\n//   }\n//   return value instanceof Date ? value : defaultValue;\n// }\n\nexport function isNull<T>(val: T | null): val is null {\n  return val === null;\n}\n\nexport function asError(err: unknown): Error {\n  return err instanceof Error ? err : new Error(typeof err === 'string' ? err : String(err));\n}\n\nexport function errorAsString(err: unknown): string {\n  const errorMap = asMap(err);\n  if (errorMap === undefined) {\n    return asString(err) ?? String(err);\n  }\n\n  const errorMessage = asString(errorMap['message']);\n  if (errorMessage === undefined) {\n    return String(err);\n  }\n  return errorMessage;\n}\n\nexport function errorAndStackAsString(err: unknown): string {\n  const errorMap = asMap(err);\n  if (errorMap === undefined) {\n    return asString(err) ?? String(err);\n  }\n\n  const stack = asString(errorMap['stack']);\n  if (stack === undefined) {\n    return String(err);\n  }\n  return stack;\n}\n\nexport function asConstantOrThrow<T>(value: unknown, expected: T): T {\n  if (value !== expected) {\n    throw new Error(`Invalid value: \\`${value}\\`, expected \\`${expected}\\``);\n  }\n  return value as T;\n}\n\n// export function asParsedJson<T>(json: string): T {\n//   try {\n//     return JSON.parse(json) as T;\n//   } catch {\n//     const defaultValue = {};\n//     return defaultValue as T;\n//   }\n// }\nexport function parseJson(\n  json: string\n): {res: unknown; err: undefined} | {res: undefined; err: unknown} {\n  try {\n    return {res: JSON.parse(json), err: undefined};\n  } catch (err: unknown) {\n    return {err, res: undefined};\n  }\n}\nexport type Brand<Type, Name> = Type & {__brand: Name};\nexport type StringBrand = string & {__brand: string};\nexport type NumberBrand = number & {__brand: number};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type AnyBrand = (string | number) & {__brand: any};\n\nexport type Untrusted<T> = T extends\n  | Function\n  | Date\n  | boolean\n  | number\n  | string\n  | undefined\n  | null\n  | unknown[]\n  ? unknown\n  : {[P in keyof T]?: Untrusted<T[P]>};\n\nexport type DeepPartial<T> = T extends\n  | Function\n  | Date\n  | boolean\n  | number\n  | string\n  | undefined\n  | null\n  | unknown[]\n  ? T\n  : {[P in keyof T]?: DeepPartial<T[P]>};\n\nexport type MapInterface<I, Type> = {[Key in keyof I]: Type};\n// Get all the keys of a type including the optional attributes\ntype NonHomomorphicKeys<T> = ({[P in keyof T]: P} & None)[keyof T];\nexport type MapInterfaceStrict<I, Type> = {[Key in NonHomomorphicKeys<I>]: Type};\n\ntype KeysOfType<T, Type> = {[Key in keyof T]: T[Key] extends Type ? Key : never}[keyof T];\nexport type RestrictInterface<T, Type> = Pick<T, KeysOfType<T, Type>>;\n\ninterface RecursiveArray<T> extends Array<T | RecursiveArray<T>> {}\nexport type NestedArray<T> = (T | RecursiveArray<T>)[];\n\n// Type for an empty object (ie: {})\nexport type None = Record<string, never>;\n\nexport type NonEmptyArray<T> = [T, ...T[]];\nexport function isNonEmptyArray<T>(val: T[]): val is NonEmptyArray<T> {\n  return val.length > 0;\n}\nexport function nonEmptyArray<T>(val: T[]): NonEmptyArray<T> | undefined {\n  return val.length === 0 ? undefined : (val as NonEmptyArray<T>);\n}\n\nexport type AddPrefix<T, P extends string> = {\n  [K in keyof T as K extends string ? `${P}${K}` : never]: T[K];\n};\nexport function addPrefix<T extends Record<string, unknown>, Prefix extends string>(\n  attr: T,\n  prefix: Prefix\n): AddPrefix<T, Prefix> {\n  return Object.fromEntries(\n    Object.entries(attr).map(([key, value]) => [`${prefix}${key}`, value])\n  ) as AddPrefix<T, Prefix>;\n}\n\nexport type WithNull<T> = {\n  [Key in keyof T]: T[Key] extends Exclude<T[Key], undefined> ? T[Key] : T[Key] | null;\n};\ntype Id<T> = T;\nexport type Flatten<T> = Id<{[k in keyof T]: T[k]}>;\n\nexport type Defined<T> = Exclude<T, undefined>;\n","import {ProjectType, WorkspaceName} from '@src/models';\nimport {WorkspaceProject} from '@src/project/generate_workspace';\nimport {generateFrontendTerraform} from '@src/project/terraform/frontend';\nimport {generateLambdaTerraform} from '@src/project/terraform/lambda';\nimport {generateAwsProviderTerraform} from '@src/project/terraform/provider';\nimport {generateS3BucketTerraform} from '@src/project/terraform/s3';\nimport {WorkspaceOptions} from '@src/project/vscode_workspace';\nimport {neverHappens} from '@src/type_utils';\n\nexport interface AppDomain {\n  rootDomain: string;\n  subDomain: string;\n}\n\nexport function generateCommonTerraform(\n  projects: WorkspaceProject[],\n  workspaceOptions: WorkspaceOptions\n): string {\n  return [\n    generateAwsProviderTerraform(workspaceOptions),\n    generateS3BucketTerraform(\n      workspaceOptions,\n      projects.filter(p => p.type === ProjectType.Web).map(p => p.projectName)\n    ),\n  ].join('\\n\\n');\n}\n\nexport function generateWorkspaceProjectTerraform(\n  workspaceName: WorkspaceName,\n  project: WorkspaceProject\n): string | undefined {\n  const {projectName, terraform} = project;\n\n  if (terraform.type === 'frontend') {\n    return generateFrontendTerraform(projectName, terraform);\n  } else if (terraform.type === 'lambda') {\n    return generateLambdaTerraform(workspaceName, projectName, terraform);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  else if (terraform.type === 'no-terraform') {\n    return undefined;\n  }\n  neverHappens(terraform, 'Terraform type');\n}\n","import {ProjectName} from '@src/models';\n\nexport interface WorkspaceProjectTerraformFrontend {\n  type: 'frontend';\n  subDomain: string;\n}\n\nexport function generateFrontendTerraform(\n  projectName: ProjectName,\n  opts: WorkspaceProjectTerraformFrontend\n): string {\n  const {subDomain} = opts;\n  const bucketName = projectName.toLowerCase().replace(/[^\\d.a-z-]+/gu, '-');\n  const originId = `${bucketName}-origin-id`;\n  return `\noutput \"${projectName}_cloudfront_domain_name\" {\n  value       = \"${subDomain}\\${local.current_env.hosted_zone}\"\n  description = \"Domain where the \\\\\"${projectName}\\\\\" is available.\"\n}\n\n# Domain\n\nresource \"aws_route53_record\" \"${projectName}_a\" {\n  zone_id = data.aws_route53_zone.main.zone_id\n  name    = \"${subDomain}\\${local.current_env.hosted_zone}\"\n  type    = \"A\"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${projectName}.domain_name\n    zone_id                = aws_cloudfront_distribution.${projectName}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource \"aws_route53_record\" \"${projectName}_aaaa\" {\n  zone_id = data.aws_route53_zone.main.zone_id\n  name    = \"${subDomain}\\${local.current_env.hosted_zone}\"\n  type    = \"AAAA\"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${projectName}.domain_name\n    zone_id                = aws_cloudfront_distribution.${projectName}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource \"aws_acm_certificate\" \"${projectName}\" {\n  domain_name               = \"*.${subDomain}\\${local.current_env.hosted_zone}\"\n  subject_alternative_names = [\"${subDomain}\\${local.current_env.hosted_zone}\"]\n  validation_method         = \"DNS\"\n  provider                  = aws.us-east-1\n}\n\nresource \"aws_route53_record\" \"${projectName}_certificate_validation\" {\n  for_each = {\n    for dvo in aws_acm_certificate.${projectName}.domain_validation_options : dvo.domain_name => {\n      name   = dvo.resource_record_name\n      record = dvo.resource_record_value\n      type   = dvo.resource_record_type\n    }\n  }\n  provider        = aws.us-east-1\n  allow_overwrite = true\n  name            = each.value.name\n  records         = [each.value.record]\n  ttl             = 60\n  type            = each.value.type\n  zone_id         = data.aws_route53_zone.main.zone_id\n}\n\nresource \"aws_acm_certificate_validation\" \"${projectName}\" {\n  provider                = aws.us-east-1\n  certificate_arn         = aws_acm_certificate.${projectName}.arn\n  validation_record_fqdns = [for record in aws_route53_record.${projectName}_certificate_validation : record.fqdn]\n}\n    \n# Cloudfront Distribution\n\nresource \"aws_cloudfront_origin_access_identity\" \"${projectName}\" {}\n  \nresource \"aws_cloudfront_distribution\" \"${projectName}\" {\n  origin {\n    domain_name = aws_s3_bucket.code.bucket_regional_domain_name\n    origin_id   = \"${originId}\"\n    origin_path = \"/${projectName}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.${projectName}.cloudfront_access_identity_path\n    }\n  }\n  \n  enabled             = true\n  wait_for_deployment = false\n  is_ipv6_enabled     = true\n  price_class         = \"PriceClass_100\"\n  aliases             = [\"${subDomain}\\${local.current_env.hosted_zone}\"]\n  \n  default_root_object = \"/index.html\"\n  custom_error_response {\n    error_code         = 400\n    response_code      = 200\n    response_page_path = \"/index.html\"\n  }\n  custom_error_response {\n    error_code         = 403\n    response_code      = 200\n    response_page_path = \"/index.html\"\n  }\n  custom_error_response {\n    error_code         = 404\n    response_code      = 200\n    response_page_path = \"/index.html\"\n  }\n\n  default_cache_behavior {\n    allowed_methods        = [\"HEAD\", \"GET\"]\n    cached_methods         = [\"HEAD\", \"GET\"]\n    compress               = true\n    target_origin_id       = \"${originId}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    \n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate.${projectName}.arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n  `.trim();\n}\n","import {ProjectName, WebAppAuthentication, WorkspaceName} from '@src/models';\nimport {lowerCase} from '@src/string_utils';\n\nexport interface WorkspaceProjectTerraformLambda {\n  type: 'lambda';\n  api: boolean;\n  webAppName: string | undefined;\n  alarmEmail: string | undefined;\n  cloudwatchTriggerMinutes: number | undefined;\n  subDomain?: string;\n  authentication: WebAppAuthentication | undefined;\n}\n\nexport function generateLambdaTerraform(\n  workspaceName: WorkspaceName,\n  projectName: ProjectName,\n  opts: WorkspaceProjectTerraformLambda\n): string {\n  const {api, webAppName, alarmEmail, cloudwatchTriggerMinutes, subDomain, authentication} = opts;\n  return `\n# Define any extra role for the lambda here\ndata \"aws_iam_policy_document\" \"${projectName}_extra_policy\" {\n  ${\n    authentication?.enabled\n      ? `statement {\n    actions = [\n      \"dynamodb:GetItem\",\n      \"dynamodb:BatchGetItem\",\n      \"dynamodb:Query\",\n      \"dynamodb:Scan\",\n      \"dynamodb:PutItem\",\n      \"dynamodb:UpdateItem\",\n      \"dynamodb:DeleteItem\",\n    ]\n    resources = [${\n      webAppName === undefined\n        ? ''\n        : `\n      \"\\${aws_dynamodb_table.${lowerCase(webAppName)}_user_table.arn}\",\n      \"\\${aws_dynamodb_table.${lowerCase(webAppName)}_user_table.arn}/index/*\",\n      \"\\${aws_dynamodb_table.${lowerCase(webAppName)}_user_session_table.arn}\",\n      \"\\${aws_dynamodb_table.${lowerCase(webAppName)}_user_session_table.arn}/index/*\",\n    `\n    }]\n  }`\n      : ''\n  }${\n    webAppName !== undefined\n      ? `\n\n  statement {\n    actions = [\n      \"s3:GetObject\",\n      \"s3:GetObjectTagging\"\n    ]\n    resources = [\n      \"\\${aws_s3_bucket.code.arn}/*\"\n    ]\n  }`\n      : ''\n  }\n}\n\nresource \"aws_lambda_function\" \"${projectName}\" {\n  function_name = \"${workspaceName}-${projectName}\"\n  s3_bucket     = aws_s3_object.${projectName}_archive.bucket\n  s3_key        = aws_s3_object.${projectName}_archive.key\n  handler       = \"index.handler\"\n  runtime       = \"nodejs20.x\"\n  role          = aws_iam_role.${projectName}_role.arn\n  timeout       = 900 // 15 minutes\n  memory_size   = 128 // Mo\n  environment {\n    variables = {${\n      api\n        ? `\n      NODE_OPTIONS            = \"--enable-source-maps\"\n      CLOUDFRONT_HEADER_NAME  = random_string.${projectName}_cloudfront_header_name.result\n      CLOUDFRONT_HEADER_VALUE = random_string.${projectName}_cloudfront_header_value.result`\n        : `\n      NODE_OPTIONS = \"--enable-source-maps\"`\n    }\n    }\n  }\n}\n\noutput \"${projectName}_function_name\" {\n  value       = aws_lambda_function.${projectName}.function_name\n  description = \"Function name of the \\\\\"${workspaceName}-${projectName}\\\\\" lambda\"\n}\n${\n  api && subDomain !== undefined\n    ? `\n# Lambda URL\n\nresource \"aws_lambda_function_url\" \"${projectName}\" {\n  function_name      = aws_lambda_function.${projectName}.function_name\n  authorization_type = \"NONE\"\n}\n\noutput \"${projectName}_url\" {\n  value       = \"https://${subDomain}\\${local.current_env.hosted_zone}/\"\n  description = \"URL of \\\\\"${projectName}\\\\\"\"\n}\n\n# Domain\n\nresource \"aws_route53_record\" \"${projectName}_a\" {\n  zone_id = data.aws_route53_zone.main.zone_id\n  name    = \"${subDomain}\\${local.current_env.hosted_zone}\"\n  type    = \"A\"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${projectName}.domain_name\n    zone_id                = aws_cloudfront_distribution.${projectName}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource \"aws_route53_record\" \"${projectName}_aaaa\" {\n  zone_id = data.aws_route53_zone.main.zone_id\n  name    = \"${subDomain}\\${local.current_env.hosted_zone}\"\n  type    = \"AAAA\"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${projectName}.domain_name\n    zone_id                = aws_cloudfront_distribution.${projectName}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource \"aws_acm_certificate\" \"${projectName}\" {\n  domain_name               = \"*.${subDomain}\\${local.current_env.hosted_zone}\"\n  subject_alternative_names = [\"${subDomain}\\${local.current_env.hosted_zone}\"]\n  validation_method         = \"DNS\"\n  provider                  = aws.us-east-1\n}\n\nresource \"aws_route53_record\" \"${projectName}_certificate_validation\" {\n  for_each = {\n    for dvo in aws_acm_certificate.${projectName}.domain_validation_options : dvo.domain_name => {\n      name   = dvo.resource_record_name\n      record = dvo.resource_record_value\n      type   = dvo.resource_record_type\n    }\n  }\n  provider        = aws.us-east-1\n  allow_overwrite = true\n  name            = each.value.name\n  records         = [each.value.record]\n  ttl             = 60\n  type            = each.value.type\n  zone_id         = data.aws_route53_zone.main.zone_id\n}\n\nresource \"aws_acm_certificate_validation\" \"${projectName}\" {\n  provider                = aws.us-east-1\n  certificate_arn         = aws_acm_certificate.${projectName}.arn\n  validation_record_fqdns = [for record in aws_route53_record.${projectName}_certificate_validation : record.fqdn]\n}`\n    : ''\n}\n\n# Cloudfront Distribution\n\nresource \"random_string\" \"${projectName}_cloudfront_header_name\" {\n  length  = 16\n  upper   = false\n  numeric = false\n  special = false\n}\n\nresource \"random_string\" \"${projectName}_cloudfront_header_value\" {\n  length  = 32\n  special = false\n}\n\nresource \"aws_cloudfront_distribution\" \"${projectName}\" {\n  origin {\n    # Remove \"https://\" prefix and \"/\" suffix\n    domain_name = replace(replace(aws_lambda_function_url.${projectName}.function_url, \"https://\", \"\"), \"/\", \"\")\n    origin_id   = aws_lambda_function.${projectName}.function_name\n\n    custom_origin_config {\n      https_port             = 443\n      http_port              = 80\n      origin_protocol_policy = \"https-only\"\n      origin_ssl_protocols   = [\"TLSv1.2\"]\n    }\n\n    custom_header {\n      name  = random_string.${projectName}_cloudfront_header_name.result\n      value = random_string.${projectName}_cloudfront_header_value.result\n    }\n  }\n\n  enabled             = true\n  wait_for_deployment = false\n  is_ipv6_enabled     = true\n  price_class         = \"PriceClass_100\"\n  aliases             = [\"${subDomain}\\${local.current_env.hosted_zone}\"]\n\n  default_cache_behavior {\n    allowed_methods        = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods         = [\"HEAD\", \"GET\"]\n    compress               = true\n    target_origin_id       = aws_lambda_function.${projectName}.function_name\n    viewer_protocol_policy = \"redirect-to-https\"\n    # Managed-CachingDisabled\n    cache_policy_id = \"4135ea2d-6df8-44a3-9df3-4b5a84be39ad\"\n    # Managed-AllViewerExceptHostHeader\n    origin_request_policy_id = \"b689b0a8-53d0-40ab-baf2-68738e2966ac\"\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    acm_certificate_arn      = aws_acm_certificate.${projectName}.arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n}\n${\n  cloudwatchTriggerMinutes !== undefined\n    ? `# Cloudwatch trigger\n\nresource \"aws_lambda_permission\" \"cloudwatch_invoke_${projectName}\" {\n  statement_id  = \"AllowExecutionFromCloudWatch\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.${projectName}.arn\n  principal     = \"events.amazonaws.com\"\n  source_arn    = aws_cloudwatch_event_rule.${projectName}_trigger_rate.arn\n}\n\nresource \"aws_cloudwatch_event_rule\" \"${projectName}_trigger_rate\" {\n  name_prefix         = \"${projectName}.rate-${cloudwatchTriggerMinutes}-minutes.\"\n  schedule_expression = \"rate(${cloudwatchTriggerMinutes} minute${\n    cloudwatchTriggerMinutes > 1 ? 's' : ''\n  })\"\n}\n\nresource \"aws_cloudwatch_event_target\" \"${projectName}_trigger_target\" {\n  rule = aws_cloudwatch_event_rule.${projectName}_trigger_rate.name\n  arn  = aws_lambda_function.${projectName}.arn\n}\n`\n    : ''\n}\n# IAM role\n\nresource \"aws_iam_role\" \"${projectName}_role\" {\n  name = \"${workspaceName}-${projectName}-role\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Principal = {\n          Service = \"lambda.amazonaws.com\"\n        }\n        Effect = \"Allow\"\n      },\n    ]\n  })\n  \n  inline_policy {\n    name   = \"${workspaceName}-${projectName}-extra-policy\"\n    policy = data.aws_iam_policy_document.${projectName}_extra_policy.json\n  }\n}\n\noutput \"${projectName}_role_arn\" {\n  value = aws_iam_role.${projectName}_role.arn\n}\n\n# Cloudwatch logging\n\nresource \"aws_cloudwatch_log_group\" \"${projectName}\" {\n  name = \"/aws/lambda/${workspaceName}-${projectName}\"\n}\n\nresource \"aws_iam_policy\" \"${projectName}_cloudwatch\" {\n  name = \"${workspaceName}-${projectName}-cloudwatch-policy\"\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = [\n          \"logs:CreateLogStream\",\n          \"logs:PutLogEvents\",\n        ]\n        Effect = \"Allow\"\n        Resource = [\n          \"\\${aws_cloudwatch_log_group.${projectName}.arn}\",\n          \"\\${aws_cloudwatch_log_group.${projectName}.arn}:*\",\n        ]\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy_attachment\" \"${projectName}_cloudwatch\" {\n  role       = aws_iam_role.${projectName}_role.name\n  policy_arn = aws_iam_policy.${projectName}_cloudwatch.arn\n}\n${\n  alarmEmail !== undefined\n    ? `\n# Cloudwatch error monitoring\n\nresource \"aws_cloudwatch_log_metric_filter\" \"${projectName}_log_errors\" {\n  name           = \"${workspaceName}-${projectName}-log-error-metric-filter\"\n  pattern        = \"[ts, id, level = \\\\\"ERROR\\\\\", msg]\"\n  log_group_name = aws_cloudwatch_log_group.${projectName}.name\n\n  metric_transformation {\n    name          = \"${workspaceName}-${projectName}-errors\"\n    namespace     = \"${workspaceName}\"\n    value         = \"1\"\n    default_value = \"0\"\n    unit          = \"Count\"\n  }\n}\n\nresource \"aws_cloudwatch_metric_alarm\" \"${projectName}_log_errors\" {\n  alarm_name          = \"${workspaceName}-${projectName}-log-error-metric-alarm\"\n  metric_name         = aws_cloudwatch_log_metric_filter.${projectName}_log_errors.metric_transformation[0].name\n  namespace           = aws_cloudwatch_log_metric_filter.${projectName}_log_errors.metric_transformation[0].namespace\n  evaluation_periods  = 1\n  period              = 3600\n  statistic           = \"Sum\"\n  comparison_operator = \"GreaterThanOrEqualToThreshold\"\n  threshold           = 1\n  actions_enabled     = true\n  alarm_actions       = [aws_sns_topic.${projectName}_log_errors.arn]\n  ok_actions          = [aws_sns_topic.${projectName}_log_errors.arn]\n  treat_missing_data  = \"notBreaching\"\n}\n\nresource \"aws_sns_topic\" \"${projectName}_log_errors\" {\n  name = \"${workspaceName}-${projectName}-log-error-sns-topic\"\n}\n\nresource \"aws_sns_topic_subscription\" \"${projectName}_log_errors\" {\n  endpoint  = \"${alarmEmail}\"\n  protocol  = \"email\"\n  topic_arn = aws_sns_topic.${projectName}_log_errors.arn\n}\n`\n    : ''\n}\n# Dummy source code useful only during the initial setup\nresource \"aws_s3_object\" \"${projectName}_archive\" {\n  bucket         = aws_s3_bucket.code.id\n  key            = \"${projectName}/dist.zip\"\n  content_base64 = \"UEsDBBQACAAIAGaKwlYAAAAAAAAAADYAAAAIACAAaW5kZXguanNVVA0AB3AIemRyCHpkcAh6ZHV4CwABBPUBAAAEFAAAAEutKMgvKinWy0jMS8lJLVKwVUgsrsxLVkgrzUsuyczPU9DQVKjmUlAoSi0pLcpTUFe35qq15gIAUEsHCP0ak1o4AAAANgAAAFBLAQIUAxQACAAIAGaKwlb9GpNaOAAAADYAAAAIACAAAAAAAAAAAACkgQAAAABpbmRleC5qc1VUDQAHcAh6ZHIIemRwCHpkdXgLAAEE9QEAAAQUAAAAUEsFBgAAAAABAAEAVgAAAI4AAAAAAA==\"\n}\n\n`.trim();\n}\n","import {WorkspaceName} from '@src/models';\nimport {lowerCase, pascalCase} from '@src/string_utils';\n\nexport function generateDynamoUserTerraform(workspaceName: WorkspaceName, appName: string): string {\n  const prefixLower = lowerCase(appName);\n  const prefixPascal = `${pascalCase(workspaceName)}${pascalCase(appName)}`;\n  return `\noutput \"${prefixLower}_user_table_name\" {\n  value = aws_dynamodb_table.${prefixLower}_user_table.name\n}\n\noutput \"${prefixLower}_user_index_name\" {\n  value = {\n    for obj in aws_dynamodb_table.${prefixLower}_user_table.global_secondary_index : \"${prefixLower}_user_by_\\${obj.hash_key}\\${length(obj.range_key) > 0 ? \"_sorted_by_\\${obj.range_key}\" : \"\"}\" => obj.name\n  }\n}\n\nresource \"aws_dynamodb_table\" \"${prefixLower}_user_table\" {\n  name         = \"${prefixPascal}User\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"id\"\n\n  attribute {\n    name = \"id\"\n    type = \"S\"\n  }\n}`.trim();\n}\n","import {WorkspaceName} from '@src/models';\nimport {lowerCase, pascalCase} from '@src/string_utils';\n\nexport function generateDynamoUserSessionTerraform(\n  workspaceName: WorkspaceName,\n  appName: string\n): string {\n  const prefixLower = lowerCase(appName);\n  const prefixPascal = `${pascalCase(workspaceName)}${pascalCase(appName)}`;\n  return `output \"${prefixLower}_user_session_table_name\" {\n  value = aws_dynamodb_table.${prefixLower}_user_session_table.name\n}\n\noutput \"${prefixLower}_user_session_index_name\" {\n  value = {\n    for obj in aws_dynamodb_table.${prefixLower}_user_session_table.global_secondary_index : \"${prefixLower}_user_session_by_\\${obj.hash_key}\\${ length(obj.range_key) > 0 ? \"_sorted_by_\\${obj.range_key}\" : \"\" }\" => obj.name\n  }\n}\n\nresource \"aws_dynamodb_table\" \"${prefixLower}_user_session_table\" {\n  name         = \"${prefixPascal}UserSession\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"token\"\n\n  attribute {\n    name = \"token\"\n    type = \"S\"\n  }\n\n  ttl {\n    attribute_name = \"expiresAt\"\n    enabled        = true\n  }\n}`.trim();\n}\n","import {join} from 'node:path';\n\nimport {maybeReadFile, prettyJson, writeRawFile} from '@src/fs';\nimport {ProjectName, WorkspaceFragment, WorkspaceFragmentType, WorkspaceName} from '@src/models';\nimport {DEFAULT_REGION, getProjectsFromWorkspaceFragment} from '@src/project/generate_workspace';\nimport {\n  asBoolean,\n  asMap,\n  asMapArray,\n  asNumber,\n  asString,\n  asStringOrThrow,\n  removeUndefined,\n} from '@src/type_utils';\n\nexport function generateCodeWorkspace(\n  workspaceName: string,\n  workspaceFragments: WorkspaceFragment[]\n): Record<string, unknown> {\n  const projects = workspaceFragments.flatMap(f => getProjectsFromWorkspaceFragment(f));\n  const projectNames = projects.map(p => p.projectName);\n  return {\n    folders: [\n      ...projectNames.map(p => ({path: p})),\n      {path: 'terraform'},\n      {path: '.', name: 'root'},\n    ],\n    settings: {\n      'window.title': `${workspaceName}\\${separator}\\${activeEditorShort}`,\n      'files.exclude': Object.fromEntries([\n        ...projectNames.map(p => [p, true]),\n        ['terraform', true],\n      ]),\n      'editor.acceptSuggestionOnCommitCharacter': false,\n      'editor.suggestSelection': 'first',\n      'vsintellicode.modify.editor.suggestSelection': 'automaticallyOverrodeDefaultValue',\n      'explorer.confirmDelete': false,\n      'git.autofetch': true,\n      'git.confirmSync': false,\n      'typescript.preferences.importModuleSpecifier': 'non-relative',\n      'eslint.lintTask.enable': true,\n      'eslint.useESLintClass': true,\n      'editor.formatOnSave': true,\n      'editor.codeActionsOnSave': {\n        'source.fixAll': 'never',\n        'source.fixAll.eslint': 'explicit',\n      },\n      'editor.defaultFormatter': 'esbenp.prettier-vscode',\n      'editor.linkedEditing': true,\n      'emmet.showExpandedAbbreviation': 'never',\n      'files.associations': {\n        '*.tf': 'terraform',\n      },\n      '[typescript]': {\n        'editor.defaultFormatter': 'esbenp.prettier-vscode',\n      },\n      '[typescriptreact]': {\n        'editor.defaultFormatter': 'esbenp.prettier-vscode',\n      },\n      '[terraform]': {\n        'editor.defaultFormatter': 'hashicorp.terraform',\n      },\n    },\n    extensions: {\n      recommendations: [\n        'dbaeumer.vscode-eslint',\n        'esbenp.prettier-vscode',\n        'VisualStudioExptTeam.vscodeintellicode',\n        'styled-components.vscode-styled-components',\n        'naumovs.color-highlight',\n        'eamodio.gitlens',\n        'hashicorp.terraform',\n      ],\n    },\n  };\n}\n\nexport interface FileHash {\n  path: string;\n  hash: string;\n}\n\nexport interface TerraformEnv {\n  accountId?: string;\n  hostedZone?: string;\n  isDefault?: boolean;\n}\n\nexport interface WorkspaceOptions {\n  workspaceName: WorkspaceName;\n  region: string;\n  envs: Record<string, TerraformEnv>;\n}\n\nexport interface Workspace {\n  fragments: WorkspaceFragment[];\n  version: string;\n  files: FileHash[];\n  options: WorkspaceOptions;\n}\n\nexport async function readWorkspace(workspacePath: string): Promise<Workspace | undefined> {\n  const workspaceContent = await maybeReadFile(join(workspacePath, '.workspace'));\n  if (workspaceContent === undefined) {\n    return undefined;\n  }\n  const workspaceData = asMap(JSON.parse(workspaceContent), {});\n\n  const fragments = removeUndefined(\n    asMapArray(workspaceData['fragments'], []).map<WorkspaceFragment | undefined>(fragData => {\n      const type = asString<WorkspaceFragmentType>(fragData['type']);\n      if (type === undefined) {\n        return undefined;\n      } else if (type === WorkspaceFragmentType.Shared) {\n        const frag: WorkspaceFragment = {type: WorkspaceFragmentType.Shared};\n        return frag;\n      } else if (type === WorkspaceFragmentType.SharedWeb) {\n        const frag: WorkspaceFragment = {type: WorkspaceFragmentType.SharedWeb};\n        return frag;\n      } else if (type === WorkspaceFragmentType.SharedNode) {\n        const frag: WorkspaceFragment = {type: WorkspaceFragmentType.SharedNode};\n        return frag;\n      } else if (type === WorkspaceFragmentType.WebApp) {\n        const alarmEmail = asString(fragData['alarmEmail']);\n        const appName = asStringOrThrow(fragData['appName']);\n        const authenticationData = asMap(fragData['authentication'], {});\n        const enabled = asBoolean(authenticationData['enabled'], false);\n        const subDomain = asStringOrThrow(fragData['subDomain']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.WebApp,\n          alarmEmail,\n          appName,\n          authentication: {enabled},\n          subDomain,\n        };\n        return frag;\n      } else if (type === WorkspaceFragmentType.StaticWebsite) {\n        const websiteName = asStringOrThrow<ProjectName>(fragData['websiteName']);\n        const subDomain = asStringOrThrow(fragData['subDomain']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.StaticWebsite,\n          websiteName,\n          subDomain,\n        };\n        return frag;\n      } else if (type === WorkspaceFragmentType.ApiLambda) {\n        const alarmEmail = asString(fragData['alarmEmail']);\n        const apiName = asStringOrThrow<ProjectName>(fragData['apiName']);\n        const subDomain = asStringOrThrow(fragData['subDomain']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.ApiLambda,\n          alarmEmail,\n          apiName,\n          subDomain,\n        };\n        return frag;\n      } else if (type === WorkspaceFragmentType.NodeScript) {\n        const scriptName = asStringOrThrow<ProjectName>(fragData['scriptName']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.NodeScript,\n          scriptName,\n        };\n        return frag;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      else if (type === WorkspaceFragmentType.StandaloneLambda) {\n        const lambdaName = asStringOrThrow<ProjectName>(fragData['lambdaName']);\n        const alarmEmail = asString(fragData['alarmEmail']);\n        const cloudwatchTriggerMinutes = asNumber(fragData['cloudwatchTriggerMinutes']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.StandaloneLambda,\n          lambdaName,\n          alarmEmail,\n          cloudwatchTriggerMinutes,\n        };\n        return frag;\n      }\n      return undefined;\n    })\n  );\n\n  const version = asStringOrThrow(workspaceData['version']);\n  const files = removeUndefined(\n    asMapArray(workspaceData['files'], []).map<FileHash | undefined>(fileData => {\n      const path = asString(fileData['path']);\n      const hash = asString(fileData['hash']);\n      if (path === undefined || hash === undefined) {\n        return undefined;\n      }\n      return {path, hash};\n    })\n  );\n\n  const optionsData = asMap(workspaceData['options'], {});\n  const workspaceName = asStringOrThrow<WorkspaceName>(optionsData['workspaceName']);\n  const region = asString(optionsData['region'], DEFAULT_REGION);\n  const envs = Object.fromEntries(\n    Object.entries(asMap(optionsData['envs'], {})).map(([name, envData]) => {\n      const envMap = asMap(envData, {});\n      const accountId = asString(envMap['accountId']);\n      const hostedZone = asString(envMap['hostedZone']);\n      return [name, {accountId, hostedZone}];\n    })\n  );\n  const options: WorkspaceOptions = {region, envs, workspaceName};\n\n  return {fragments, version, files, options};\n}\n\nexport async function writeWorkspace(workspacePath: string, workspace: Workspace): Promise<void> {\n  workspace.files.sort((f1, f2) => f1.path.localeCompare(f2.path));\n  await writeRawFile(join(workspacePath, '.workspace'), await prettyJson(workspace));\n}\n","import {execSync} from 'node:child_process';\nimport {join, relative} from 'node:path';\nimport {fileURLToPath} from 'node:url';\n\nimport {listFiles, prettyJs, prettyJson, prettyJsonc, readFile, writeRawFile} from '@src/fs';\nimport {md5} from '@src/hash';\nimport {log} from '@src/logger';\nimport {ProjectName, ProjectType, WorkspaceFragment, WorkspaceFragmentType} from '@src/models';\nimport {generateProject} from '@src/project/generate_project';\nimport {generateGitIgnore} from '@src/project/gitignore';\nimport {generateWorkspacePackageJson} from '@src/project/package_json';\nimport {\n  generateCommonTerraform,\n  generateWorkspaceProjectTerraform,\n} from '@src/project/terraform/all';\nimport {generateDynamoUserTerraform} from '@src/project/terraform/dynamo_user';\nimport {generateDynamoUserSessionTerraform} from '@src/project/terraform/dynamo_user_session';\nimport {WorkspaceProjectTerraformFrontend} from '@src/project/terraform/frontend';\nimport {WorkspaceProjectTerraformLambda} from '@src/project/terraform/lambda';\nimport {\n  FileHash,\n  generateCodeWorkspace,\n  Workspace,\n  WorkspaceOptions,\n  writeWorkspace,\n} from '@src/project/vscode_workspace';\nimport {lowerCase, pascalCase} from '@src/string_utils';\nimport {neverHappens, removeUndefined} from '@src/type_utils';\nimport {PACKAGE_VERSIONS} from '@src/versions';\n\nexport const DEFAULT_REGION = 'eu-west-3';\nconst TEMPLATES_PATH = join(fileURLToPath(import.meta.url), '../templates');\n\ntype Flag = Record<string, string>;\nconst booleanFlag = (bool: boolean): string => (bool ? 'true' : 'false');\n\nexport function hasApi(allFragments: WorkspaceFragment[]): boolean {\n  return (\n    allFragments.find(\n      f => f.type === WorkspaceFragmentType.ApiLambda || f.type === WorkspaceFragmentType.WebApp\n    ) !== undefined\n  );\n}\n\nexport type WorkspaceProjectTerraform =\n  | WorkspaceProjectTerraformLambda\n  | WorkspaceProjectTerraformFrontend\n  | {type: 'no-terraform'};\n\nexport interface WorkspaceProject {\n  projectName: ProjectName;\n  type: ProjectType;\n  fromFragment: WorkspaceFragment;\n  vars: Record<string, string>;\n  flags: (allFragments: WorkspaceFragment[]) => Flag;\n  terraform: WorkspaceProjectTerraform;\n}\n\nfunction fragmentFlags(baseFlags: Flag): (allFragments: WorkspaceFragment[]) => Flag {\n  return (allFragments: WorkspaceFragment[]): Flag => {\n    const workspaceFlags: Flag = {\n      HAS_API: booleanFlag(hasApi(allFragments)),\n    };\n    return {...workspaceFlags, ...baseFlags};\n  };\n}\n\nexport function getProjectsFromWorkspaceFragment(fragment: WorkspaceFragment): WorkspaceProject[] {\n  if (fragment.type === WorkspaceFragmentType.StaticWebsite) {\n    return [\n      {\n        projectName: fragment.websiteName,\n        type: ProjectType.Web,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.websiteName,\n          __APP_NAME__: fragment.websiteName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'frontend',\n          subDomain: fragment.subDomain,\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.StandaloneLambda) {\n    return [\n      {\n        projectName: fragment.lambdaName,\n        type: ProjectType.LambdaFunction,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.lambdaName,\n          __PROJECT_NAME_UPPERCASE__: fragment.lambdaName.toUpperCase(),\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'lambda',\n          api: false,\n          webAppName: undefined,\n          alarmEmail: fragment.alarmEmail,\n          cloudwatchTriggerMinutes: fragment.cloudwatchTriggerMinutes,\n          subDomain: undefined,\n          authentication: undefined,\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.ApiLambda) {\n    return [\n      {\n        projectName: fragment.apiName,\n        type: ProjectType.LambdaApi,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.apiName,\n          __PROJECT_NAME_UPPERCASE__: fragment.apiName.toUpperCase(),\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'lambda',\n          api: true,\n          webAppName: undefined,\n          alarmEmail: fragment.alarmEmail,\n          cloudwatchTriggerMinutes: undefined,\n          subDomain: fragment.subDomain,\n          authentication: undefined,\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.WebApp) {\n    const backendName = `${fragment.appName}_backend` as ProjectName;\n    const frontendName = `${fragment.appName}_frontend` as ProjectName;\n    const vars = {\n      __APP_NAME__: fragment.appName,\n      __APP_NAME_UPPERCASE__: fragment.appName.toUpperCase(),\n      __APP_NAME_PASCALCASE__: pascalCase(fragment.appName),\n    };\n    const flags = fragmentFlags({\n      AUTHENTICATION: booleanFlag(fragment.authentication.enabled),\n    });\n    return [\n      {\n        projectName: frontendName,\n        type: ProjectType.Web,\n        fromFragment: fragment,\n        vars,\n        flags,\n        terraform: {\n          type: 'frontend',\n          subDomain: `static.${fragment.subDomain}`,\n        },\n      },\n      {\n        projectName: backendName,\n        type: ProjectType.LambdaWebApi,\n        fromFragment: fragment,\n        vars,\n        flags,\n        terraform: {\n          type: 'lambda',\n          api: true,\n          webAppName: fragment.appName,\n          alarmEmail: fragment.alarmEmail,\n          cloudwatchTriggerMinutes: undefined,\n          subDomain: fragment.subDomain,\n          authentication: fragment.authentication,\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.NodeScript) {\n    return [\n      {\n        projectName: fragment.scriptName,\n        type: ProjectType.NodeScript,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.scriptName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.SharedNode) {\n    const projectName = 'shared-node' as ProjectName;\n    return [\n      {\n        projectName,\n        type: ProjectType.SharedNode,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: projectName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.SharedWeb) {\n    const projectName = 'shared-web' as ProjectName;\n    return [\n      {\n        projectName,\n        type: ProjectType.SharedWeb,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: projectName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  } else if (fragment.type === WorkspaceFragmentType.Shared) {\n    const projectName = 'shared' as ProjectName;\n    return [\n      {\n        projectName,\n        type: ProjectType.Shared,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: projectName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n  }\n  neverHappens(fragment, `Unknown ProjectType ${(fragment as WorkspaceFragment).type}`);\n}\n\nexport async function generateWorkspace(\n  dst: string,\n  fragments: WorkspaceFragment[],\n  options: WorkspaceOptions,\n  previousWorkspace: Workspace | undefined\n): Promise<void> {\n  const {workspaceName} = options;\n  const projects = fragments.flatMap(f => getProjectsFromWorkspaceFragment(f));\n\n  // Create projects files from templates\n  const projectFiles = await Promise.all(\n    projects.map(\n      async project => await generateProject({dst, project, fragments, options, previousWorkspace})\n    )\n  );\n\n  // Generate workspace root files\n  const SCRIPTS_PATH = join(fileURLToPath(import.meta.url), '../scripts');\n  const writeFile = async (path: string, file: string): Promise<FileHash> =>\n    await writeWorkspaceFile(previousWorkspace, dst, path, file);\n  const workspaceFiles = await Promise.all([\n    // package.json\n    writeFile(\n      'package.json',\n      await prettyJson(generateWorkspacePackageJson(workspaceName, projects))\n    ),\n    // app.code-workspace\n    writeFile(\n      'app.code-workspace',\n      await prettyJsonc(generateCodeWorkspace(workspaceName, fragments))\n    ),\n    // .gitignore\n    writeFile('.gitignore', generateGitIgnore()),\n    // setup.js\n    writeFile('setup.js', await prettyJs(await readFile(join(SCRIPTS_PATH, 'setup.js')))),\n    // deploy.js\n    writeFile(\n      'deploy.js',\n      await prettyJs(\n        await readFile(join(SCRIPTS_PATH, 'deploy.js')).then(res =>\n          res.replaceAll('__WORKSPACE_NAME__', workspaceName)\n        )\n      )\n    ),\n    // build.js\n    writeFile('build.js', await prettyJs(await readFile(join(SCRIPTS_PATH, 'build.js')))),\n  ]);\n\n  // Vscode folder\n  const vscodePath = join(TEMPLATES_PATH, '.vscode');\n  const vscodeFileList = await listFiles(vscodePath);\n  const vscodeFiles = await Promise.all(\n    vscodeFileList.map(async file => {\n      const relativePath = relative(vscodePath, file);\n      const dstPath = join('.vscode', relativePath);\n      const content = await readFile(file);\n      return await writeFile(dstPath, content);\n    })\n  );\n\n  // Terraform folder generation\n  const terraformFiles = await Promise.all([\n    ...fragments\n      .filter(frag => frag.type === WorkspaceFragmentType.WebApp)\n      .filter(frag => frag.authentication.enabled)\n      .flatMap(frag => {\n        return [\n          writeFile(\n            join('terraform', `dynamo_table_${lowerCase(frag.appName)}_user.tf`),\n            addLineBreak(generateDynamoUserTerraform(workspaceName, frag.appName))\n          ),\n          writeFile(\n            join('terraform', `dynamo_table_${lowerCase(frag.appName)}_user_session.tf`),\n            addLineBreak(generateDynamoUserSessionTerraform(workspaceName, frag.appName))\n          ),\n        ];\n      }),\n    writeFile(\n      join('terraform', 'base.tf'),\n      addLineBreak(generateCommonTerraform(projects, options))\n    ),\n    ...projects.map(async p => {\n      const content = generateWorkspaceProjectTerraform(workspaceName, p);\n      if (content === undefined) {\n        return;\n      }\n      const name = `${p.projectName}_terraform`;\n      return await writeFile(join('terraform', `${name}.tf`), addLineBreak(content));\n    }),\n  ]);\n\n  await writeWorkspace(dst, {\n    files: removeUndefined([\n      ...projectFiles.flat(),\n      ...workspaceFiles,\n      ...terraformFiles,\n      ...vscodeFiles,\n    ]),\n    fragments,\n    version: PACKAGE_VERSIONS.project,\n    options,\n  });\n\n  // Run setup.js\n  log('Running post install script');\n  const commands = [`cd ${dst}`, `node setup.js`, `git init`];\n  execSync(commands.join(' && '), {stdio: ['ignore', 'inherit', 'inherit']});\n}\n\nexport async function writeWorkspaceFile(\n  workspace: Workspace | undefined,\n  root: string,\n  path: string,\n  file: string\n): Promise<FileHash> {\n  const fileLines = file.split('\\n');\n  const fileToHash = fileLines.filter(line => !line.endsWith(' // @matthis/ignore')).join('\\n');\n  const newHash = md5(fileToHash);\n  const oldHash = workspace?.files.find(f => f.path === path)?.hash;\n  // Only write the file if it is different since last time we've generated the project.\n  // Prevent needlessly overwriting changes made in the project in between.\n  if (newHash !== oldHash) {\n    const fileToWrite = fileLines.map(l => l.replaceAll(' // @matthis/ignore', '')).join('\\n');\n    await writeRawFile(join(root, path), fileToWrite);\n  }\n  return {path, hash: newHash};\n}\n\nconst addLineBreak = (content: string): string =>\n  content.endsWith('\\n') ? content : `${content}\\n`;\n","export function generateGitIgnore(): string {\n  return `\n.DS_Store\nnode_modules\nbuild\ndist\ntmp\nyarn-error.log\n.yarn-warnings.log\nyarn.lock\nterraform/.terraform\nterraform/.terraform*\nterraform/*.tfstate.backup\nterraform/archives\n*/log\n/shared/src/env.ts\n/.build.lock\n    `.trim();\n}\n","import {createHash} from 'node:crypto';\n\nexport function md5(data: string | Buffer): string {\n  const content = typeof data === 'string' ? data : data.toString();\n  return createHash('md5').update(content).digest('hex');\n}\n\nexport function hashPassword(password: string, salt: string): string {\n  return createHash('sha256').update(`${password}${salt}`).digest('base64');\n}\n","import {prompt} from 'prompts';\n\nimport {ProjectName, WebAppAuthentication, WorkspaceName} from '@src/models';\nimport {DEFAULT_REGION} from '@src/project/generate_workspace';\nimport {asStringOrThrow} from '@src/type_utils';\n\n//\n// WORKSPACE NAME\n//\n\nexport async function askForWorkspaceName(): Promise<WorkspaceName> {\n  const {workspaceName} = await prompt({\n    type: 'text',\n    name: 'workspaceName',\n    message: 'Workspace name',\n    validate: (v: string) => v.length > 0,\n  });\n  return asStringOrThrow<WorkspaceName>(workspaceName);\n}\n\n//\n// WORKSPACE REGION\n//\n\nexport async function askForWorkspaceRegion(): Promise<string> {\n  const {workspaceRegion} = await prompt({\n    type: 'text',\n    name: 'workspaceRegion',\n    message: 'AWS Region',\n    initial: DEFAULT_REGION,\n    validate: (v: string) => v.length > 0,\n  });\n  return asStringOrThrow(workspaceRegion);\n}\n\n//\n// PROJECT NAME\n//\n\nconst VALID_PROJECT_NAME = /^[a-zA-Z0-9_]+$/u;\n\nexport async function askForProjectName(\n  question: string,\n  defaultValue: string,\n  takenNames: string[]\n): Promise<ProjectName> {\n  let initial = defaultValue;\n  if (takenNames.includes(initial)) {\n    let index = 2;\n    while (takenNames.includes(initial)) {\n      initial = `${defaultValue}_${index}`;\n      index++;\n    }\n  }\n\n  const {value} = await prompt({\n    type: 'text',\n    name: 'value',\n    message: question,\n    initial,\n    validate: (v: string) => v.length > 0,\n  });\n  if (typeof value !== 'string') {\n    throw new Error(`${question} is required`);\n  }\n  if (!VALID_PROJECT_NAME.test(value)) {\n    throw new Error(`Invalid project name \"${value}\". Allowed characters are a-z, A-Z, 0-9 and _`);\n  }\n  if (takenNames.includes(value)) {\n    throw new Error(`${value} is taken`);\n  }\n  return value as ProjectName;\n}\n\n//\n// ALARM EMAIL\n//\n\nexport async function askForAlarmEmail(defaultVal: boolean): Promise<string | undefined> {\n  const alarm = await prompt({\n    type: 'confirm',\n    name: 'value',\n    message: 'Add an alarm when an error is logged?',\n    initial: defaultVal,\n  });\n  if (alarm.value !== true) {\n    return undefined;\n  }\n  const email = await prompt({\n    type: 'text',\n    name: 'value',\n    message: 'Which email to send the alarm to?',\n  });\n  if (typeof email.value !== 'string') {\n    return undefined;\n  }\n  return email.value;\n}\n\nexport async function askForAlarmEmailValue(): Promise<string | undefined> {\n  const email = await prompt({\n    type: 'text',\n    name: 'value',\n    message: 'Enter the email the alarm will be sent to (leave empty for no alarm).',\n  });\n  if (typeof email.value !== 'string') {\n    return undefined;\n  }\n  return email.value;\n}\n\n//\n// DOMAIN NAME\n//\n\nexport async function askForSubdomain(): Promise<string> {\n  const subdomain = await prompt({\n    type: 'text',\n    name: 'value',\n    message: 'Subdomain (leave empty for root domain).',\n  });\n  const value = subdomain.value;\n  if (typeof value !== 'string') {\n    throw new Error('Subdomain is mandatory');\n  }\n  return value.length === 0 || value.endsWith('.') ? value : `${value}.`;\n}\n\n//\n// AUTHENTICATION\n//\n\nexport async function askForAuthentication(): Promise<WebAppAuthentication> {\n  const authenticationEnabled = await prompt({\n    type: 'confirm',\n    name: 'value',\n    message: 'Use authentication?',\n  });\n  return {enabled: authenticationEnabled.value === true};\n}\n\n//\n// CLOUDWATCH TRIGGER\n//\n\nexport async function askForCloudwatchTrigger(): Promise<number | undefined> {\n  const trigger = await prompt({\n    type: 'confirm',\n    name: 'value',\n    message: 'Add a Cloudwatch trigger?',\n    initial: true,\n  });\n  if (trigger.value !== true) {\n    return undefined;\n  }\n  return await askForCloudwatchTriggerValue();\n}\n\nexport async function askForCloudwatchTriggerValue(): Promise<number | undefined> {\n  const minutes = await prompt({\n    type: 'text',\n    name: 'value',\n    message: 'Enter the trigger period in minutes (leave empty for no trigger)',\n    initial: 1,\n  });\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const minutesValue = parseFloat(minutes.value);\n  if (Number.isNaN(minutesValue) || minutesValue <= 0) {\n    return undefined;\n  }\n  return minutesValue;\n}\n\n//\n// TERRAFORM ENV\n//\n\nexport async function askForTerraformEnvName(): Promise<string | undefined> {\n  const domain = await prompt({\n    type: 'text',\n    name: 'value',\n    message: 'Enter terraform env name',\n  });\n  if (typeof domain.value !== 'string' || domain.value.length === 0) {\n    return undefined;\n  }\n  return domain.value;\n}\n\nexport async function askForTerraformAccountId(): Promise<string | undefined> {\n  const domain = await prompt({\n    type: 'text',\n    name: 'value',\n    message: 'Enter AWS account ID',\n  });\n  if (typeof domain.value !== 'string' || domain.value.length === 0) {\n    return undefined;\n  }\n  return domain.value;\n}\n\nexport async function askForTerraformEnvIsDefault(): Promise<boolean | undefined> {\n  const enabled = await prompt({\n    type: 'confirm',\n    name: 'value',\n    message: 'Is it the default env?',\n    initial: true,\n  });\n  return enabled.value === true;\n}\n\nexport async function askForTerraformHostedZone(): Promise<string> {\n  const hostedZone = await prompt({\n    type: 'text',\n    name: 'value',\n    message: 'Hosted zone',\n  });\n  const value = hostedZone.value;\n  if (typeof value !== 'string' || value.length === 0) {\n    throw new Error('Hosted zone is mandatory');\n  }\n  return value;\n}\n","import {prompt} from 'prompts';\n\nimport {WorkspaceFragment, WorkspaceFragmentType} from '@src/models';\nimport {\n  askForAlarmEmail,\n  askForAuthentication,\n  askForCloudwatchTrigger,\n  askForProjectName,\n  askForSubdomain,\n} from '@src/project/ask_for_common';\nimport {getProjectsFromWorkspaceFragment} from '@src/project/generate_workspace';\nimport {neverHappens} from '@src/type_utils';\n\nconst I_AM_DONE = 'i_am_done';\n\ntype SelectableWorkspaceFragmentType = Exclude<\n  WorkspaceFragmentType,\n  WorkspaceFragmentType.Shared | WorkspaceFragmentType.SharedNode | WorkspaceFragmentType.SharedWeb\n>;\n\nconst WorkspaceFragmentTypeToString: Record<SelectableWorkspaceFragmentType, string> = {\n  [WorkspaceFragmentType.WebApp]: 'Web App',\n  [WorkspaceFragmentType.StaticWebsite]: 'Static Website',\n  [WorkspaceFragmentType.StandaloneLambda]: 'Standalone Lambda',\n  [WorkspaceFragmentType.ApiLambda]: 'API Lambda',\n  [WorkspaceFragmentType.NodeScript]: 'Node Script',\n};\n\nexport async function askForNewWorkspaceFragment(\n  frags: WorkspaceFragment[]\n): Promise<WorkspaceFragment[]> {\n  const takenNames = [\n    'terraform',\n    'shared',\n    'shared-web',\n    'shared-node',\n    ...frags.flatMap(frag => getProjectsFromWorkspaceFragment(frag).map(p => p.projectName)),\n  ];\n\n  const {workspaceFragmentType} = await prompt({\n    type: 'select',\n    name: 'workspaceFragmentType',\n    message: 'Choose a type of project to add to the workspace',\n    choices: [\n      ...Object.entries(WorkspaceFragmentTypeToString).map(([value, title]) => ({value, title})),\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n  if (workspaceFragmentType === undefined || workspaceFragmentType === I_AM_DONE) {\n    return frags;\n  }\n\n  const type = workspaceFragmentType as SelectableWorkspaceFragmentType;\n\n  if (type === WorkspaceFragmentType.StaticWebsite) {\n    const websiteName = await askForProjectName('Website project name', 'website', takenNames);\n    const subDomain = await askForSubdomain();\n    return [...frags, {type, websiteName, subDomain}];\n  } else if (type === WorkspaceFragmentType.StandaloneLambda) {\n    const lambdaName = await askForProjectName('Lambda project name', 'lambda', takenNames);\n    const alarmEmail = await askForAlarmEmail(true);\n    const cloudwatchTriggerMinutes = await askForCloudwatchTrigger();\n    return [...frags, {type, lambdaName, alarmEmail, cloudwatchTriggerMinutes}];\n  } else if (type === WorkspaceFragmentType.ApiLambda) {\n    const apiName = await askForProjectName('API name', 'api', takenNames);\n    const alarmEmail = await askForAlarmEmail(false);\n    const subDomain = await askForSubdomain();\n    return [...frags, {type, apiName, alarmEmail, subDomain}];\n  } else if (type === WorkspaceFragmentType.WebApp) {\n    const appName = await askForProjectName('App name', 'app', takenNames);\n    const alarmEmail = await askForAlarmEmail(false);\n    const subDomain = await askForSubdomain();\n    const authentication = await askForAuthentication();\n    return [...frags, {type, appName, alarmEmail, subDomain, authentication}];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  else if (type === WorkspaceFragmentType.NodeScript) {\n    const scriptName = await askForProjectName('Script project name', 'script', takenNames);\n    return [...frags, {type, scriptName}];\n  }\n  neverHappens(type, `Unknown WorkspaceFragmentType \"${type}\"`);\n}\n","import {prompt} from 'prompts';\n\nimport {\n  askForTerraformAccountId,\n  askForTerraformEnvIsDefault,\n  askForTerraformEnvName,\n  askForTerraformHostedZone,\n} from '@src/project/ask_for_common';\nimport {TerraformEnv} from '@src/project/vscode_workspace';\n\nconst I_AM_DONE = 'i_am_done';\n\nexport async function askForTerraformEnvUpdate(\n  envs: Record<string, TerraformEnv>\n): Promise<Record<string, TerraformEnv>> {\n  // Ask which project they want to update (get the index)\n  const {envName} = await prompt({\n    type: 'select',\n    name: 'envName',\n    message: 'Which env do you want to update',\n    choices: [\n      ...Object.keys(envs).map(name => ({value: name, title: name})),\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n  const env = envs[envName];\n  if (!env) {\n    return envs;\n  }\n\n  // Ask for the updates\n  let hasChanged = true;\n  let newEnvs = envs;\n  while (hasChanged) {\n    const nextNewEnvs = await askForWorkspaceEnvUpdate(envName as string, newEnvs);\n    hasChanged = JSON.stringify(nextNewEnvs) !== JSON.stringify(newEnvs);\n    newEnvs = nextNewEnvs;\n  }\n\n  // Update the envs\n  return newEnvs;\n}\n\nasync function askForWorkspaceEnvUpdate(\n  envName: string,\n  envs: Record<string, TerraformEnv>\n): Promise<Record<string, TerraformEnv>> {\n  const env = envs[envName];\n  if (!env) {\n    return envs;\n  }\n  const {accountId, hostedZone} = env;\n  const defaultEnv = Object.entries(envs).find(([_, {isDefault}]) => isDefault)?.[0];\n  const {attribute} = await prompt({\n    type: 'select',\n    name: 'attribute',\n    message: 'What do you want to update?',\n    choices: [\n      {title: `Name of the env: ${envName}`, value: 'envName'},\n      {title: `AWS account ID: ${accountId ?? '<not set>'}`, value: 'accountId'},\n      {\n        title: `Is it the default env?: default env is ${defaultEnv ?? 'not set'}`,\n        value: 'isDefault',\n      },\n      {title: `Hosted zone: ${hostedZone}`, value: 'hostedZone'},\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n\n  if (attribute === undefined || attribute === I_AM_DONE) {\n    return envs;\n  }\n\n  if (attribute === 'envName') {\n    const newEnvName = (await askForTerraformEnvName()) ?? envName;\n    return Object.fromEntries([\n      ...Object.entries(envs).filter(([name]) => name !== envName),\n      [newEnvName, env],\n    ]);\n  }\n\n  if (attribute === 'accountId') {\n    const accountId = await askForTerraformAccountId();\n    return {...envs, [envName]: {...env, accountId}};\n  }\n\n  if (attribute === 'isDefault') {\n    const isDefault = await askForTerraformEnvIsDefault();\n    return {...envs, [envName]: {...env, isDefault}};\n  }\n\n  if (attribute === 'hostedZone') {\n    const hostedZone = await askForTerraformHostedZone();\n    return {...envs, [envName]: {...env, hostedZone}};\n  }\n\n  return envs;\n}\n","import {prompt} from 'prompts';\n\nimport {WorkspaceFragment, WorkspaceFragmentRegistry, WorkspaceFragmentType} from '@src/models';\nimport {\n  askForAlarmEmailValue,\n  askForAuthentication,\n  askForCloudwatchTriggerValue,\n  askForSubdomain,\n} from '@src/project/ask_for_common';\nimport {neverHappens} from '@src/type_utils';\n\nconst I_AM_DONE = 'i_am_done';\n\nexport async function askForWorkspaceUpdate(\n  frags: WorkspaceFragment[]\n): Promise<WorkspaceFragment[]> {\n  // Ask which project they want to update (get the index)\n  const {workspaceFragmentIndex} = await prompt({\n    type: 'select',\n    name: 'workspaceFragmentIndex',\n    message: 'Which project do you want to update',\n    choices: [\n      ...frags.map((frag, index) => ({value: index, title: workspaceFragmentString(frag)})),\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n  if (workspaceFragmentIndex === undefined || workspaceFragmentIndex === I_AM_DONE) {\n    return frags;\n  }\n\n  // Retrieve the workspace fragment\n  const index = workspaceFragmentIndex as number;\n  const frag = frags[index];\n  if (!frag) {\n    return frags;\n  }\n\n  // Ask for the updates\n  let hasChanged = true;\n  let newFrag = frag;\n  while (hasChanged) {\n    const nextNewFrag = await askForWorkspaceFragmentUpdate(newFrag);\n    hasChanged = nextNewFrag !== newFrag;\n    newFrag = nextNewFrag;\n  }\n\n  // Update the workspace\n  const newFrags = [...frags];\n  newFrags[index] = newFrag;\n  return newFrags;\n}\n\nasync function askForWorkspaceFragmentUpdate(frag: WorkspaceFragment): Promise<WorkspaceFragment> {\n  // Base fragments can not be updated\n  if (\n    frag.type === WorkspaceFragmentType.Shared ||\n    frag.type === WorkspaceFragmentType.SharedNode ||\n    frag.type === WorkspaceFragmentType.SharedWeb\n  ) {\n    return frag;\n  }\n\n  if (frag.type === WorkspaceFragmentType.StaticWebsite) {\n    return await askForStaticWebsiteFragmentUpdate(frag);\n  } else if (frag.type === WorkspaceFragmentType.StandaloneLambda) {\n    return await askForStandaloneLambdaFragmentUpdate(frag);\n  } else if (frag.type === WorkspaceFragmentType.ApiLambda) {\n    return await askForApiLambdaFragmentUpdate(frag);\n  } else if (frag.type === WorkspaceFragmentType.WebApp) {\n    return await askForWebAppFragmentUpdate(frag);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  else if (frag.type === WorkspaceFragmentType.NodeScript) {\n    return await askForNodeScriptFragmentUpdate(frag);\n  }\n  neverHappens(frag);\n}\n\nasync function askForStaticWebsiteFragmentUpdate(\n  frag: WorkspaceFragmentRegistry['static-website']\n): Promise<WorkspaceFragmentRegistry['static-website']> {\n  const {type, websiteName, subDomain} = frag;\n  const {attribute} = await prompt({\n    type: 'select',\n    name: 'attribute',\n    message: 'What do you want to update?',\n    choices: [\n      {title: `Subdomain: \"${subDomain}\"`, value: 'subDomain'},\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n\n  if (attribute === undefined || attribute === I_AM_DONE) {\n    return frag;\n  }\n\n  if (attribute === 'subDomain') {\n    const subDomain = await askForSubdomain();\n    return {type, websiteName, subDomain};\n  }\n\n  return frag;\n}\n\nasync function askForStandaloneLambdaFragmentUpdate(\n  frag: WorkspaceFragmentRegistry['standalone-lambda']\n): Promise<WorkspaceFragmentRegistry['standalone-lambda']> {\n  const {type, lambdaName, alarmEmail, cloudwatchTriggerMinutes} = frag;\n  const {attribute} = await prompt({\n    type: 'select',\n    name: 'attribute',\n    message: 'What do you want to update?',\n    choices: [\n      {title: `Alarm email: ${alarmEmail ?? '<not set>'}`, value: 'alarmEmail'},\n      {\n        title: `Cloudwatch trigger (in min): ${cloudwatchTriggerMinutes ?? '<not set>'}`,\n        value: 'cloudwatchTriggerMinutes',\n      },\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n\n  if (attribute === undefined || attribute === I_AM_DONE) {\n    return frag;\n  }\n\n  if (attribute === 'alarmEmail') {\n    const alarmEmail = await askForAlarmEmailValue();\n    return {type, lambdaName, alarmEmail, cloudwatchTriggerMinutes};\n  }\n\n  if (attribute === 'cloudwatchTriggerMinutes') {\n    const cloudwatchTriggerMinutes = await askForCloudwatchTriggerValue();\n    return {type, lambdaName, alarmEmail, cloudwatchTriggerMinutes};\n  }\n\n  return frag;\n}\n\nasync function askForApiLambdaFragmentUpdate(\n  frag: WorkspaceFragmentRegistry['api-lambda']\n): Promise<WorkspaceFragmentRegistry['api-lambda']> {\n  const {type, apiName, alarmEmail, subDomain} = frag;\n  const {attribute} = await prompt({\n    type: 'select',\n    name: 'attribute',\n    message: 'What do you want to update?',\n    choices: [\n      {title: `Subdomain: \"${subDomain}\"`, value: 'subDomain'},\n      {title: `Alarm email: ${alarmEmail ?? '<not set>'}`, value: 'alarmEmail'},\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n\n  if (attribute === undefined || attribute === I_AM_DONE) {\n    return frag;\n  }\n\n  if (attribute === 'subDomain') {\n    const subDomain = await askForSubdomain();\n    return {type, apiName, alarmEmail, subDomain};\n  }\n\n  if (attribute === 'alarmEmail') {\n    const alarmEmail = await askForAlarmEmailValue();\n    return {type, apiName, alarmEmail, subDomain};\n  }\n\n  return frag;\n}\n\nasync function askForWebAppFragmentUpdate(\n  frag: WorkspaceFragmentRegistry['web-app']\n): Promise<WorkspaceFragmentRegistry['web-app']> {\n  const {type, appName, alarmEmail, authentication, subDomain} = frag;\n  const {attribute} = await prompt({\n    type: 'select',\n    name: 'attribute',\n    message: 'What do you want to update?',\n    choices: [\n      {title: `Subdomain: \"${subDomain}\"`, value: 'subDomain'},\n      {title: `Alarm email: ${alarmEmail ?? '<not set>'}`, value: 'alarmEmail'},\n      {title: `Authentication: ${authentication.enabled ? 'yes' : 'no'}`, value: 'authentication'},\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n\n  if (attribute === undefined || attribute === I_AM_DONE) {\n    return frag;\n  }\n\n  if (attribute === 'subDomain') {\n    const subDomain = await askForSubdomain();\n    return {type, appName, alarmEmail, authentication, subDomain};\n  }\n\n  if (attribute === 'alarmEmail') {\n    const alarmEmail = await askForAlarmEmailValue();\n    return {type, appName, alarmEmail, authentication, subDomain};\n  }\n\n  if (attribute === 'authentication') {\n    const authentication = await askForAuthentication();\n    return {type, appName, alarmEmail, authentication, subDomain};\n  }\n\n  return frag;\n}\n\nasync function askForNodeScriptFragmentUpdate(\n  frag: WorkspaceFragmentRegistry['node-script']\n): Promise<WorkspaceFragmentRegistry['node-script']> {\n  // const {type, scriptName} = frag;\n  const {attribute} = await prompt({\n    type: 'select',\n    name: 'attribute',\n    message: 'What do you want to update?',\n    choices: [{title: `I'm done`, value: I_AM_DONE}],\n  });\n\n  if (attribute === undefined || attribute === I_AM_DONE) {\n    return frag;\n  }\n\n  return frag;\n}\n\nfunction workspaceFragmentString(frag: WorkspaceFragment): string {\n  if (frag.type === WorkspaceFragmentType.Shared) {\n    return 'shared';\n  } else if (frag.type === WorkspaceFragmentType.SharedNode) {\n    return 'shared-node';\n  } else if (frag.type === WorkspaceFragmentType.SharedWeb) {\n    return 'shared-web';\n  } else if (frag.type === WorkspaceFragmentType.ApiLambda) {\n    return `${frag.apiName} (lambda api)`;\n  } else if (frag.type === WorkspaceFragmentType.NodeScript) {\n    return `${frag.scriptName} (node script)`;\n  } else if (frag.type === WorkspaceFragmentType.StandaloneLambda) {\n    return `${frag.lambdaName} (lambda function)`;\n  } else if (frag.type === WorkspaceFragmentType.StaticWebsite) {\n    return `${frag.websiteName} (static website)`;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  else if (frag.type === WorkspaceFragmentType.WebApp) {\n    return `${frag.appName} (web app)`;\n  }\n  neverHappens(frag);\n}\n","import {prompt} from 'prompts';\n\nimport {WorkspaceFragment} from '@src/models';\nimport {askForNewTerraformEnv} from '@src/project/ask_for_new_terraform_env';\nimport {askForNewWorkspaceFragment} from '@src/project/ask_for_new_workspace_fragment';\nimport {askForTerraformEnvUpdate} from '@src/project/ask_for_terraform_env_update';\nimport {askForWorkspaceUpdate} from '@src/project/ask_for_workspace_update';\nimport {TerraformEnv} from '@src/project/vscode_workspace';\n\nconst I_AM_DONE = 'i_am_done';\n\nexport async function askForWorkspaceChanges(opts: {\n  frags: WorkspaceFragment[];\n  envs: Record<string, TerraformEnv>;\n}): Promise<{frags: WorkspaceFragment[]; envs: Record<string, TerraformEnv>}> {\n  const {frags, envs} = opts;\n  const {action} = await prompt({\n    type: 'select',\n    name: 'action',\n    message: 'What do you want to do',\n    choices: [\n      {title: `Add a project`, value: 'add-project'},\n      {title: `Update a project`, value: 'update-project'},\n      {title: `Add env`, value: 'add-env'},\n      {title: `Update env`, value: 'update-env'},\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n\n  if (action === undefined || action === I_AM_DONE) {\n    return {frags, envs};\n  }\n\n  if (action === 'add-project') {\n    const newFrags = await askForNewWorkspaceFragment(frags);\n    return await askForWorkspaceChanges({frags: newFrags, envs});\n  }\n\n  if (action === 'update-project') {\n    const newFrags = await askForWorkspaceUpdate(frags);\n    return await askForWorkspaceChanges({frags: newFrags, envs});\n  }\n\n  if (action === 'add-env') {\n    const newEnvs = await askForNewTerraformEnv(envs);\n    return await askForWorkspaceChanges({frags, envs: newEnvs});\n  }\n\n  if (action === 'update-env') {\n    const newEnvs = await askForTerraformEnvUpdate(envs);\n    return await askForWorkspaceChanges({frags, envs: newEnvs});\n  }\n\n  return {frags, envs};\n}\n","import {\n  askForTerraformAccountId,\n  askForTerraformEnvIsDefault,\n  askForTerraformEnvName,\n  askForTerraformHostedZone,\n} from '@src/project/ask_for_common';\nimport {TerraformEnv} from '@src/project/vscode_workspace';\n\nexport async function askForNewTerraformEnv(\n  envs: Record<string, TerraformEnv>\n): Promise<Record<string, TerraformEnv>> {\n  const name = await askForTerraformEnvName();\n  if (name === undefined) {\n    return envs;\n  }\n  const accountId = await askForTerraformAccountId();\n  const isDefault = await askForTerraformEnvIsDefault();\n  const hostedZone = await askForTerraformHostedZone();\n  if (name in envs) {\n    throw new Error(`env ${name} already exists`);\n  }\n  return {...envs, [name]: {accountId, hostedZone, isDefault}};\n}\n","import {mkdir} from 'node:fs/promises';\nimport {join} from 'node:path';\n\nimport {error} from '@src/logger';\nimport {\n  WorkspaceFragment,\n  WorkspaceFragmentRegistry,\n  WorkspaceFragmentType,\n  WorkspaceName,\n} from '@src/models';\nimport {askForWorkspaceName, askForWorkspaceRegion} from '@src/project/ask_for_common';\nimport {askForWorkspaceChanges} from '@src/project/ask_for_workspace_fragments';\nimport {generateWorkspace} from '@src/project/generate_workspace';\nimport {readWorkspace, WorkspaceOptions} from '@src/project/vscode_workspace';\nimport {neverHappens} from '@src/type_utils';\n\nasync function initProject(): Promise<void> {\n  let workspaceName: WorkspaceName;\n  let workspacePath = process.cwd();\n  let frags: WorkspaceFragment[] = [];\n  let workspaceOptions: WorkspaceOptions;\n\n  // Check if we are already in a workspace, otherwise ask for the workspace name\n  const previousWorkspace = await readWorkspace(workspacePath);\n  const newProject = previousWorkspace === undefined;\n\n  if (newProject) {\n    console.log('----------------------------------');\n    console.log('Ready to create a new workspace.');\n    console.log(`A new directory ${workspacePath}/<workspace-name> will be created`);\n    console.log('----------------------------------');\n    workspaceName = await askForWorkspaceName();\n    workspacePath = join(workspacePath, workspaceName);\n    workspaceOptions = {workspaceName, region: await askForWorkspaceRegion(), envs: {}};\n    await mkdir(workspacePath);\n  } else {\n    workspaceName = previousWorkspace.options.workspaceName;\n    console.log('----------------------------------');\n    console.log(`Existing project \"${workspaceName}\" detected.`);\n    console.log(`We can update it if you'd like.`);\n    console.log('----------------------------------');\n    workspaceOptions = previousWorkspace.options;\n    frags = removeBaseFragments(previousWorkspace.fragments);\n  }\n\n  // Ask for changes on the workspace\n  while (true) {\n    try {\n      const res = await askForWorkspaceChanges({frags, envs: workspaceOptions.envs});\n      frags = res.frags;\n      workspaceOptions.envs = res.envs;\n      break;\n    } catch (err: unknown) {\n      error(String(err));\n    }\n  }\n\n  // Build summary of workspace\n  const workspaceSummary = frags.map(f => fragmentDescription(f)).join('\\n');\n  const workspaceOptionsSumary = Object.entries(workspaceOptions.envs)\n    .sort(([e1], [e2]) => e1.localeCompare(e2))\n    .map(([name, env]) => {\n      const extraInfo: string[] = [];\n      if (env.accountId !== undefined) {\n        extraInfo.push(`AWS account ${env.accountId}`);\n      }\n      if (env.hostedZone !== undefined) {\n        extraInfo.push(`Hosted zone ${env.hostedZone}`);\n      }\n      let extraString = extraInfo.join(', ');\n      if (env.isDefault) {\n        extraString += ' (default)';\n      }\n      if (extraString.length > 0) {\n        extraString = `: ${extraString}`;\n      }\n      return `- ${name}${extraString}`;\n    })\n    .join('\\n');\n\n  // Print Recap\n  if (newProject) {\n    console.log('----------------------------------');\n    console.log(`Project \"${workspaceName}\" created`);\n    console.log(workspaceSummary);\n    console.log('----------------------------------');\n    console.log(`Terraform prepared in region ${workspaceOptions.region}`);\n    console.log(workspaceOptionsSumary);\n    console.log('----------------------------------');\n  } else {\n    console.log('----------------------------------');\n    console.log(`Project \"${workspaceName}\" updated`);\n    console.log(workspaceSummary);\n    console.log('----------------------------------');\n    console.log(`Terraform prepared in region ${workspaceOptions.region}`);\n    console.log(workspaceOptionsSumary);\n    console.log('----------------------------------');\n  }\n\n  // Generate/update the project\n  await generateWorkspace(\n    workspacePath,\n    refreshBaseFragments(frags),\n    workspaceOptions,\n    previousWorkspace\n  );\n\n  // Final instructions\n  if (newProject) {\n    console.log('----------------------------------');\n    console.log(`Next steps:`);\n    console.log(`- Ensure you AWS credentials are up to date and for the correct account`);\n    console.log(\n      `- Initialize the infrastructure: cd ${join(workspaceName, 'terraform')}; terraform init; terraform apply`\n    );\n    console.log(`- Start the project: cd ..; code app.code-workspace; yarn watch`);\n    console.log('----------------------------------');\n  } else {\n    console.log('----------------------------------');\n    console.log(`Next steps:`);\n    console.log(`- Review the changes made by the update and run \\`terraform apply\\` if needed`);\n    console.log(`- Start the project: code app.code-workspace; yarn watch`);\n    console.log('----------------------------------');\n  }\n}\n\ntype BaseFragment =\n  | WorkspaceFragmentRegistry['shared']\n  | WorkspaceFragmentRegistry['shared-node']\n  | WorkspaceFragmentRegistry['shared-web'];\ntype NonBaseFragment = Exclude<WorkspaceFragment, BaseFragment>;\n\nfunction removeBaseFragments(frags: WorkspaceFragment[]): NonBaseFragment[] {\n  return frags.filter(\n    frag =>\n      ![\n        WorkspaceFragmentType.Shared,\n        WorkspaceFragmentType.SharedNode,\n        WorkspaceFragmentType.SharedWeb,\n      ].includes(frag.type)\n  ) as NonBaseFragment[];\n}\n\nfunction refreshBaseFragments(frags: WorkspaceFragment[]): WorkspaceFragment[] {\n  // Remove base fragments\n  const newFrags: WorkspaceFragment[] = removeBaseFragments(frags);\n\n  // Analyze what type of base fragments we need\n  let needSharedWeb = false;\n  let needSharedNode = false;\n  for (const frag of frags) {\n    if (\n      frag.type === WorkspaceFragmentType.Shared ||\n      frag.type === WorkspaceFragmentType.SharedNode ||\n      frag.type === WorkspaceFragmentType.SharedWeb\n    ) {\n      // should never happen\n    } else if (\n      frag.type === WorkspaceFragmentType.ApiLambda ||\n      frag.type === WorkspaceFragmentType.NodeScript ||\n      frag.type === WorkspaceFragmentType.StandaloneLambda\n    ) {\n      needSharedNode = true;\n    } else if (frag.type === WorkspaceFragmentType.WebApp) {\n      needSharedNode = true;\n      needSharedWeb = true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    else if (frag.type === WorkspaceFragmentType.StaticWebsite) {\n      needSharedWeb = true;\n    } else {\n      neverHappens(frag);\n    }\n  }\n\n  // Add the necessary fragments\n  newFrags.push({type: WorkspaceFragmentType.Shared});\n  if (needSharedNode) {\n    newFrags.push({type: WorkspaceFragmentType.SharedNode});\n  }\n  if (needSharedWeb) {\n    newFrags.push({type: WorkspaceFragmentType.SharedWeb});\n  }\n  return newFrags;\n}\n\nfunction fragmentDescription(frag: WorkspaceFragment): string {\n  if (frag.type === WorkspaceFragmentType.Shared) {\n    return 'shared';\n  } else if (frag.type === WorkspaceFragmentType.SharedNode) {\n    return 'shared-node';\n  } else if (frag.type === WorkspaceFragmentType.SharedWeb) {\n    return 'shared-web';\n  } else if (frag.type === WorkspaceFragmentType.ApiLambda) {\n    const alarm = frag.alarmEmail === undefined ? '' : `, errors alarm sent to ${frag.alarmEmail}`;\n    return `${frag.apiName}: lambda API, subdomain: \"${frag.subDomain}\"${alarm}`;\n  } else if (frag.type === WorkspaceFragmentType.NodeScript) {\n    return `${frag.scriptName}: node script`;\n  } else if (frag.type === WorkspaceFragmentType.StandaloneLambda) {\n    const alarm = frag.alarmEmail === undefined ? '' : `, errors alarm sent to ${frag.alarmEmail}`;\n    const plural = frag.cloudwatchTriggerMinutes === 1 ? '' : 's';\n    const trigger =\n      frag.cloudwatchTriggerMinutes === undefined\n        ? ''\n        : ` triggered every ${frag.cloudwatchTriggerMinutes} minute${plural}`;\n    return `${frag.lambdaName}: standalone lambda${trigger}${alarm}`;\n  } else if (frag.type === WorkspaceFragmentType.StaticWebsite) {\n    return `${frag.websiteName}: static website, subdomain: \"${frag.subDomain}\"`;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  else if (frag.type === WorkspaceFragmentType.WebApp) {\n    const alarm =\n      frag.alarmEmail === undefined ? '' : `, backend errors alarm sent to ${frag.alarmEmail})`;\n    const authentication = frag.authentication.enabled ? `, auth enabled` : '';\n    return `${frag.appName}: webapp, subdomain: ${frag.subDomain}${authentication}${alarm}`;\n  }\n  neverHappens(frag);\n}\n\ninitProject().catch(error);\n"],"names":["__WEBPACK_EXTERNAL_createRequire","url","error","console","log","ProjectType","EslintType","TsConfigType","WebpackType","PROJECT_TYPE_TO_METADATA","Web","eslint","tsconfig","webpack","LambdaFunction","Node","Lambda","LambdaApi","LambdaWebApi","NodeScript","Shared","Lib","SharedNode","SharedWeb","WorkspaceFragmentType","filterFragments","frags","type","filter","frag","access","readFile","readFileInternal","readdir","stat","promises","writeFile","mkdir","rm","async","path","toString","prettierConfig","parser","printWidth","singleQuote","trailingComma","bracketSpacing","arrowParens","endOfLine","prettierFormat","str","format","writeRawFile","content","dirname","recursive","prettyJson","json","opts","compact","JSON","stringify","undefined","prettyJsonc","prettyJs","js","listFiles","files","ents","withFileTypes","ent","entPath","join","name","isDirectory","push","then","subFiles","isFile","Promise","all","pascalCase","toLowerCase","split","map","s","value","firstChar","toUpperCase","slice","capitalize","lowerCase","generateSharedApiFile","webApps","apiLambdas","webApp","appName","apiLambda","apiName","trim","generateSharedModelFile","webAppsWithAuth","userType","ALPHANUM","randomStringSafe","length","set","result","characters","bytes","randomBytes","byte","Math","floor","TEMPLATES_PATH","fileURLToPath","generateProject","dst","project","fragments","options","previousWorkspace","workspaceName","written","projectName","vars","defaultVars","__WORKSPACE_NAME__","__WORKSPACE_NAME_UPPERCASE__","__COOKIE_ENCRYPTION_KEY__","templatePath","filesToWrite","relativePath","relative","file","dstPath","endsWith","packageJson","parse","varName","varValue","Object","entries","replaceAll","allFragments","WebApp","ApiLambda","app","authentication","enabled","hasApi","generateSharedFiles","formattedContent","skipFileMatches","matchAll","skipFileMatch","flagName","negate","flagValue","groups","flagMatch","fileLines","depth","line","includes","pop","matchStart","exec","at","writeWorkspaceFile","flag","projectFlagMatchValue","flags","PACKAGE_VERSIONS","prettier","runner","lambdaServerRuntime","TYPESCRIPT_VERSION","NODE_VERSION","uniq","val","Set","values","generateWorkspacePackageJson","projects","eslintRuntimes","p","tsconfigRuntimes","webpackRuntimes","license","engines","node","scripts","setup","deploy","build","watch","devDependencies","fromEntries","runtime","sort","d1","d2","localeCompare","stringOrNull","generateAwsProviderTerraform","region","envs","envsAndDefault","envNames","keys","default","isDefault","defaultEnvName","firstEnvName","find","_","env","Error","accountId","hostedZone","generateS3BucketTerraform","workspaceOptions","webProjectNames","CODE_BUCKET","replace","CLOUDFRONT_ACCESS","out","notUndefined","removeUndefined","arr","neverHappens","errorMessage","asMap","defaultValue","Array","isArray","asString","asStringOrThrow","valueAsString","asArray","asMapArray","asNumber","isNaN","parsedValue","parseFloat","asBoolean","generateCommonTerraform","generateWorkspaceProjectTerraform","terraform","subDomain","originId","generateFrontendTerraform","api","webAppName","alarmEmail","cloudwatchTriggerMinutes","generateLambdaTerraform","generateDynamoUserTerraform","prefixLower","generateDynamoUserSessionTerraform","generateCodeWorkspace","workspaceFragments","projectNames","flatMap","f","getProjectsFromWorkspaceFragment","folders","settings","extensions","recommendations","readWorkspace","workspacePath","workspaceContent","maybeReadFile","workspaceData","fragData","StaticWebsite","websiteName","scriptName","StandaloneLambda","lambdaName","version","fileData","hash","optionsData","DEFAULT_REGION","envData","envMap","booleanFlag","bool","fragmentFlags","baseFlags","HAS_API","fragment","fromFragment","__PROJECT_NAME__","__APP_NAME__","__PROJECT_NAME_UPPERCASE__","backendName","frontendName","__APP_NAME_UPPERCASE__","__APP_NAME_PASCALCASE__","AUTHENTICATION","generateWorkspace","projectFiles","SCRIPTS_PATH","workspaceFiles","res","vscodePath","vscodeFileList","vscodeFiles","terraformFiles","addLineBreak","workspace","f1","f2","writeWorkspace","flat","commands","execSync","stdio","root","newHash","data","createHash","update","digest","md5","oldHash","fileToWrite","l","askForWorkspaceRegion","workspaceRegion","prompt","message","initial","validate","v","VALID_PROJECT_NAME","askForProjectName","question","takenNames","index","test","askForAlarmEmail","defaultVal","email","askForAlarmEmailValue","askForSubdomain","askForAuthentication","askForCloudwatchTriggerValue","minutes","minutesValue","Number","askForTerraformEnvName","domain","askForTerraformAccountId","askForTerraformEnvIsDefault","askForTerraformHostedZone","I_AM_DONE","WorkspaceFragmentTypeToString","askForNewWorkspaceFragment","workspaceFragmentType","choices","title","askForCloudwatchTrigger","askForWorkspaceEnvUpdate","envName","defaultEnv","attribute","newEnvName","askForWorkspaceFragmentUpdate","askForStaticWebsiteFragmentUpdate","askForStandaloneLambdaFragmentUpdate","askForApiLambdaFragmentUpdate","askForWebAppFragmentUpdate","askForNodeScriptFragmentUpdate","workspaceFragmentString","askForWorkspaceChanges","action","newFrags","workspaceFragmentIndex","hasChanged","newFrag","nextNewFrag","askForWorkspaceUpdate","newEnvs","askForNewTerraformEnv","nextNewEnvs","askForTerraformEnvUpdate","removeBaseFragments","process","cwd","newProject","askForWorkspaceName","err","String","workspaceSummary","alarm","plural","trigger","fragmentDescription","workspaceOptionsSumary","e1","e2","extraInfo","extraString","needSharedWeb","needSharedNode","refreshBaseFragments","initProject","catch"],"sourceRoot":""}