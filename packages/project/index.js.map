{"version":3,"file":"index.js","mappings":"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","sources":["webpack://b/external node-commonjs \"node:fs/promises\"","webpack://b/external node-commonjs \"node:path\"","webpack://b/./src/logger.ts","webpack://b/./src/models.ts","webpack://b/external node-commonjs \"prompts\"","webpack://b/external node-commonjs \"node:child_process\"","webpack://b/external node-commonjs \"node:url\"","webpack://b/external node-commonjs \"node:fs\"","webpack://b/external node-commonjs \"prettier\"","webpack://b/./src/fs.ts","webpack://b/external node-commonjs \"node:crypto\"","webpack://b/./src/string_utils.ts","webpack://b/./src/project/dynamic_template.ts","webpack://b/./src/rand_safe.ts","webpack://b/./src/project/generate_project.ts","webpack://b/./src/versions.ts","webpack://b/./src/project/package_json.ts","webpack://b/./src/project/terraform/provider.ts","webpack://b/./src/project/terraform/s3.ts","webpack://b/./src/type_utils.ts","webpack://b/./src/project/terraform/all.ts","webpack://b/./src/project/terraform/frontend.ts","webpack://b/./src/project/terraform/lambda.ts","webpack://b/./src/project/terraform/dynamo_user.ts","webpack://b/./src/project/terraform/dynamo_user_session.ts","webpack://b/./src/project/vscode_workspace.ts","webpack://b/./src/project/generate_workspace.ts","webpack://b/./src/project/gitignore.ts","webpack://b/./src/hash.ts","webpack://b/./src/project/ask_for_common.ts","webpack://b/./src/project/ask_for_new_workspace_fragment.ts","webpack://b/./src/project/ask_for_workspace_update.ts","webpack://b/./src/project/ask_for_workspace_fragments.ts","webpack://b/./src/project/init_project.ts"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:fs/promises\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:path\");","export const error: (message?: unknown, ...optionalParams: unknown[]) => void = console.error;\nexport const log: (message?: unknown, ...optionalParams: unknown[]) => void = console.log;\n","import {Brand} from '@src/type_utils';\n\nexport type WorkspaceName = Brand<string, 'WorkspaceName'>;\nexport type ProjectName = Brand<string, 'ProjectName'>;\n\n//\n// Project type\n//\n\nexport enum ProjectType {\n  Web = 'web',\n  LambdaFunction = 'lambda_function',\n  LambdaApi = 'lambda_api',\n  LambdaWebApi = 'lambda_web_api',\n  NodeScript = 'node_script',\n  Shared = 'shared',\n  SharedNode = 'shared-node',\n  SharedWeb = 'shared-web',\n}\n\nexport enum EslintType {\n  Web = 'web',\n  Node = 'node',\n  Lib = 'lib',\n}\n\nexport enum TsConfigType {\n  Web = 'web',\n  Node = 'node',\n  Lib = 'lib',\n}\nexport enum WebpackType {\n  Web = 'web',\n  Lib = 'lib', // shared\n  Lambda = 'lambda',\n  NodeScript = 'node-script',\n}\n\nexport interface ProjectTypeMetadata {\n  eslint: EslintType;\n  tsconfig: TsConfigType;\n  webpack?: WebpackType;\n}\n\nexport const PROJECT_TYPE_TO_METADATA = {\n  [ProjectType.Web]: {\n    eslint: EslintType.Web,\n    tsconfig: TsConfigType.Web,\n    webpack: WebpackType.Web,\n  },\n  [ProjectType.LambdaFunction]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lambda,\n  },\n  [ProjectType.LambdaApi]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lambda,\n  },\n  [ProjectType.LambdaWebApi]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lambda,\n  },\n  [ProjectType.NodeScript]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.NodeScript,\n  },\n  [ProjectType.Shared]: {\n    eslint: EslintType.Lib,\n    tsconfig: TsConfigType.Lib,\n    webpack: WebpackType.Lib,\n  },\n  [ProjectType.SharedNode]: {\n    eslint: EslintType.Node,\n    tsconfig: TsConfigType.Node,\n    webpack: WebpackType.Lib,\n  },\n  [ProjectType.SharedWeb]: {\n    eslint: EslintType.Web,\n    tsconfig: TsConfigType.Web,\n    webpack: WebpackType.Lib,\n  },\n} satisfies Record<ProjectType, ProjectTypeMetadata>;\n\n//\n// Workspace Fragment type\n//\n\nexport enum WorkspaceFragmentType {\n  StaticWebsite = 'static-website',\n  StandaloneLambda = 'standalone-lambda',\n  ApiLambda = 'api-lambda',\n  WebApp = 'web-app',\n  NodeScript = 'node-script',\n  Shared = 'shared',\n  SharedNode = 'shared-node',\n  SharedWeb = 'shared-web',\n}\n\ninterface WorkspaceFragmentBase {\n  type: WorkspaceFragmentType;\n}\n\nexport interface WebAppAuthentication {\n  enabled: boolean;\n}\n\nexport interface WorkspaceFragmentRegistry {\n  [WorkspaceFragmentType.StaticWebsite]: {\n    type: WorkspaceFragmentType.StaticWebsite;\n    websiteName: ProjectName;\n    domain: string | undefined;\n  };\n  [WorkspaceFragmentType.StandaloneLambda]: {\n    type: WorkspaceFragmentType.StandaloneLambda;\n    lambdaName: ProjectName;\n    alarmEmail: string | undefined;\n    cloudwatchTriggerMinutes: number | undefined;\n  };\n  [WorkspaceFragmentType.ApiLambda]: {\n    type: WorkspaceFragmentType.ApiLambda;\n    apiName: ProjectName;\n    alarmEmail: string | undefined;\n    domain: string | undefined;\n  };\n  [WorkspaceFragmentType.WebApp]: {\n    type: WorkspaceFragmentType.WebApp;\n    appName: string;\n    alarmEmail: string | undefined;\n    domain: string | undefined;\n    authentication: WebAppAuthentication;\n  };\n  [WorkspaceFragmentType.NodeScript]: {\n    type: WorkspaceFragmentType.NodeScript;\n    scriptName: ProjectName;\n  };\n  [WorkspaceFragmentType.Shared]: {\n    type: WorkspaceFragmentType.Shared;\n  };\n  [WorkspaceFragmentType.SharedNode]: {\n    type: WorkspaceFragmentType.SharedNode;\n  };\n  [WorkspaceFragmentType.SharedWeb]: {\n    type: WorkspaceFragmentType.SharedWeb;\n  };\n}\n\ntype RegistryIsValid =\n  WorkspaceFragmentRegistry extends Record<WorkspaceFragmentType, WorkspaceFragmentBase>\n    ? boolean\n    : never;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction validateRegistry(): RegistryIsValid {\n  return true;\n}\n\nexport function filterFragments<T extends WorkspaceFragmentType>(\n  frags: WorkspaceFragment[],\n  type: T\n): WorkspaceFragmentRegistry[T][] {\n  return frags.filter(frag => frag.type === type) as WorkspaceFragmentRegistry[T][];\n}\n\nexport type WorkspaceFragment = WorkspaceFragmentRegistry[keyof WorkspaceFragmentRegistry];\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"prompts\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:child_process\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:url\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"prettier\");","import {exec} from 'node:child_process';\nimport {promises, readFileSync} from 'node:fs';\nimport {dirname, join} from 'node:path';\n\nimport {BuiltInParserName, format} from 'prettier';\n\nexport const {access, readFile: readFileInternal, readdir, stat} = promises;\nconst {writeFile, mkdir, rm} = promises;\n\nexport async function readFile(path: string): Promise<string> {\n  const buffer = await readFileInternal(path);\n  return buffer.toString();\n}\n\nconst prettierConfig = (parser: BuiltInParserName) =>\n  ({\n    parser,\n    printWidth: 100,\n    singleQuote: true,\n    trailingComma: 'es5',\n    bracketSpacing: false,\n    arrowParens: 'avoid',\n    endOfLine: 'auto',\n  }) as const;\n\nexport async function prettierFormat(str: string, parser: BuiltInParserName): Promise<string> {\n  return await format(str, prettierConfig(parser));\n}\n\nexport async function writeRawFile(path: string, content: string): Promise<void> {\n  await mkdir(dirname(path), {recursive: true});\n  await writeFile(path, content);\n}\n\nexport async function prettyJson(json: unknown, opts?: {compact?: boolean}): Promise<string> {\n  const {compact} = opts ?? {};\n  return await format(\n    compact ? JSON.stringify(json) : JSON.stringify(json, undefined, 2),\n    prettierConfig('json')\n  );\n}\nexport async function prettyJsonc(json: unknown, opts?: {compact?: boolean}): Promise<string> {\n  const {compact} = opts ?? {};\n  return await format(\n    compact ? JSON.stringify(json) : JSON.stringify(json, undefined, 2),\n    prettierConfig('jsonc')\n  );\n}\nexport async function writeJsonFile(path: string, json: unknown): Promise<void> {\n  await writeRawFile(path, await prettyJson(json));\n}\n\nexport async function prettyJs(js: string): Promise<string> {\n  return await format(js, prettierConfig('babel'));\n}\nexport async function writeJsFile(path: string, js: string): Promise<void> {\n  await writeRawFile(path, await prettyJs(js));\n}\n\nexport async function prettyTs(ts: string): Promise<string> {\n  return await format(ts, prettierConfig('typescript'));\n}\nexport async function writeTsFile(path: string, ts: string): Promise<void> {\n  await writeRawFile(path, await prettyTs(ts));\n}\n\nexport async function writeRawFileIfNotExists(path: string, content: string): Promise<void> {\n  if (await exists(path)) {\n    return;\n  }\n  await writeRawFile(path, content);\n}\n\nexport async function rmDir(dirPath: string): Promise<void> {\n  await rm(dirPath, {recursive: true, force: true});\n}\n\nexport async function cleanDir(dirPath: string): Promise<void> {\n  try {\n    await rmDir(dirPath);\n  } finally {\n    await mkdir(dirPath, {recursive: true});\n  }\n}\n\nexport async function cp(from: string, to: string): Promise<void> {\n  return await new Promise((resolve, reject) => {\n    exec(`cp -R ${from} ${to}`, err => (err ? reject(err) : resolve()));\n  });\n}\n\nexport async function exists(path: string): Promise<boolean> {\n  try {\n    await access(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function maybeReadFile(path: string): Promise<string | undefined> {\n  try {\n    const fileContent = await readFile(path);\n    return fileContent.toString();\n  } catch {\n    return undefined;\n  }\n}\n\nexport function maybeReadFileSync(path: string): string | undefined {\n  try {\n    const fileContent = readFileSync(path);\n    return fileContent.toString();\n  } catch {\n    return undefined;\n  }\n}\n\nexport async function listFiles(path: string): Promise<string[]> {\n  const files: string[] = [];\n  const ents = await readdir(path, {withFileTypes: true});\n  const promises: Promise<void>[] = [];\n  for (const ent of ents) {\n    const entPath = join(path, ent.name);\n    if (ent.isDirectory()) {\n      promises.push(\n        listFiles(entPath).then(subFiles => {\n          files.push(...subFiles);\n        })\n      );\n    } else if (ent.isFile()) {\n      files.push(entPath);\n    }\n  }\n  await Promise.all(promises);\n  return files;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\"node:crypto\");","export function capitalize(value: string): string {\n  const [firstChar] = value;\n  return firstChar === undefined ? '' : firstChar.toUpperCase() + value.slice(1);\n}\n\nexport function uncapitalize(value: string): string {\n  const [firstChar] = value;\n  return firstChar === undefined ? '' : firstChar.toLowerCase() + value.slice(1);\n}\n\nexport function pascalCase(str: string): string {\n  return str\n    .toLowerCase()\n    .split(/[^a-z]+/u)\n    .map(s => capitalize(s))\n    .join('');\n}\n\nexport function upperCase(str: string): string {\n  return str\n    .toUpperCase()\n    .split(/[^A-Z]+/u)\n    .join('_');\n}\n\nexport function lowerCase(str: string): string {\n  return str\n    .toLowerCase()\n    .split(/[^a-z]+/u)\n    .join('_');\n}\n","import {\n  filterFragments,\n  WorkspaceFragment,\n  WorkspaceFragmentRegistry,\n  WorkspaceFragmentType,\n} from '@src/models';\nimport {hasApi} from '@src/project/generate_workspace';\nimport {pascalCase} from '@src/string_utils';\n\ninterface TemplateFile {\n  path: string;\n  content: string;\n}\n\nexport function generateSharedFiles(allFragments: WorkspaceFragment[]): TemplateFile[] {\n  const webApps = filterFragments(allFragments, WorkspaceFragmentType.WebApp);\n  const apiLambdas = filterFragments(allFragments, WorkspaceFragmentType.ApiLambda);\n  const webAppsWithAuth = webApps.filter(app => app.authentication.enabled);\n  return [\n    ...(hasApi(allFragments) ? [generateSharedApiFile({webApps, apiLambdas})] : []),\n    ...webApps.map(webApp => {\n      const userType = `${pascalCase(webApp.appName)}User`;\n      return {\n        path: `shared/src/api/${webApp.appName}_api.ts`,\n        content: webApp.authentication.enabled\n          ? `\nimport {Obj, SchemaToType, Str} from '@shared/api/core/api_schema';\nimport {${userType}Id} from '@shared/models';\n\nconst Frontend${userType}Schema = Obj({\n    id: Str<${userType}Id>(),\n});\nexport type Frontend${userType} = SchemaToType<typeof Frontend${userType}Schema>;\n\nexport const ${webApp.appName.toUpperCase()}_API = {\n    '/login': {\n        POST: {\n            req: Obj({id: Str(), password: Str()}),\n            res: Frontend${userType}Schema,\n        },\n    },\n    '/test': {\n        POST: {\n            req: Obj({query: Str()}),\n            res: Obj({data: Str()}),\n        },\n    },\n};\n      `\n          : `\nimport {Obj, Str} from '@shared/api/core/api_schema';\n\nexport const ${webApp.appName.toUpperCase()}_API = {\n    '/test': {\n        POST: {\n            req: Obj({query: Str()}),\n            res: Obj({data: Str()}),\n        },\n    },\n};\n          `,\n      };\n    }),\n    ...apiLambdas.map(apiLambda => ({\n      path: `shared/src/api/${apiLambda.apiName}.ts`,\n      content: `\n  import {Unknown} from '@shared/api/core/api_schema';\n  \n  export const ${apiLambda.apiName.toUpperCase()} = {\n      '/test': {\n          GET: {\n              req: Unknown(),\n              res: Unknown(),\n          },\n      },\n  };\n        `,\n    })),\n    ...(webAppsWithAuth.length === 0 ? [] : [generateSharedModelFile(webAppsWithAuth)]),\n  ];\n}\n\nfunction generateSharedApiFile(opts: {\n  webApps: WorkspaceFragmentRegistry['web-app'][];\n  apiLambdas: WorkspaceFragmentRegistry['api-lambda'][];\n}): TemplateFile {\n  const {webApps, apiLambdas} = opts;\n\n  // IMPORTS\n  const imports = [\n    ...webApps.map(\n      webApp =>\n        `import {${webApp.appName.toUpperCase()}_API} from '@shared/api/${webApp.appName}_api';`\n    ),\n    ...apiLambdas.map(\n      apiLambda =>\n        `import {${apiLambda.apiName.toUpperCase()}} from '@shared/api/${apiLambda.apiName}';`\n    ),\n    `import {AllApiSchema} from '@shared/api/core/api_schema';`,\n    `import {ApiConfig, ApiName} from '@shared/api/core/api_types';`,\n    `import {${[\n      ...webApps.map(webApp => `${webApp.appName.toUpperCase()}_BACKEND_URL`),\n      ...apiLambdas.map(apiLambda => `${apiLambda.apiName.toUpperCase()}_URL`),\n    ].join(', ')}} from '@shared/env';`,\n  ].join('\\n');\n\n  // APIs DEF\n  const apisDef = `\n    export const ALL = {\n      ${[\n        ...webApps.map(webApp => `${webApp.appName}_backend: ${webApp.appName.toUpperCase()}_API,`),\n        ...apiLambdas.map(apiLambda => `${apiLambda.apiName}: ${apiLambda.apiName.toUpperCase()},`),\n      ].join('\\n')}\n    } satisfies AllApiSchema;\n  `.trim();\n\n  // APIs CONFIG\n  const apisConfig = `\n    export const API_CONFIGS = {\n      ${[\n        ...webApps.map(\n          webApp =>\n            `${webApp.appName}_backend: {host: ${webApp.appName.toUpperCase()}_BACKEND_URL},`\n        ),\n        ...apiLambdas.map(\n          apiLambda => `${apiLambda.apiName}: {host: ${apiLambda.apiName.toUpperCase()}_URL},`\n        ),\n      ].join('\\n')}\n    } satisfies Record<ApiName, ApiConfig>;\n  `.trim();\n\n  return {\n    path: 'shared/src/api/api.ts',\n    content: [imports, apisDef, apisConfig].join('\\n\\n'),\n  };\n}\n\nfunction generateSharedModelFile(\n  webAppsWithAuth: WorkspaceFragmentRegistry['web-app'][]\n): TemplateFile {\n  return {\n    path: 'shared/src/models.ts',\n    content: `\nimport {Brand} from '@shared/lib/type_utils';\n\n${webAppsWithAuth\n  .map(webApp => {\n    const userType = `${pascalCase(webApp.appName)}User`;\n    return `\nexport type ${userType}Id = Brand<'${userType}Id', string>;\n\nexport interface ${userType}Item {\nid: ${userType}Id;\nhash: string;\nsalt: string;\nsessionDuration: number; // in seconds\n}\n`.trim();\n  })\n  .join('\\n\\n')}\n`,\n  };\n}\n","import {randomBytes} from 'node:crypto';\n\nconst ALPHANUM = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nexport function randomStringSafe(length: number, set?: string): string {\n  let result = '';\n  const characters = set ?? ALPHANUM;\n  const bytes = randomBytes(length);\n  for (const byte of bytes) {\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    result += characters[Math.floor((byte / 255) * (characters.length - 1))];\n  }\n  return result;\n}\n\nconst UID_LENGTH = 16;\nexport function uidSafe(prefix?: string): string {\n  const id = randomStringSafe(UID_LENGTH);\n  return prefix === undefined ? id : `${prefix}${id}`;\n}\n\nconst NONCE_BYTE_SIZE = 16;\nexport function generateNonce(): string {\n  return randomBytes(NONCE_BYTE_SIZE).toString('base64');\n}\n","import {join, relative} from 'node:path';\nimport {fileURLToPath} from 'node:url';\n\nimport {listFiles, prettierFormat, readFile} from '@src/fs';\nimport {ProjectType, WorkspaceFragment} from '@src/models';\nimport {generateSharedFiles} from '@src/project/dynamic_template';\nimport {WorkspaceProject, writeWorkspaceFile} from '@src/project/generate_workspace';\nimport {FileHash, Workspace} from '@src/project/vscode_workspace';\nimport {randomStringSafe} from '@src/rand_safe';\nimport {upperCase} from '@src/string_utils';\n\nconst TEMPLATES_PATH = join(fileURLToPath(import.meta.url), '../templates');\n\nexport async function generateProject(opts: {\n  dst: string;\n  project: WorkspaceProject;\n  allFragments: WorkspaceFragment[];\n  workspace: Workspace | undefined;\n  workspaceName: string;\n}): Promise<FileHash[]> {\n  const {dst, project, allFragments, workspace, workspaceName} = opts;\n\n  const written: FileHash[] = [];\n  const {projectName, type, vars} = project;\n  const defaultVars = {\n    __WORKSPACE_NAME__: workspaceName,\n    __WORKSPACE_NAME_UPPERCASE__: upperCase(workspaceName),\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    __COOKIE_ENCRYPTION_KEY__: randomStringSafe(32),\n  };\n\n  // Copy template files\n  const templatePath = join(TEMPLATES_PATH, type);\n  const files = await listFiles(templatePath);\n  const filesToWrite = [\n    ...(await Promise.all(\n      files.map(async file => {\n        const relativePath = relative(templatePath, file);\n        const dstPath = join(projectName, relativePath);\n\n        let content = await readFile(file);\n        if (file.endsWith('package.json')) {\n          const packageJson = JSON.parse(await readFile(file));\n          packageJson['name'] = projectName;\n          content = JSON.stringify(packageJson, undefined, 2);\n        }\n        for (const [varName, varValue] of Object.entries({...vars, ...defaultVars})) {\n          content = content.replaceAll(varName, varValue);\n        }\n\n        return {path: dstPath, content};\n      })\n    )),\n  ];\n  if (type === ProjectType.Shared) {\n    filesToWrite.push(...generateSharedFiles(allFragments));\n  }\n\n  await Promise.all(\n    filesToWrite.map(async ({path, content}) => {\n      let formattedContent = content;\n\n      // Handle @matthis/skip-file directives\n      const skipFileMatches = content.matchAll(\n        /\\/\\/ @matthis\\/skip-file:(?<flagName>[^:]+)(?<negate>:not)?:(?<flagValue>[^\\s]*)/gu\n      );\n      for (const skipFileMatch of skipFileMatches) {\n        const {flagName, negate, flagValue} = skipFileMatch.groups ?? {};\n        if (flagMatch({flagName, negate, flagValue}, project, allFragments)) {\n          return;\n        }\n      }\n      // Remove the lines that contain the @matthis/skip-file directives\n      formattedContent = formattedContent.replaceAll(\n        / *\\/\\/ @matthis\\/skip-file:[^:]+(?::not)?:[^\\n]*\\n/gu,\n        ''\n      );\n\n      // Handle @matthis/start and @matthis/end directives\n      const fileLines: string[] = [];\n      const depth: ('include' | 'exclude')[] = ['include'];\n      for (const line of formattedContent.split('\\n')) {\n        // Look for @matthis/end\n        if (line.includes('@matthis/end')) {\n          depth.pop();\n          continue;\n        }\n\n        // Look for @matthis/start\n        const matchStart =\n          /.*\\/\\/ @matthis\\/start:(?<flagName>[^:]+)(?<negate>:not)?:(?<flagValue>[^\\s]*).*/u.exec(\n            line\n          );\n        if (matchStart) {\n          const {flagName, negate, flagValue} = matchStart.groups ?? {};\n          depth.push(\n            flagMatch({flagName, negate, flagValue}, project, allFragments) ? 'include' : 'exclude'\n          );\n          continue;\n        }\n\n        if (depth.at(-1) === 'include') {\n          fileLines.push(line);\n        }\n      }\n      formattedContent = fileLines.join('\\n');\n\n      if (path.endsWith('.ts') || path.endsWith('.tsx')) {\n        formattedContent = await prettierFormat(formattedContent, 'typescript');\n      }\n      if (path.endsWith('.json')) {\n        formattedContent = await prettierFormat(formattedContent, 'json');\n      }\n      written.push(await writeWorkspaceFile(workspace, dst, path, formattedContent));\n    })\n  );\n\n  return written;\n}\n\nfunction flagMatch(\n  flag: {flagName?: string; negate?: string; flagValue?: string},\n  project: WorkspaceProject,\n  allFragments: WorkspaceFragment[]\n): boolean {\n  const {flagName, negate, flagValue} = flag;\n  if (flagName === undefined || flagValue === undefined) {\n    return false;\n  }\n  const projectFlagValue = project.flags(allFragments)[flagName];\n  const projectFlagMatchValue = projectFlagValue === flagValue;\n  return negate !== undefined ? !projectFlagMatchValue : projectFlagMatchValue;\n}\n","export const PACKAGE_VERSIONS = {\n  project: '1.12.26',\n  eslint: '1.8.5',\n  prettier: '1.5.0',\n  tsconfig: '1.7.4',\n  webpack: '1.8.9',\n  runner: '1.6.21',\n  lambdaServerRuntime: '1.0.7',\n};\n\nexport const ESLINT_VERSION = '9.8.x';\nexport const PRETTIER_VERSION = '3.3.3';\nexport const TYPESCRIPT_VERSION = '5.5.x';\nexport const MIN_NODE_VERSION = '20.10';\nexport const NODE_VERSION = `>=${MIN_NODE_VERSION}`;\nexport const CORE_JS_VERSION = '3.37';\n\nexport const LIB_VERSIONS = {\n  '@types/react': '18.2.x',\n  '@types/react-dom': '18.2.x',\n  react: '18.2.x',\n  'react-dom': '18.2.x',\n  'styled-components': '6.1.x',\n};\n","import {PROJECT_TYPE_TO_METADATA, WorkspaceName} from '@src/models';\nimport {WorkspaceProject} from '@src/project/generate_workspace';\nimport {NODE_VERSION, PACKAGE_VERSIONS, TYPESCRIPT_VERSION} from '@src/versions';\n\nfunction uniq<T>(val: T[]): T[] {\n  return [...new Set(val).values()];\n}\n\nexport function generateWorkspacePackageJson(\n  workspaceName: WorkspaceName,\n  projects: WorkspaceProject[]\n): Record<string, unknown> {\n  const eslintRuntimes = uniq(projects.map(p => PROJECT_TYPE_TO_METADATA[p.type].eslint));\n  const tsconfigRuntimes = uniq(projects.map(p => PROJECT_TYPE_TO_METADATA[p.type].tsconfig));\n  const webpackRuntimes = uniq(projects.map(p => PROJECT_TYPE_TO_METADATA[p.type].webpack));\n\n  return {\n    name: workspaceName,\n    license: 'UNLICENSED',\n    type: 'module',\n    engines: {\n      node: NODE_VERSION,\n    },\n    scripts: {\n      setup: 'node ./setup.js',\n      deploy: 'node ./deploy.js',\n      build: 'node ./build.js',\n      watch: 'node ./build.js --watch',\n    },\n    prettier: '@matthis/prettier-config',\n    devDependencies: Object.fromEntries(\n      (\n        [\n          ...eslintRuntimes.map(runtime => [\n            `@matthis/eslint-config-${runtime}`,\n            PACKAGE_VERSIONS.eslint,\n          ]),\n          ['@matthis/prettier-config', PACKAGE_VERSIONS.prettier],\n          ...tsconfigRuntimes.map(runtime => [\n            `@matthis/tsconfig-${runtime}`,\n            PACKAGE_VERSIONS.tsconfig,\n          ]),\n          ...webpackRuntimes.map(runtime => [\n            `@matthis/webpack-${runtime}`,\n            PACKAGE_VERSIONS.webpack,\n          ]),\n          ['@matthis/webpack-runner', PACKAGE_VERSIONS.runner],\n          ['typescript', TYPESCRIPT_VERSION],\n        ] as [string, string][]\n      ).sort((d1, d2) => d1[0].localeCompare(d2[0]))\n    ),\n  };\n}\n","import {WorkspaceName} from '@src/models';\n\nexport function generateAwsProviderTerraform(\n  workspaceName: WorkspaceName,\n  opts: {region: string}\n): string {\n  const {region} = opts;\n  return `\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.1\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region                   = \"${region}\"\n  default_tags {\n    tags = {\n      Project = \"${workspaceName}\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  alias                    = \"us-east-1\"\n  region                   = \"us-east-1\"\n  default_tags {\n    tags = {\n      Project = \"${workspaceName}\"\n    }\n  }\n}\n\ndata \"aws_region\" \"current\" {}\noutput \"region\" {\n  value = data.aws_region.current.id\n}\n\ndata \"aws_caller_identity\" \"current\" {}\noutput \"account_id\" {\n  value = data.aws_caller_identity.current.account_id\n}\n`.trim();\n}\n","import {ProjectName, WorkspaceName} from '@src/models';\n\nexport function generateS3BucketTerraform(\n  workspaceName: WorkspaceName,\n  webProjectNames: ProjectName[]\n): string {\n  const bucketName = workspaceName.toLowerCase().replace(/[^a-z0-9.-]+/gu, '-');\n\n  const CODE_BUCKET = `\nresource \"aws_s3_bucket\" \"code\" {\n  bucket_prefix = \"${bucketName}-code-\"\n}\n\noutput \"code_bucket\" {\n  value = aws_s3_bucket.code.id\n}\n`.trim();\n\n  const CLOUDFRONT_ACCESS = `\ndata \"aws_iam_policy_document\" \"cloudfront_access_to_code_policy\" {\n  ${webProjectNames\n    .map(p =>\n      `\n  statement {\n    actions = [\"s3:GetObject\"]\n    resources = [\n      \"\\${aws_s3_bucket.code.arn}/${p}/*\",\n    ]\n    principals {\n      type        = \"AWS\"\n      identifiers = [aws_cloudfront_origin_access_identity.${p}.iam_arn]\n    }\n  }\n`.trim()\n    )\n    .join('\\n\\n')}\n}\n\nresource \"aws_s3_bucket_policy\" \"cloudfront_access_to_code\" {\n  bucket = aws_s3_bucket.code.id\n  policy = data.aws_iam_policy_document.cloudfront_access_to_code_policy.json\n}\n`.trim();\n\n  const out = [CODE_BUCKET];\n  if (webProjectNames.length > 0) {\n    out.push(CLOUDFRONT_ACCESS);\n  }\n  return out.join('\\n\\n');\n}\n","function notUndefined<T>(val: T | undefined): val is T {\n  return val !== undefined;\n}\n\nexport function isString(val: unknown): val is string {\n  return typeof val === 'string';\n}\n\nexport function isNumber(val: unknown): val is number {\n  return typeof val === 'number';\n}\n\nexport function iterNumberEnum<T extends Record<string, string | number>>(e: T): T[keyof T][] {\n  return Object.values(e).filter(isNumber) as unknown as T[keyof T][];\n}\n\nexport function iterStringEnum<T extends Record<string, string>>(e: T): T[keyof T][] {\n  return Object.values(e).filter(isString) as unknown as T[keyof T][];\n}\n\nexport function removeUndefined<T>(arr: (T | undefined)[]): T[] {\n  return arr.filter(notUndefined);\n}\n\nexport function removeUndefinedOrNullProps<T extends Record<string, unknown>>(obj: T): {} {\n  return Object.fromEntries(\n    Object.entries(obj).filter(e => e[1] !== undefined && e[1] !== null)\n  ) as T;\n}\n\nexport function neverHappens(value: never, errorMessage?: string): never {\n  throw new Error(errorMessage);\n}\n\nexport type AnyInterface<T> = {[K in keyof T]: unknown};\n\nexport function asMap(value: unknown): Record<string, unknown> | undefined;\nexport function asMap(\n  value: unknown,\n  defaultValue: Record<string, unknown>\n): Record<string, unknown>;\nexport function asMap(\n  value: unknown,\n  defaultValue?: Record<string, unknown>\n): Record<string, unknown> | undefined {\n  return typeof value === 'object' && value !== null && !Array.isArray(value)\n    ? (value as Record<string, unknown>)\n    : defaultValue;\n}\nexport function asMapOrThrow(value: unknown): Record<string, unknown> {\n  const valueAsMap = asMap(value);\n  if (valueAsMap === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a map`);\n  }\n  return valueAsMap;\n}\n\nexport function asJson(value: string): Record<string, unknown> | undefined;\nexport function asJson(\n  value: string,\n  defaultValue: Record<string, unknown>\n): Record<string, unknown>;\nexport function asJson(\n  value: string,\n  defaultValue?: Record<string, unknown>\n): Record<string, unknown> | undefined {\n  try {\n    const json = JSON.parse(value);\n    const res = asMap(json);\n    return res ?? defaultValue;\n  } catch {\n    return defaultValue;\n  }\n}\nexport function asJsonOrThrow(value: string): Record<string, unknown> {\n  const valueAsJson = asJson(value);\n  if (valueAsJson === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a valid JSON string of a map`);\n  }\n  return valueAsJson;\n}\n\nexport function asJsonString(value: unknown): Record<string, unknown> | undefined;\nexport function asJsonString(\n  value: unknown,\n  defaultValue: Record<string, unknown>\n): Record<string, unknown>;\nexport function asJsonString(\n  value: unknown,\n  defaultValue?: Record<string, unknown>\n): Record<string, unknown> | undefined {\n  const str = asString(value);\n  return str === undefined\n    ? defaultValue\n    : defaultValue === undefined\n      ? asJson(str)\n      : asJson(str, defaultValue);\n}\nexport function asJsonStringOrThrow(value: unknown): Record<string, unknown> {\n  return asJsonOrThrow(asStringOrThrow(value));\n}\n\nexport function asString<T extends string = string>(value: unknown): T | undefined;\nexport function asString<T extends string = string>(value: unknown, defaultValue: string): T;\nexport function asString<T extends string = string>(\n  value: unknown,\n  defaultValue?: string\n): T | undefined {\n  return (typeof value === 'string' ? value : defaultValue) as T;\n}\nexport function asStringOrThrow<T extends string = string>(value: unknown): T {\n  const valueAsString = asString<T>(value);\n  if (valueAsString === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a string`);\n  }\n  return valueAsString;\n}\n\nexport function asStringEnum<T extends Record<string, string>>(\n  value: unknown,\n  enu: T\n): T[keyof T] | undefined;\nexport function asStringEnum<T extends Record<string, string>>(\n  value: unknown,\n  enu: T,\n  defaultValue: T[keyof T]\n): T[keyof T];\nexport function asStringEnum<T extends Record<string, string>>(\n  value: unknown,\n  enu: T,\n  defaultValue?: T[keyof T]\n): T[keyof T] | undefined {\n  return (\n    typeof value === 'string' && Object.values(enu).includes(value as T[keyof T])\n      ? value\n      : defaultValue\n  ) as T[keyof T];\n}\nexport function asStringEnumOrThrow<T extends Record<string, string>>(\n  value: unknown,\n  enu: T\n): T[keyof T] {\n  const valueAsString = asStringEnum<T>(value, enu);\n  if (valueAsString === undefined) {\n    throw new Error(\n      `Invalid value: \\`${value}\\` is not a string or not one of ${JSON.stringify(\n        Object.values(enu)\n      )}`\n    );\n  }\n  return valueAsString;\n}\n\nexport function asArray<T = unknown>(value: unknown): T[] | undefined;\nexport function asArray<T = unknown>(value: unknown, defaultValue: unknown[]): T[];\nexport function asArray<T = unknown>(value: unknown, defaultValue?: unknown[]): T[] | undefined {\n  return (Array.isArray(value) ? value : defaultValue) as T[];\n}\nexport function asArrayOrThrow<T = unknown>(value: unknown): T[] {\n  if (!Array.isArray(value)) {\n    throw new Error(`Invalid value: \\`${value}\\` is not an array`);\n  }\n  return value as T[];\n}\n\nexport function asStringArray<T extends string = string>(value: unknown): T[] | undefined;\nexport function asStringArray<T extends string = string>(\n  value: unknown,\n  defaultValue: string[]\n): T[];\nexport function asStringArray<T extends string = string>(\n  value: unknown,\n  defaultValue?: string[]\n): T[] | undefined {\n  const arr = asArray(value);\n  if (arr === undefined) {\n    return defaultValue as T[];\n  }\n  return removeUndefined(arr.map(s => asString<T>(s)));\n}\n\nexport function asStringArrayOrThrow<T extends string = string>(value: unknown): T[] {\n  const arr = asArrayOrThrow(value);\n  return arr.map(s => asStringOrThrow<T>(s));\n}\n\nexport function asMapArray(value: unknown): Record<string, unknown>[] | undefined;\nexport function asMapArray(\n  value: unknown,\n  defaultValue: Record<string, unknown>[]\n): Record<string, unknown>[];\nexport function asMapArray(\n  value: unknown,\n  defaultValue?: Record<string, unknown>[]\n): Record<string, unknown>[] | undefined {\n  const arr = asArray(value);\n  if (arr === undefined) {\n    return defaultValue;\n  }\n  return removeUndefined(arr.map(s => asMap(s)));\n}\nexport function asMapArrayOrThrow(value: unknown): Record<string, unknown>[] {\n  const arr = asArrayOrThrow(value);\n  return arr.map(s => asMapOrThrow(s));\n}\n\nexport function asNumber<T extends number = number>(value: unknown): T | undefined;\nexport function asNumber<T extends number = number>(value: unknown, defaultValue: number): T;\nexport function asNumber<T extends number = number>(\n  value: unknown,\n  defaultValue?: number\n): T | undefined {\n  if (typeof value === 'number') {\n    return (!isNaN(value) ? value : defaultValue) as T;\n  }\n  if (typeof value === 'string') {\n    try {\n      const parsedValue = parseFloat(value);\n      return (!isNaN(parsedValue) ? parsedValue : defaultValue) as T;\n    } catch {\n      return defaultValue as T;\n    }\n  }\n  return defaultValue as T;\n}\nexport function asNumberOrThrow<T extends number = number>(value: unknown): T {\n  const valueAsNumber = asNumber(value);\n  if (valueAsNumber === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a number`);\n  }\n  return valueAsNumber as T;\n}\n\nexport function asBoolean(value: unknown): boolean | undefined;\nexport function asBoolean(value: unknown, defaultValue: boolean): boolean;\nexport function asBoolean(value: unknown, defaultValue?: boolean): boolean | undefined {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  if (typeof value === 'number') {\n    return !isNaN(value) ? value !== 0 : false;\n  }\n  if (typeof value === 'string') {\n    if (value === '0' || value === 'false') {\n      return false;\n    } else if (value === '1' || value === 'true') {\n      return true;\n    }\n    return defaultValue;\n  }\n  return defaultValue;\n}\n\nexport function asBooleanOrThrow(value: unknown): boolean {\n  const valueAsBoolean = asBoolean(value);\n  if (valueAsBoolean === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` is not a boolean`);\n  }\n  return valueAsBoolean;\n}\n\nconst TIMESTAMP_REGEX = /^[0-9]{1,15}$/u;\nexport function asDate(value: unknown): Date | undefined;\nexport function asDate(value: unknown, defaultValue: Date): Date;\nexport function asDate(value: unknown, defaultValue?: Date): Date | undefined {\n  const date =\n    value instanceof Date\n      ? value\n      : new Date(\n          typeof value === 'string' && TIMESTAMP_REGEX.test(value)\n            ? parseFloat(value)\n            : String(value)\n        );\n  return isNaN(date.getTime()) ? defaultValue : date;\n}\n\nexport function asDateOrThrow(value: unknown): Date {\n  const valueAsDate = asDate(value);\n  if (valueAsDate === undefined) {\n    throw new Error(`Invalid value: \\`${value}\\` cannot be parsed as a Date`);\n  }\n  return valueAsDate;\n}\n\n// export function asDate(value: unknown): Date | undefined;\n// export function asDate(value: unknown, defaultValue: Date): Date;\n// export function asDate(value: unknown, defaultValue?: Date): Date | undefined {\n//   if (typeof value === 'number') {\n//     return new Date(value);\n//   }\n//   return value instanceof Date ? value : defaultValue;\n// }\n\nexport function isNull<T>(val: T | null): val is null {\n  return val === null;\n}\n\nexport function asError(err: unknown): Error {\n  return err instanceof Error ? err : new Error(typeof err === 'string' ? err : String(err));\n}\n\nexport function errorAsString(err: unknown): string {\n  const errorMap = asMap(err);\n  if (errorMap === undefined) {\n    return asString(err) ?? String(err);\n  }\n\n  const errorMessage = asString(errorMap['message']);\n  if (errorMessage === undefined) {\n    return String(err);\n  }\n  return errorMessage;\n}\n\nexport function errorAndStackAsString(err: unknown): string {\n  const errorMap = asMap(err);\n  if (errorMap === undefined) {\n    return asString(err) ?? String(err);\n  }\n\n  const stack = asString(errorMap['stack']);\n  if (stack === undefined) {\n    return String(err);\n  }\n  return stack;\n}\n\nexport function asConstantOrThrow<T>(value: unknown, expected: T): T {\n  if (value !== expected) {\n    throw new Error(`Invalid value: \\`${value}\\`, expected \\`${expected}\\``);\n  }\n  return value as T;\n}\n\n// export function asParsedJson<T>(json: string): T {\n//   try {\n//     return JSON.parse(json) as T;\n//   } catch {\n//     const defaultValue = {};\n//     return defaultValue as T;\n//   }\n// }\nexport function parseJson(\n  json: string\n): {res: unknown; err: undefined} | {res: undefined; err: unknown} {\n  try {\n    return {res: JSON.parse(json), err: undefined};\n  } catch (err: unknown) {\n    return {err, res: undefined};\n  }\n}\nexport type Brand<Type, Name> = Type & {__brand: Name};\nexport type StringBrand = string & {__brand: string};\nexport type NumberBrand = number & {__brand: number};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type AnyBrand = (string | number) & {__brand: any};\n\nexport type Untrusted<T> = T extends\n  | Function\n  | Date\n  | boolean\n  | number\n  | string\n  | undefined\n  | null\n  | unknown[]\n  ? unknown\n  : {[P in keyof T]?: Untrusted<T[P]>};\n\nexport type DeepPartial<T> = T extends\n  | Function\n  | Date\n  | boolean\n  | number\n  | string\n  | undefined\n  | null\n  | unknown[]\n  ? T\n  : {[P in keyof T]?: DeepPartial<T[P]>};\n\nexport type MapInterface<I, Type> = {[Key in keyof I]: Type};\n// Get all the keys of a type including the optional attributes\ntype NonHomomorphicKeys<T> = ({[P in keyof T]: P} & None)[keyof T];\nexport type MapInterfaceStrict<I, Type> = {[Key in NonHomomorphicKeys<I>]: Type};\n\ntype KeysOfType<T, Type> = {[Key in keyof T]: T[Key] extends Type ? Key : never}[keyof T];\nexport type RestrictInterface<T, Type> = Pick<T, KeysOfType<T, Type>>;\n\ninterface RecursiveArray<T> extends Array<T | RecursiveArray<T>> {}\nexport type NestedArray<T> = (T | RecursiveArray<T>)[];\n\n// Type for an empty object (ie: {})\nexport type None = Record<string, never>;\n\nexport type NonEmptyArray<T> = [T, ...T[]];\nexport function isNonEmptyArray<T>(val: T[]): val is NonEmptyArray<T> {\n  return val.length > 0;\n}\nexport function nonEmptyArray<T>(val: T[]): NonEmptyArray<T> | undefined {\n  return val.length === 0 ? undefined : (val as NonEmptyArray<T>);\n}\n\nexport type AddPrefix<T, P extends string> = {\n  [K in keyof T as K extends string ? `${P}${K}` : never]: T[K];\n};\nexport function addPrefix<T extends Record<string, unknown>, Prefix extends string>(\n  attr: T,\n  prefix: Prefix\n): AddPrefix<T, Prefix> {\n  return Object.fromEntries(\n    Object.entries(attr).map(([key, value]) => [`${prefix}${key}`, value])\n  ) as AddPrefix<T, Prefix>;\n}\n\nexport type WithNull<T> = {\n  [Key in keyof T]: T[Key] extends Exclude<T[Key], undefined> ? T[Key] : T[Key] | null;\n};\ntype Id<T> = T;\nexport type Flatten<T> = Id<{[k in keyof T]: T[k]}>;\n\nexport type Defined<T> = Exclude<T, undefined>;\n","import {ProjectType, WorkspaceName} from '@src/models';\nimport {WorkspaceProject} from '@src/project/generate_workspace';\nimport {generateFrontendTerraform} from '@src/project/terraform/frontend';\nimport {generateLambdaTerraform} from '@src/project/terraform/lambda';\nimport {generateAwsProviderTerraform} from '@src/project/terraform/provider';\nimport {generateS3BucketTerraform} from '@src/project/terraform/s3';\nimport {WorkspaceOptions} from '@src/project/vscode_workspace';\nimport {neverHappens} from '@src/type_utils';\n\nexport interface AppDomain {\n  rootDomain: string;\n  subDomain: string;\n}\n\nexport function generateCommonTerraform(\n  workspaceName: WorkspaceName,\n  projects: WorkspaceProject[],\n  workspaceOptions: WorkspaceOptions\n): string {\n  const {region} = workspaceOptions;\n  return [\n    generateAwsProviderTerraform(workspaceName, {region}),\n    generateS3BucketTerraform(\n      workspaceName,\n      projects.filter(p => p.type === ProjectType.Web).map(p => p.projectName)\n    ),\n  ].join('\\n\\n');\n}\n\nexport function generateWorkspaceProjectTerraform(\n  workspaceName: WorkspaceName,\n  project: WorkspaceProject\n): string | undefined {\n  const {projectName, terraform} = project;\n\n  if (terraform.type === 'frontend') {\n    return generateFrontendTerraform(projectName, terraform);\n  } else if (terraform.type === 'lambda') {\n    return generateLambdaTerraform(workspaceName, projectName, terraform);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  else if (terraform.type === 'no-terraform') {\n    return undefined;\n  }\n  neverHappens(terraform, 'Terraform type');\n}\n","import {ProjectName} from '@src/models';\nimport {AppDomain} from '@src/project/terraform/all';\n\nexport interface WorkspaceProjectTerraformFrontend {\n  type: 'frontend';\n  domain: AppDomain | undefined;\n}\n\nexport function generateFrontendTerraform(\n  projectName: ProjectName,\n  opts: WorkspaceProjectTerraformFrontend\n): string {\n  const {domain} = opts;\n  const bucketName = projectName.toLowerCase().replace(/[^\\d.a-z-]+/gu, '-');\n  const originId = `${bucketName}-origin-id`;\n  return `\noutput \"${projectName}_cloudfront_domain_name\" {\n  value       = ${\n    domain\n      ? `\"${domain.subDomain}.${domain.rootDomain}\"`\n      : `aws_cloudfront_distribution.${projectName}.domain_name`\n  }\n  description = \"Domain (from cloudfront) where the \\\\\"${projectName}\\\\\" is available.\"\n}${\n    domain !== undefined\n      ? `\n\n# Domain\n\ndata \"aws_route53_zone\" \"${projectName}\" {\n  name = \"${domain.rootDomain}\"\n}\n\nresource \"aws_route53_record\" \"${projectName}_a\" {\n  zone_id = data.aws_route53_zone.${projectName}.zone_id\n  name    = \"${domain.subDomain}.${domain.rootDomain}\"\n  type    = \"A\"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${projectName}.domain_name\n    zone_id                = aws_cloudfront_distribution.${projectName}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource \"aws_route53_record\" \"${projectName}_aaaa\" {\n  zone_id = data.aws_route53_zone.${projectName}.zone_id\n  name    = \"${domain.subDomain}.${domain.rootDomain}\"\n  type    = \"AAAA\"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${projectName}.domain_name\n    zone_id                = aws_cloudfront_distribution.${projectName}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource \"aws_acm_certificate\" \"${projectName}\" {\n  domain_name               = \"*.${domain.subDomain}.${domain.rootDomain}\"\n  subject_alternative_names = [\"${domain.subDomain}.${domain.rootDomain}\"]\n  validation_method         = \"DNS\"\n  provider                  = aws.us-east-1\n}\n\nresource \"aws_route53_record\" \"${projectName}_certificate_validation\" {\n  for_each = {\n    for dvo in aws_acm_certificate.${projectName}.domain_validation_options : dvo.domain_name => {\n      name   = dvo.resource_record_name\n      record = dvo.resource_record_value\n      type   = dvo.resource_record_type\n    }\n  }\n  provider        = aws.us-east-1\n  allow_overwrite = true\n  name            = each.value.name\n  records         = [each.value.record]\n  ttl             = 60\n  type            = each.value.type\n  zone_id         = data.aws_route53_zone.${projectName}.zone_id\n}\n\nresource \"aws_acm_certificate_validation\" \"${projectName}\" {\n  provider                = aws.us-east-1\n  certificate_arn         = aws_acm_certificate.${projectName}.arn\n  validation_record_fqdns = [for record in aws_route53_record.${projectName}_certificate_validation : record.fqdn]\n}`\n      : ''\n  }\n\n# Cloudfront Distribution\n\nresource \"aws_cloudfront_origin_access_identity\" \"${projectName}\" {}\n  \nresource \"aws_cloudfront_distribution\" \"${projectName}\" {\n  origin {\n    domain_name = aws_s3_bucket.code.bucket_regional_domain_name\n    origin_id   = \"${originId}\"\n    origin_path = \"/${projectName}\"\n\n    s3_origin_config {\n      origin_access_identity = aws_cloudfront_origin_access_identity.${projectName}.cloudfront_access_identity_path\n    }\n  }\n  \n  enabled             = true\n  wait_for_deployment = false\n  is_ipv6_enabled     = true\n  price_class         = \"PriceClass_100\"${\n    domain\n      ? `\n  aliases             = [\"${domain.subDomain}.${domain.rootDomain}\"]`\n      : ''\n  }\n  \n  default_root_object = \"/index.html\"\n  custom_error_response {\n    error_code         = 400\n    response_code      = 200\n    response_page_path = \"/index.html\"\n  }\n  custom_error_response {\n    error_code         = 403\n    response_code      = 200\n    response_page_path = \"/index.html\"\n  }\n  custom_error_response {\n    error_code         = 404\n    response_code      = 200\n    response_page_path = \"/index.html\"\n  }\n\n  default_cache_behavior {\n    allowed_methods        = [\"HEAD\", \"GET\"]\n    cached_methods         = [\"HEAD\", \"GET\"]\n    compress               = true\n    target_origin_id       = \"${originId}\"\n    viewer_protocol_policy = \"redirect-to-https\"\n    \n    forwarded_values {\n      query_string = false\n      cookies {\n        forward = \"none\"\n      }\n    }\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {${\n    domain\n      ? `\n    acm_certificate_arn      = aws_acm_certificate.${projectName}.arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"`\n      : `\n    cloudfront_default_certificate = true`\n  }\n  }\n}\n  `.trim();\n}\n","import {ProjectName, WebAppAuthentication, WorkspaceName} from '@src/models';\nimport {AppDomain} from '@src/project/terraform/all';\nimport {lowerCase} from '@src/string_utils';\n\nexport interface WorkspaceProjectTerraformLambda {\n  type: 'lambda';\n  api: boolean;\n  webAppName: string | undefined;\n  alarmEmail: string | undefined;\n  cloudwatchTriggerMinutes: number | undefined;\n  domain: AppDomain | undefined;\n  authentication: WebAppAuthentication | undefined;\n}\n\nexport function generateLambdaTerraform(\n  workspaceName: WorkspaceName,\n  projectName: ProjectName,\n  opts: WorkspaceProjectTerraformLambda\n): string {\n  const {api, webAppName, alarmEmail, cloudwatchTriggerMinutes, domain, authentication} = opts;\n  return `\n# Define any extra role for the lambda here\ndata \"aws_iam_policy_document\" \"${projectName}_extra_policy\" {\n  ${\n    authentication?.enabled\n      ? `statement {\n    actions = [\n      \"dynamodb:GetItem\",\n      \"dynamodb:BatchGetItem\",\n      \"dynamodb:Query\",\n      \"dynamodb:Scan\",\n      \"dynamodb:PutItem\",\n      \"dynamodb:UpdateItem\",\n      \"dynamodb:DeleteItem\",\n    ]\n    resources = [${\n      webAppName === undefined\n        ? ''\n        : `\n      \"\\${aws_dynamodb_table.${lowerCase(webAppName)}_user_table.arn}\",\n      \"\\${aws_dynamodb_table.${lowerCase(webAppName)}_user_table.arn}/index/*\",\n      \"\\${aws_dynamodb_table.${lowerCase(webAppName)}_user_session_table.arn}\",\n      \"\\${aws_dynamodb_table.${lowerCase(webAppName)}_user_session_table.arn}/index/*\",\n    `\n    }]\n  }`\n      : ''\n  }${\n    webAppName !== undefined\n      ? `\n\n  statement {\n    actions = [\n      \"s3:GetObject\",\n      \"s3:GetObjectTagging\"\n    ]\n    resources = [\n      \"\\${aws_s3_bucket.code.arn}/*\"\n    ]\n  }`\n      : ''\n  }\n}\n\nresource \"aws_lambda_function\" \"${projectName}\" {\n  function_name = \"${workspaceName}-${projectName}\"\n  s3_bucket     = aws_s3_object.${projectName}_archive.bucket\n  s3_key        = aws_s3_object.${projectName}_archive.key\n  handler       = \"index.handler\"\n  runtime       = \"nodejs20.x\"\n  role          = aws_iam_role.${projectName}_role.arn\n  timeout       = 900 // 15 minutes\n  memory_size   = 128 // Mo\n  environment {\n    variables = {${\n      api\n        ? `\n      NODE_OPTIONS            = \"--enable-source-maps\"\n      CLOUDFRONT_HEADER_NAME  = random_string.${projectName}_cloudfront_header_name.result\n      CLOUDFRONT_HEADER_VALUE = random_string.${projectName}_cloudfront_header_value.result`\n        : `\n      NODE_OPTIONS = \"--enable-source-maps\"`\n    }\n    }\n  }\n}\n\noutput \"${projectName}_function_name\" {\n  value       = aws_lambda_function.${projectName}.function_name\n  description = \"Function name of the \\\\\"${workspaceName}-${projectName}\\\\\" lambda\"\n}\n${\n  api\n    ? `\n# Lambda URL\n\nresource \"aws_lambda_function_url\" \"${projectName}\" {\n  function_name      = aws_lambda_function.${projectName}.function_name\n  authorization_type = \"NONE\"\n}\n\noutput \"${projectName}_url\" {\n  value       = \"${\n    domain\n      ? `https://${domain.subDomain}.${domain.rootDomain}/`\n      : `https://\\${aws_cloudfront_distribution.${projectName}.domain_name}/`\n  }\"\n  description = \"URL of \\\\\"${projectName}\\\\\"\"\n}${\n        domain !== undefined\n          ? `\n\n# Domain\n\ndata \"aws_route53_zone\" \"${projectName}\" {\n  name = \"${domain.rootDomain}\"\n}\n\nresource \"aws_route53_record\" \"${projectName}_a\" {\n  zone_id = data.aws_route53_zone.${projectName}.zone_id\n  name    = \"${domain.subDomain}.${domain.rootDomain}\"\n  type    = \"A\"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${projectName}.domain_name\n    zone_id                = aws_cloudfront_distribution.${projectName}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource \"aws_route53_record\" \"${projectName}_aaaa\" {\n  zone_id = data.aws_route53_zone.${projectName}.zone_id\n  name    = \"${domain.subDomain}.${domain.rootDomain}\"\n  type    = \"AAAA\"\n\n  alias {\n    name                   = aws_cloudfront_distribution.${projectName}.domain_name\n    zone_id                = aws_cloudfront_distribution.${projectName}.hosted_zone_id\n    evaluate_target_health = false\n  }\n}\n\nresource \"aws_acm_certificate\" \"${projectName}\" {\n  domain_name               = \"*.${domain.subDomain}.${domain.rootDomain}\"\n  subject_alternative_names = [\"${domain.subDomain}.${domain.rootDomain}\"]\n  validation_method         = \"DNS\"\n  provider                  = aws.us-east-1\n}\n\nresource \"aws_route53_record\" \"${projectName}_certificate_validation\" {\n  for_each = {\n    for dvo in aws_acm_certificate.${projectName}.domain_validation_options : dvo.domain_name => {\n      name   = dvo.resource_record_name\n      record = dvo.resource_record_value\n      type   = dvo.resource_record_type\n    }\n  }\n  provider        = aws.us-east-1\n  allow_overwrite = true\n  name            = each.value.name\n  records         = [each.value.record]\n  ttl             = 60\n  type            = each.value.type\n  zone_id         = data.aws_route53_zone.${projectName}.zone_id\n}\n\nresource \"aws_acm_certificate_validation\" \"${projectName}\" {\n  provider                = aws.us-east-1\n  certificate_arn         = aws_acm_certificate.${projectName}.arn\n  validation_record_fqdns = [for record in aws_route53_record.${projectName}_certificate_validation : record.fqdn]\n}`\n          : ''\n      }\n\n# Cloudfront Distribution\n\nresource \"random_string\" \"${projectName}_cloudfront_header_name\" {\n  length  = 16\n  upper   = false\n  numeric = false\n  special = false\n}\n\nresource \"random_string\" \"${projectName}_cloudfront_header_value\" {\n  length  = 32\n  special = false\n}\n\nresource \"aws_cloudfront_distribution\" \"${projectName}\" {\n  origin {\n    # Remove \"https://\" prefix and \"/\" suffix\n    domain_name = replace(replace(aws_lambda_function_url.${projectName}.function_url, \"https://\", \"\"), \"/\", \"\")\n    origin_id   = aws_lambda_function.${projectName}.function_name\n\n    custom_origin_config {\n      https_port             = 443\n      http_port              = 80\n      origin_protocol_policy = \"https-only\"\n      origin_ssl_protocols   = [\"TLSv1.2\"]\n    }\n\n    custom_header {\n      name  = random_string.${projectName}_cloudfront_header_name.result\n      value = random_string.${projectName}_cloudfront_header_value.result\n    }\n  }\n\n  enabled             = true\n  wait_for_deployment = false\n  is_ipv6_enabled     = true\n  price_class         = \"PriceClass_100\"${\n    domain\n      ? `\n  aliases             = [\"${domain.subDomain}.${domain.rootDomain}\"]`\n      : ''\n  }\n\n  default_cache_behavior {\n    allowed_methods        = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods         = [\"HEAD\", \"GET\"]\n    compress               = true\n    target_origin_id       = aws_lambda_function.${projectName}.function_name\n    viewer_protocol_policy = \"redirect-to-https\"\n    # Managed-CachingDisabled\n    cache_policy_id = \"4135ea2d-6df8-44a3-9df3-4b5a84be39ad\"\n    # Managed-AllViewerExceptHostHeader\n    origin_request_policy_id = \"b689b0a8-53d0-40ab-baf2-68738e2966ac\"\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {${\n    domain\n      ? `\n    acm_certificate_arn      = aws_acm_certificate.${projectName}.arn\n    ssl_support_method       = \"sni-only\"\n    minimum_protocol_version = \"TLSv1.2_2021\"`\n      : `\n    cloudfront_default_certificate = true`\n  }\n  }\n}`\n    : ''\n}\n${\n  cloudwatchTriggerMinutes !== undefined\n    ? `# Cloudwatch trigger\n\nresource \"aws_lambda_permission\" \"cloudwatch_invoke_${projectName}\" {\n  statement_id  = \"AllowExecutionFromCloudWatch\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.${projectName}.arn\n  principal     = \"events.amazonaws.com\"\n  source_arn    = aws_cloudwatch_event_rule.${projectName}_trigger_rate.arn\n}\n\nresource \"aws_cloudwatch_event_rule\" \"${projectName}_trigger_rate\" {\n  name_prefix         = \"${projectName}.rate-${cloudwatchTriggerMinutes}-minutes.\"\n  schedule_expression = \"rate(${cloudwatchTriggerMinutes} minute${\n    cloudwatchTriggerMinutes > 1 ? 's' : ''\n  })\"\n}\n\nresource \"aws_cloudwatch_event_target\" \"${projectName}_trigger_target\" {\n  rule = aws_cloudwatch_event_rule.${projectName}_trigger_rate.name\n  arn  = aws_lambda_function.${projectName}.arn\n}\n`\n    : ''\n}\n# IAM role\n\nresource \"aws_iam_role\" \"${projectName}_role\" {\n  name = \"${workspaceName}-${projectName}-role\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Principal = {\n          Service = \"lambda.amazonaws.com\"\n        }\n        Effect = \"Allow\"\n      },\n    ]\n  })\n  \n  inline_policy {\n    name   = \"${workspaceName}-${projectName}-extra-policy\"\n    policy = data.aws_iam_policy_document.${projectName}_extra_policy.json\n  }\n}\n\noutput \"${projectName}_role_arn\" {\n  value = aws_iam_role.${projectName}_role.arn\n}\n\n# Cloudwatch logging\n\nresource \"aws_cloudwatch_log_group\" \"${projectName}\" {\n  name = \"/aws/lambda/${workspaceName}-${projectName}\"\n}\n\nresource \"aws_iam_policy\" \"${projectName}_cloudwatch\" {\n  name = \"${workspaceName}-${projectName}-cloudwatch-policy\"\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = [\n          \"logs:CreateLogStream\",\n          \"logs:PutLogEvents\",\n        ]\n        Effect = \"Allow\"\n        Resource = [\n          \"\\${aws_cloudwatch_log_group.${projectName}.arn}\",\n          \"\\${aws_cloudwatch_log_group.${projectName}.arn}:*\",\n        ]\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy_attachment\" \"${projectName}_cloudwatch\" {\n  role       = aws_iam_role.${projectName}_role.name\n  policy_arn = aws_iam_policy.${projectName}_cloudwatch.arn\n}\n${\n  alarmEmail !== undefined\n    ? `\n# Cloudwatch error monitoring\n\nresource \"aws_cloudwatch_log_metric_filter\" \"${projectName}_log_errors\" {\n  name           = \"${workspaceName}-${projectName}-log-error-metric-filter\"\n  pattern        = \"[ts, id, level = \\\\\"ERROR\\\\\", msg]\"\n  log_group_name = aws_cloudwatch_log_group.${projectName}.name\n\n  metric_transformation {\n    name          = \"${workspaceName}-${projectName}-errors\"\n    namespace     = \"${workspaceName}\"\n    value         = \"1\"\n    default_value = \"0\"\n    unit          = \"Count\"\n  }\n}\n\nresource \"aws_cloudwatch_metric_alarm\" \"${projectName}_log_errors\" {\n  alarm_name          = \"${workspaceName}-${projectName}-log-error-metric-alarm\"\n  metric_name         = aws_cloudwatch_log_metric_filter.${projectName}_log_errors.metric_transformation[0].name\n  namespace           = aws_cloudwatch_log_metric_filter.${projectName}_log_errors.metric_transformation[0].namespace\n  evaluation_periods  = 1\n  period              = 3600\n  statistic           = \"Sum\"\n  comparison_operator = \"GreaterThanOrEqualToThreshold\"\n  threshold           = 1\n  actions_enabled     = true\n  alarm_actions       = [aws_sns_topic.${projectName}_log_errors.arn]\n  ok_actions          = [aws_sns_topic.${projectName}_log_errors.arn]\n  treat_missing_data  = \"notBreaching\"\n}\n\nresource \"aws_sns_topic\" \"${projectName}_log_errors\" {\n  name = \"${workspaceName}-${projectName}-log-error-sns-topic\"\n}\n\nresource \"aws_sns_topic_subscription\" \"${projectName}_log_errors\" {\n  endpoint  = \"${alarmEmail}\"\n  protocol  = \"email\"\n  topic_arn = aws_sns_topic.${projectName}_log_errors.arn\n}\n`\n    : ''\n}\n# Dummy source code useful only during the initial setup\nresource \"aws_s3_object\" \"${projectName}_archive\" {\n  bucket         = aws_s3_bucket.code.id\n  key            = \"${projectName}/dist.zip\"\n  content_base64 = \"UEsDBBQACAAIAGaKwlYAAAAAAAAAADYAAAAIACAAaW5kZXguanNVVA0AB3AIemRyCHpkcAh6ZHV4CwABBPUBAAAEFAAAAEutKMgvKinWy0jMS8lJLVKwVUgsrsxLVkgrzUsuyczPU9DQVKjmUlAoSi0pLcpTUFe35qq15gIAUEsHCP0ak1o4AAAANgAAAFBLAQIUAxQACAAIAGaKwlb9GpNaOAAAADYAAAAIACAAAAAAAAAAAACkgQAAAABpbmRleC5qc1VUDQAHcAh6ZHIIemRwCHpkdXgLAAEE9QEAAAQUAAAAUEsFBgAAAAABAAEAVgAAAI4AAAAAAA==\"\n}\n\n`.trim();\n}\n","import {WorkspaceName} from '@src/models';\nimport {lowerCase, pascalCase} from '@src/string_utils';\n\nexport function generateDynamoUserTerraform(workspaceName: WorkspaceName, appName: string): string {\n  const prefixLower = lowerCase(appName);\n  const prefixPascal = `${pascalCase(workspaceName)}${pascalCase(appName)}`;\n  return `\noutput \"${prefixLower}_user_table_name\" {\n  value = aws_dynamodb_table.${prefixLower}_user_table.name\n}\n\noutput \"${prefixLower}_user_index_name\" {\n  value = {\n    for obj in aws_dynamodb_table.${prefixLower}_user_table.global_secondary_index : \"${prefixLower}_user_by_\\${obj.hash_key}\\${length(obj.range_key) > 0 ? \"_sorted_by_\\${obj.range_key}\" : \"\"}\" => obj.name\n  }\n}\n\nresource \"aws_dynamodb_table\" \"${prefixLower}_user_table\" {\n  name         = \"${prefixPascal}User\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"id\"\n\n  attribute {\n    name = \"id\"\n    type = \"S\"\n  }\n}`.trim();\n}\n","import {WorkspaceName} from '@src/models';\nimport {lowerCase, pascalCase} from '@src/string_utils';\n\nexport function generateDynamoUserSessionTerraform(\n  workspaceName: WorkspaceName,\n  appName: string\n): string {\n  const prefixLower = lowerCase(appName);\n  const prefixPascal = `${pascalCase(workspaceName)}${pascalCase(appName)}`;\n  return `output \"${prefixLower}_user_session_table_name\" {\n  value = aws_dynamodb_table.${prefixLower}_user_session_table.name\n}\n\noutput \"${prefixLower}_user_session_index_name\" {\n  value = {\n    for obj in aws_dynamodb_table.${prefixLower}_user_session_table.global_secondary_index : \"${prefixLower}_user_session_by_\\${obj.hash_key}\\${ length(obj.range_key) > 0 ? \"_sorted_by_\\${obj.range_key}\" : \"\" }\" => obj.name\n  }\n}\n\nresource \"aws_dynamodb_table\" \"${prefixLower}_user_session_table\" {\n  name         = \"${prefixPascal}UserSession\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"token\"\n\n  attribute {\n    name = \"token\"\n    type = \"S\"\n  }\n\n  ttl {\n    attribute_name = \"expiresAt\"\n    enabled        = true\n  }\n}`.trim();\n}\n","import {join} from 'node:path';\n\nimport {maybeReadFile, prettyJson, writeRawFile} from '@src/fs';\nimport {ProjectName, WorkspaceFragment, WorkspaceFragmentType} from '@src/models';\nimport {DEFAULT_REGION, getProjectsFromWorkspaceFragment} from '@src/project/generate_workspace';\nimport {\n  asBoolean,\n  asMap,\n  asMapArray,\n  asNumber,\n  asString,\n  asStringOrThrow,\n  removeUndefined,\n} from '@src/type_utils';\n\nexport function generateCodeWorkspace(\n  workspaceName: string,\n  workspaceFragments: WorkspaceFragment[]\n): Record<string, unknown> {\n  const projects = workspaceFragments.flatMap(f => getProjectsFromWorkspaceFragment(f));\n  const projectNames = projects.map(p => p.projectName);\n  return {\n    folders: [\n      ...projectNames.map(p => ({path: p})),\n      {path: 'terraform'},\n      {path: '.', name: 'root'},\n    ],\n    settings: {\n      'window.title': `${workspaceName}\\${separator}\\${activeEditorShort}`,\n      'files.exclude': Object.fromEntries([\n        ...projectNames.map(p => [p, true]),\n        ['terraform', true],\n      ]),\n      'editor.acceptSuggestionOnCommitCharacter': false,\n      'editor.suggestSelection': 'first',\n      'vsintellicode.modify.editor.suggestSelection': 'automaticallyOverrodeDefaultValue',\n      'explorer.confirmDelete': false,\n      'git.autofetch': true,\n      'git.confirmSync': false,\n      'typescript.preferences.importModuleSpecifier': 'non-relative',\n      'eslint.lintTask.enable': true,\n      'eslint.useESLintClass': true,\n      'editor.formatOnSave': true,\n      'editor.codeActionsOnSave': {\n        'source.fixAll': 'never',\n        'source.fixAll.eslint': 'explicit',\n      },\n      'editor.defaultFormatter': 'esbenp.prettier-vscode',\n      'editor.linkedEditing': true,\n      'emmet.showExpandedAbbreviation': 'never',\n      'files.associations': {\n        '*.tf': 'terraform',\n      },\n      '[typescript]': {\n        'editor.defaultFormatter': 'esbenp.prettier-vscode',\n      },\n      '[typescriptreact]': {\n        'editor.defaultFormatter': 'esbenp.prettier-vscode',\n      },\n      '[terraform]': {\n        'editor.defaultFormatter': 'hashicorp.terraform',\n      },\n    },\n    extensions: {\n      recommendations: [\n        'dbaeumer.vscode-eslint',\n        'esbenp.prettier-vscode',\n        'VisualStudioExptTeam.vscodeintellicode',\n        'styled-components.vscode-styled-components',\n        'naumovs.color-highlight',\n        'eamodio.gitlens',\n        'hashicorp.terraform',\n      ],\n    },\n  };\n}\n\nexport interface FileHash {\n  path: string;\n  hash: string;\n}\n\nexport interface WorkspaceOptions {\n  region: string;\n}\n\nexport interface Workspace {\n  fragments: WorkspaceFragment[];\n  version: string;\n  files: FileHash[];\n  options: WorkspaceOptions;\n}\n\nexport async function readWorkspace(workspacePath: string): Promise<Workspace | undefined> {\n  const workspaceContent = await maybeReadFile(join(workspacePath, '.workspace'));\n  if (workspaceContent === undefined) {\n    return undefined;\n  }\n  const workspaceData = asMap(JSON.parse(workspaceContent), {});\n\n  const fragments = removeUndefined(\n    asMapArray(workspaceData['fragments'], []).map<WorkspaceFragment | undefined>(fragData => {\n      const type = asString<WorkspaceFragmentType>(fragData['type']);\n      if (type === undefined) {\n        return undefined;\n      } else if (type === WorkspaceFragmentType.Shared) {\n        const frag: WorkspaceFragment = {type: WorkspaceFragmentType.Shared};\n        return frag;\n      } else if (type === WorkspaceFragmentType.SharedWeb) {\n        const frag: WorkspaceFragment = {type: WorkspaceFragmentType.SharedWeb};\n        return frag;\n      } else if (type === WorkspaceFragmentType.SharedNode) {\n        const frag: WorkspaceFragment = {type: WorkspaceFragmentType.SharedNode};\n        return frag;\n      } else if (type === WorkspaceFragmentType.WebApp) {\n        const alarmEmail = asString(fragData['alarmEmail']);\n        const appName = asStringOrThrow(fragData['appName']);\n        const authenticationData = asMap(fragData['authentication'], {});\n        const enabled = asBoolean(authenticationData['enabled'], false);\n        const domain = asString(fragData['domain']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.WebApp,\n          alarmEmail,\n          appName,\n          authentication: {enabled},\n          domain,\n        };\n        return frag;\n      } else if (type === WorkspaceFragmentType.StaticWebsite) {\n        const websiteName = asStringOrThrow<ProjectName>(fragData['websiteName']);\n        const domain = asString(fragData['domain']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.StaticWebsite,\n          websiteName,\n          domain,\n        };\n        return frag;\n      } else if (type === WorkspaceFragmentType.ApiLambda) {\n        const alarmEmail = asString(fragData['alarmEmail']);\n        const apiName = asStringOrThrow<ProjectName>(fragData['apiName']);\n        const domain = asString(fragData['domain']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.ApiLambda,\n          alarmEmail,\n          apiName,\n          domain,\n        };\n        return frag;\n      } else if (type === WorkspaceFragmentType.NodeScript) {\n        const scriptName = asStringOrThrow<ProjectName>(fragData['scriptName']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.NodeScript,\n          scriptName,\n        };\n        return frag;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      else if (type === WorkspaceFragmentType.StandaloneLambda) {\n        const lambdaName = asStringOrThrow<ProjectName>(fragData['lambdaName']);\n        const alarmEmail = asString(fragData['alarmEmail']);\n        const cloudwatchTriggerMinutes = asNumber(fragData['cloudwatchTriggerMinutes']);\n        const frag: WorkspaceFragment = {\n          type: WorkspaceFragmentType.StandaloneLambda,\n          lambdaName,\n          alarmEmail,\n          cloudwatchTriggerMinutes,\n        };\n        return frag;\n      }\n      return undefined;\n    })\n  );\n\n  const version = asStringOrThrow(workspaceData['version']);\n  const files = removeUndefined(\n    asMapArray(workspaceData['files'], []).map<FileHash | undefined>(fileData => {\n      const path = asString(fileData['path']);\n      const hash = asString(fileData['hash']);\n      if (path === undefined || hash === undefined) {\n        return undefined;\n      }\n      return {path, hash};\n    })\n  );\n\n  const optionsData = asMap(workspaceData['options'], {});\n  const region = asString(optionsData['region'], DEFAULT_REGION);\n  const options: WorkspaceOptions = {region};\n\n  return {fragments, version, files, options};\n}\n\nexport async function writeWorkspace(workspacePath: string, workspace: Workspace): Promise<void> {\n  workspace.files.sort((f1, f2) => f1.path.localeCompare(f2.path));\n  await writeRawFile(join(workspacePath, '.workspace'), await prettyJson(workspace));\n}\n","import {execSync} from 'node:child_process';\nimport {join, relative} from 'node:path';\nimport {fileURLToPath} from 'node:url';\n\nimport {listFiles, prettyJs, prettyJson, prettyJsonc, readFile, writeRawFile} from '@src/fs';\nimport {md5} from '@src/hash';\nimport {log} from '@src/logger';\nimport {\n  ProjectName,\n  ProjectType,\n  WorkspaceFragment,\n  WorkspaceFragmentType,\n  WorkspaceName,\n} from '@src/models';\nimport {generateProject} from '@src/project/generate_project';\nimport {generateGitIgnore} from '@src/project/gitignore';\nimport {generateWorkspacePackageJson} from '@src/project/package_json';\nimport {\n  AppDomain,\n  generateCommonTerraform,\n  generateWorkspaceProjectTerraform,\n} from '@src/project/terraform/all';\nimport {generateDynamoUserTerraform} from '@src/project/terraform/dynamo_user';\nimport {generateDynamoUserSessionTerraform} from '@src/project/terraform/dynamo_user_session';\nimport {WorkspaceProjectTerraformFrontend} from '@src/project/terraform/frontend';\nimport {WorkspaceProjectTerraformLambda} from '@src/project/terraform/lambda';\nimport {\n  FileHash,\n  generateCodeWorkspace,\n  Workspace,\n  WorkspaceOptions,\n  writeWorkspace,\n} from '@src/project/vscode_workspace';\nimport {lowerCase, pascalCase} from '@src/string_utils';\nimport {neverHappens, removeUndefined} from '@src/type_utils';\nimport {PACKAGE_VERSIONS} from '@src/versions';\n\nexport const DEFAULT_REGION = 'eu-west-3';\nconst TEMPLATES_PATH = join(fileURLToPath(import.meta.url), '../templates');\n\ntype Flag = Record<string, string>;\nconst booleanFlag = (bool: boolean): string => (bool ? 'true' : 'false');\n\nexport function hasApi(allFragments: WorkspaceFragment[]): boolean {\n  return (\n    allFragments.find(\n      f => f.type === WorkspaceFragmentType.ApiLambda || f.type === WorkspaceFragmentType.WebApp\n    ) !== undefined\n  );\n}\n\nexport type WorkspaceProjectTerraform =\n  | WorkspaceProjectTerraformLambda\n  | WorkspaceProjectTerraformFrontend\n  | {type: 'no-terraform'};\n\nexport interface WorkspaceProject {\n  projectName: ProjectName;\n  type: ProjectType;\n  fromFragment: WorkspaceFragment;\n  vars: Record<string, string>;\n  flags: (allFragments: WorkspaceFragment[]) => Flag;\n  terraform: WorkspaceProjectTerraform;\n}\n\nfunction fragmentFlags(baseFlags: Flag): (allFragments: WorkspaceFragment[]) => Flag {\n  return (allFragments: WorkspaceFragment[]): Flag => {\n    const workspaceFlags: Flag = {\n      HAS_API: booleanFlag(hasApi(allFragments)),\n    };\n    return {...workspaceFlags, ...baseFlags};\n  };\n}\n\n// Parse a string into its domain/subdomain.\n// We assume the root domain (the hosted zone registered in AWS)\n// is the in form of <second-level-domain>.<first-level-domain> (eg: \"matthis.link\")\nfunction parseDomain(domainStr?: string): AppDomain | undefined {\n  if (domainStr === undefined) {\n    return undefined;\n  }\n  const parts = domainStr.split('.');\n  const rootDomain = parts.slice(-2).join('.'); // eslint-disable-line @typescript-eslint/no-magic-numbers\n  const subDomain = parts.slice(0, -2).join('.'); // eslint-disable-line @typescript-eslint/no-magic-numbers\n  return {subDomain, rootDomain};\n}\n\nexport function getProjectsFromWorkspaceFragment(fragment: WorkspaceFragment): WorkspaceProject[] {\n  if (fragment.type === WorkspaceFragmentType.StaticWebsite) {\n    return [\n      {\n        projectName: fragment.websiteName,\n        type: ProjectType.Web,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.websiteName,\n          __APP_NAME__: fragment.websiteName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'frontend',\n          domain: parseDomain(fragment.domain),\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.StandaloneLambda) {\n    return [\n      {\n        projectName: fragment.lambdaName,\n        type: ProjectType.LambdaFunction,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.lambdaName,\n          __PROJECT_NAME_UPPERCASE__: fragment.lambdaName.toUpperCase(),\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'lambda',\n          api: false,\n          webAppName: undefined,\n          alarmEmail: fragment.alarmEmail,\n          cloudwatchTriggerMinutes: fragment.cloudwatchTriggerMinutes,\n          domain: undefined,\n          authentication: undefined,\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.ApiLambda) {\n    return [\n      {\n        projectName: fragment.apiName,\n        type: ProjectType.LambdaApi,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.apiName,\n          __PROJECT_NAME_UPPERCASE__: fragment.apiName.toUpperCase(),\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'lambda',\n          api: true,\n          webAppName: undefined,\n          alarmEmail: fragment.alarmEmail,\n          cloudwatchTriggerMinutes: undefined,\n          domain: parseDomain(fragment.domain),\n          authentication: undefined,\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.WebApp) {\n    const backendName = `${fragment.appName}_backend` as ProjectName;\n    const frontendName = `${fragment.appName}_frontend` as ProjectName;\n    const vars = {\n      __APP_NAME__: fragment.appName,\n      __APP_NAME_UPPERCASE__: fragment.appName.toUpperCase(),\n      __APP_NAME_PASCALCASE__: pascalCase(fragment.appName),\n    };\n    const flags = fragmentFlags({\n      AUTHENTICATION: booleanFlag(fragment.authentication.enabled),\n    });\n    return [\n      {\n        projectName: frontendName,\n        type: ProjectType.Web,\n        fromFragment: fragment,\n        vars,\n        flags,\n        terraform: {\n          type: 'frontend',\n          domain:\n            fragment.domain === undefined ? undefined : parseDomain(`static.${fragment.domain}`),\n        },\n      },\n      {\n        projectName: backendName,\n        type: ProjectType.LambdaWebApi,\n        fromFragment: fragment,\n        vars,\n        flags,\n        terraform: {\n          type: 'lambda',\n          api: true,\n          webAppName: fragment.appName,\n          alarmEmail: fragment.alarmEmail,\n          cloudwatchTriggerMinutes: undefined,\n          domain: parseDomain(fragment.domain),\n          authentication: fragment.authentication,\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.NodeScript) {\n    return [\n      {\n        projectName: fragment.scriptName,\n        type: ProjectType.NodeScript,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: fragment.scriptName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.SharedNode) {\n    const projectName = 'shared-node' as ProjectName;\n    return [\n      {\n        projectName,\n        type: ProjectType.SharedNode,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: projectName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n  } else if (fragment.type === WorkspaceFragmentType.SharedWeb) {\n    const projectName = 'shared-web' as ProjectName;\n    return [\n      {\n        projectName,\n        type: ProjectType.SharedWeb,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: projectName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  } else if (fragment.type === WorkspaceFragmentType.Shared) {\n    const projectName = 'shared' as ProjectName;\n    return [\n      {\n        projectName,\n        type: ProjectType.Shared,\n        fromFragment: fragment,\n        vars: {\n          __PROJECT_NAME__: projectName,\n        },\n        flags: fragmentFlags({}),\n        terraform: {\n          type: 'no-terraform',\n        },\n      },\n    ];\n  }\n  neverHappens(fragment, `Unknown ProjectType ${(fragment as WorkspaceFragment).type}`);\n}\n\nexport async function generateWorkspace(\n  dst: string,\n  workspaceName: WorkspaceName,\n  workspaceFragments: WorkspaceFragment[],\n  workspaceOptions: WorkspaceOptions,\n  workspace: Workspace | undefined\n): Promise<void> {\n  const projects = workspaceFragments.flatMap(f => getProjectsFromWorkspaceFragment(f));\n\n  // Create projects files from templates\n  const projectFiles = await Promise.all(\n    projects.map(\n      async project =>\n        await generateProject({\n          dst,\n          project,\n          allFragments: workspaceFragments,\n          workspace,\n          workspaceName,\n        })\n    )\n  );\n\n  // Generate workspace root files\n  const SCRIPTS_PATH = join(fileURLToPath(import.meta.url), '../scripts');\n  const writeFile = async (path: string, file: string): Promise<FileHash> =>\n    await writeWorkspaceFile(workspace, dst, path, file);\n  const workspaceFiles = await Promise.all([\n    // package.json\n    writeFile(\n      'package.json',\n      await prettyJson(generateWorkspacePackageJson(workspaceName, projects))\n    ),\n    // app.code-workspace\n    writeFile(\n      'app.code-workspace',\n      await prettyJsonc(generateCodeWorkspace(workspaceName, workspaceFragments))\n    ),\n    // .gitignore\n    writeFile('.gitignore', generateGitIgnore()),\n    // setup.js\n    writeFile('setup.js', await prettyJs(await readFile(join(SCRIPTS_PATH, 'setup.js')))),\n    // deploy.js\n    writeFile(\n      'deploy.js',\n      await prettyJs(\n        await readFile(join(SCRIPTS_PATH, 'deploy.js')).then(res =>\n          res.replaceAll('__WORKSPACE_NAME__', workspaceName)\n        )\n      )\n    ),\n    // build.js\n    writeFile('build.js', await prettyJs(await readFile(join(SCRIPTS_PATH, 'build.js')))),\n  ]);\n\n  // Vscode folder\n  const vscodePath = join(TEMPLATES_PATH, '.vscode');\n  const vscodeFileList = await listFiles(vscodePath);\n  const vscodeFiles = await Promise.all(\n    vscodeFileList.map(async file => {\n      const relativePath = relative(vscodePath, file);\n      const dstPath = join('.vscode', relativePath);\n      const content = await readFile(file);\n      return await writeFile(dstPath, content);\n    })\n  );\n\n  // Terraform folder generation\n  const terraformFiles = await Promise.all([\n    ...workspaceFragments\n      .filter(frag => frag.type === WorkspaceFragmentType.WebApp)\n      .filter(frag => frag.authentication.enabled)\n      .flatMap(frag => {\n        return [\n          writeFile(\n            join('terraform', `dynamo_table_${lowerCase(frag.appName)}_user.tf`),\n            addLineBreak(generateDynamoUserTerraform(workspaceName, frag.appName))\n          ),\n          writeFile(\n            join('terraform', `dynamo_table_${lowerCase(frag.appName)}_user_session.tf`),\n            addLineBreak(generateDynamoUserSessionTerraform(workspaceName, frag.appName))\n          ),\n        ];\n      }),\n    writeFile(\n      join('terraform', 'base.tf'),\n      addLineBreak(generateCommonTerraform(workspaceName, projects, workspaceOptions))\n    ),\n    ...projects.map(async p => {\n      const content = generateWorkspaceProjectTerraform(workspaceName, p);\n      if (content === undefined) {\n        return;\n      }\n      const name = `${p.projectName}_terraform`;\n      return await writeFile(join('terraform', `${name}.tf`), addLineBreak(content));\n    }),\n  ]);\n\n  await writeWorkspace(dst, {\n    files: removeUndefined([\n      ...projectFiles.flat(),\n      ...workspaceFiles,\n      ...terraformFiles,\n      ...vscodeFiles,\n    ]),\n    fragments: workspaceFragments,\n    version: PACKAGE_VERSIONS.project,\n    options: workspaceOptions,\n  });\n\n  // Run setup.js\n  log('Running post install script');\n  const commands = [`cd ${dst}`, `node setup.js`, `git init`];\n  execSync(commands.join(' && '), {stdio: ['ignore', 'inherit', 'inherit']});\n\n  // Final instructions\n  log(`Run the following to get started:`);\n  log(`cd ${relative(process.cwd(), dst)}; code app.code-workspace; yarn watch`);\n}\n\nexport async function writeWorkspaceFile(\n  workspace: Workspace | undefined,\n  root: string,\n  path: string,\n  file: string\n): Promise<FileHash> {\n  const fileLines = file.split('\\n');\n  const fileToHash = fileLines.filter(line => !line.endsWith(' // @matthis/ignore')).join('\\n');\n  const newHash = md5(fileToHash);\n  const oldHash = workspace?.files.find(f => f.path === path)?.hash;\n  // Only write the file if it is different since last time we've generated the project.\n  // Prevent needlessly overwriting changes made in the project in between.\n  if (newHash !== oldHash) {\n    const fileToWrite = fileLines.map(l => l.replaceAll(' // @matthis/ignore', '')).join('\\n');\n    await writeRawFile(join(root, path), fileToWrite);\n  }\n  return {path, hash: newHash};\n}\n\nconst addLineBreak = (content: string): string =>\n  content.endsWith('\\n') ? content : `${content}\\n`;\n","export function generateGitIgnore(): string {\n  return `\n.DS_Store\nnode_modules\nbuild\ndist\ntmp\nyarn-error.log\n.yarn-warnings.log\nyarn.lock\nterraform/.terraform\nterraform/.terraform*\nterraform/*.tfstate.backup\nterraform/archives\n*/log\n/shared/src/env.ts\n/.build.lock\n    `.trim();\n}\n","import {createHash} from 'node:crypto';\n\nexport function md5(data: string | Buffer): string {\n  const content = typeof data === 'string' ? data : data.toString();\n  return createHash('md5').update(content).digest('hex');\n}\n\nexport function hashPassword(password: string, salt: string): string {\n  return createHash('sha256').update(`${password}${salt}`).digest('base64');\n}\n","import {prompt} from 'prompts';\n\nimport {ProjectName, WebAppAuthentication} from '@src/models';\nimport {DEFAULT_REGION} from '@src/project/generate_workspace';\nimport {asStringOrThrow} from '@src/type_utils';\n\n//\n// WORKSPACE NAME\n//\n\nexport async function askForWorkspaceName(): Promise<string> {\n  const {workspaceName} = await prompt({\n    type: 'text',\n    name: 'workspaceName',\n    message: 'Workspace name',\n    validate: (v: string) => v.length > 0,\n  });\n  return asStringOrThrow(workspaceName);\n}\n\n//\n// WORKSPACE REGION\n//\n\nexport async function askForWorkspaceRegion(): Promise<string> {\n  const {workspaceRegion} = await prompt({\n    type: 'text',\n    name: 'workspaceRegion',\n    message: 'AWS Region',\n    initial: DEFAULT_REGION,\n    validate: (v: string) => v.length > 0,\n  });\n  return asStringOrThrow(workspaceRegion);\n}\n\n//\n// PROJECT NAME\n//\n\nconst VALID_PROJECT_NAME = /^[a-zA-Z0-9_]+$/u;\n\nexport async function askForProjectName(\n  question: string,\n  defaultValue: string,\n  takenNames: string[]\n): Promise<ProjectName> {\n  let initial = defaultValue;\n  if (takenNames.includes(initial)) {\n    let index = 2;\n    while (takenNames.includes(initial)) {\n      initial = `${defaultValue}_${index}`;\n      index++;\n    }\n  }\n\n  const {value} = await prompt({\n    type: 'text',\n    name: 'value',\n    message: question,\n    initial,\n    validate: (v: string) => v.length > 0,\n  });\n  if (typeof value !== 'string') {\n    throw new Error(`${question} is required`);\n  }\n  if (!VALID_PROJECT_NAME.test(value)) {\n    throw new Error(`Invalid project name \"${value}\". Allowed characters are a-z, A-Z, 0-9 and _`);\n  }\n  if (takenNames.includes(value)) {\n    throw new Error(`${value} is taken`);\n  }\n  return value as ProjectName;\n}\n\n//\n// ALARM EMAIL\n//\n\nexport async function askForAlarmEmail(defaultVal: boolean): Promise<string | undefined> {\n  const alarm = await prompt({\n    type: 'confirm',\n    name: 'value',\n    message: 'Add an alarm when an error is logged?',\n    initial: defaultVal,\n  });\n  if (alarm.value !== true) {\n    return undefined;\n  }\n  const email = await prompt({\n    type: 'text',\n    name: 'value',\n    message: 'Which email to send the alarm to?',\n  });\n  if (typeof email.value !== 'string') {\n    return undefined;\n  }\n  return email.value;\n}\n\nexport async function askForAlarmEmailValue(): Promise<string | undefined> {\n  const email = await prompt({\n    type: 'text',\n    name: 'value',\n    message: 'Enter the email the alarm will be sent to (leave empty for no alarm).',\n  });\n  if (typeof email.value !== 'string') {\n    return undefined;\n  }\n  return email.value;\n}\n\n//\n// DOMAIN NAME\n//\n\nexport async function askForDomainName(): Promise<string | undefined> {\n  const useDomain = await prompt({\n    type: 'confirm',\n    name: 'value',\n    message: 'Use a custom domain?',\n  });\n  if (useDomain.value !== true) {\n    return undefined;\n  }\n  return await askForDomainNameValue();\n}\n\nexport async function askForDomainNameValue(): Promise<string | undefined> {\n  const domain = await prompt({\n    type: 'text',\n    name: 'value',\n    message: 'Enter the domain name (leave empty for no domain).',\n  });\n  if (typeof domain.value !== 'string' || domain.value.length === 0) {\n    return undefined;\n  }\n  return domain.value;\n}\n\n//\n// AUTHENTICATION\n//\n\nexport async function askForAuthentication(): Promise<WebAppAuthentication> {\n  const authenticationEnabled = await prompt({\n    type: 'confirm',\n    name: 'value',\n    message: 'Use authentication?',\n  });\n  return {enabled: authenticationEnabled.value === true};\n}\n\n//\n// CLOUDWATCH TRIGGER\n//\n\nexport async function askForCloudwatchTrigger(): Promise<number | undefined> {\n  const trigger = await prompt({\n    type: 'confirm',\n    name: 'value',\n    message: 'Add a Cloudwatch trigger?',\n    initial: true,\n  });\n  if (trigger.value !== true) {\n    return undefined;\n  }\n  return await askForCloudwatchTriggerValue();\n}\n\nexport async function askForCloudwatchTriggerValue(): Promise<number | undefined> {\n  const minutes = await prompt({\n    type: 'text',\n    name: 'value',\n    message: 'Enter the trigger period in minutes (leave empty for no trigger)',\n    initial: 1,\n  });\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const minutesValue = parseFloat(minutes.value);\n  if (Number.isNaN(minutesValue) || minutesValue <= 0) {\n    return undefined;\n  }\n  return minutesValue;\n}\n","import {prompt} from 'prompts';\n\nimport {WorkspaceFragment, WorkspaceFragmentType} from '@src/models';\nimport {\n  askForAlarmEmail,\n  askForAuthentication,\n  askForCloudwatchTrigger,\n  askForDomainName,\n  askForProjectName,\n} from '@src/project/ask_for_common';\nimport {getProjectsFromWorkspaceFragment} from '@src/project/generate_workspace';\nimport {neverHappens} from '@src/type_utils';\n\nconst I_AM_DONE = 'i_am_done';\n\ntype SelectableWorkspaceFragmentType = Exclude<\n  WorkspaceFragmentType,\n  WorkspaceFragmentType.Shared | WorkspaceFragmentType.SharedNode | WorkspaceFragmentType.SharedWeb\n>;\n\nconst WorkspaceFragmentTypeToString: Record<SelectableWorkspaceFragmentType, string> = {\n  [WorkspaceFragmentType.WebApp]: 'Web App',\n  [WorkspaceFragmentType.StaticWebsite]: 'Static Website',\n  [WorkspaceFragmentType.StandaloneLambda]: 'Standalone Lambda',\n  [WorkspaceFragmentType.ApiLambda]: 'API Lambda',\n  [WorkspaceFragmentType.NodeScript]: 'Node Script',\n};\n\nexport async function askForNewWorkspaceFragment(\n  frags: WorkspaceFragment[]\n): Promise<WorkspaceFragment[]> {\n  const takenNames = [\n    'terraform',\n    'shared',\n    'shared-web',\n    'shared-node',\n    ...frags.flatMap(frag => getProjectsFromWorkspaceFragment(frag).map(p => p.projectName)),\n  ];\n\n  const {workspaceFragmentType} = await prompt({\n    type: 'select',\n    name: 'workspaceFragmentType',\n    message: 'Choose a type of project to add to the workspace',\n    choices: [\n      ...Object.entries(WorkspaceFragmentTypeToString).map(([value, title]) => ({value, title})),\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n  if (workspaceFragmentType === undefined || workspaceFragmentType === I_AM_DONE) {\n    return frags;\n  }\n\n  const type = workspaceFragmentType as SelectableWorkspaceFragmentType;\n\n  if (type === WorkspaceFragmentType.StaticWebsite) {\n    const websiteName = await askForProjectName('Website project name', 'website', takenNames);\n    const domain = await askForDomainName();\n    return [...frags, {type, websiteName, domain}];\n  } else if (type === WorkspaceFragmentType.StandaloneLambda) {\n    const lambdaName = await askForProjectName('Lambda project name', 'lambda', takenNames);\n    const alarmEmail = await askForAlarmEmail(true);\n    const cloudwatchTriggerMinutes = await askForCloudwatchTrigger();\n    return [...frags, {type, lambdaName, alarmEmail, cloudwatchTriggerMinutes}];\n  } else if (type === WorkspaceFragmentType.ApiLambda) {\n    const apiName = await askForProjectName('API name', 'api', takenNames);\n    const alarmEmail = await askForAlarmEmail(false);\n    const domain = await askForDomainName();\n    return [...frags, {type, apiName, alarmEmail, domain}];\n  } else if (type === WorkspaceFragmentType.WebApp) {\n    const appName = await askForProjectName('App name', 'app', takenNames);\n    const alarmEmail = await askForAlarmEmail(false);\n    const domain = await askForDomainName();\n    const authentication = await askForAuthentication();\n    return [...frags, {type, appName, alarmEmail, domain, authentication}];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  else if (type === WorkspaceFragmentType.NodeScript) {\n    const scriptName = await askForProjectName('Script project name', 'script', takenNames);\n    return [...frags, {type, scriptName}];\n  }\n  neverHappens(type, `Unknown WorkspaceFragmentType \"${type}\"`);\n}\n","import {prompt} from 'prompts';\n\nimport {WorkspaceFragment, WorkspaceFragmentRegistry, WorkspaceFragmentType} from '@src/models';\nimport {\n  askForAlarmEmailValue,\n  askForAuthentication,\n  askForCloudwatchTriggerValue,\n  askForDomainNameValue,\n} from '@src/project/ask_for_common';\nimport {neverHappens} from '@src/type_utils';\n\nconst I_AM_DONE = 'i_am_done';\n\nexport async function askForWorkspaceUpdate(\n  frags: WorkspaceFragment[]\n): Promise<WorkspaceFragment[]> {\n  // Ask which project they want to update (get the index)\n  const {workspaceFragmentIndex} = await prompt({\n    type: 'select',\n    name: 'workspaceFragmentIndex',\n    message: 'Which project do you want to update',\n    choices: [\n      ...frags.map((frag, index) => ({value: index, title: workspaceFragmentString(frag)})),\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n  if (workspaceFragmentIndex === undefined || workspaceFragmentIndex === I_AM_DONE) {\n    return frags;\n  }\n\n  // Retrieve the workspace fragment\n  const index = workspaceFragmentIndex as number;\n  const frag = frags[index];\n  if (!frag) {\n    return frags;\n  }\n\n  // Ask for the updates\n  let hasChanged = true;\n  let newFrag = frag;\n  while (hasChanged) {\n    const nextNewFrag = await askForWorkspaceFragmentUpdate(newFrag);\n    hasChanged = nextNewFrag !== newFrag;\n    newFrag = nextNewFrag;\n  }\n\n  // Update the workspace\n  const newFrags = [...frags];\n  newFrags[index] = newFrag;\n  return newFrags;\n}\n\nasync function askForWorkspaceFragmentUpdate(frag: WorkspaceFragment): Promise<WorkspaceFragment> {\n  // Base fragments can not be updated\n  if (\n    frag.type === WorkspaceFragmentType.Shared ||\n    frag.type === WorkspaceFragmentType.SharedNode ||\n    frag.type === WorkspaceFragmentType.SharedWeb\n  ) {\n    return frag;\n  }\n\n  if (frag.type === WorkspaceFragmentType.StaticWebsite) {\n    return await askForStaticWebsiteFragmentUpdate(frag);\n  } else if (frag.type === WorkspaceFragmentType.StandaloneLambda) {\n    return await askForStandaloneLambdaFragmentUpdate(frag);\n  } else if (frag.type === WorkspaceFragmentType.ApiLambda) {\n    return await askForApiLambdaFragmentUpdate(frag);\n  } else if (frag.type === WorkspaceFragmentType.WebApp) {\n    return await askForWebAppFragmentUpdate(frag);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  else if (frag.type === WorkspaceFragmentType.NodeScript) {\n    return await askForNodeScriptFragmentUpdate(frag);\n  }\n  neverHappens(frag);\n}\n\nasync function askForStaticWebsiteFragmentUpdate(\n  frag: WorkspaceFragmentRegistry['static-website']\n): Promise<WorkspaceFragmentRegistry['static-website']> {\n  const {type, websiteName, domain} = frag;\n  const {attribute} = await prompt({\n    type: 'select',\n    name: 'attribute',\n    message: 'What do you want to update?',\n    choices: [\n      {title: `Domain name: ${domain ?? '<not set>'}`, value: 'domain'},\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n\n  if (attribute === undefined || attribute === I_AM_DONE) {\n    return frag;\n  }\n\n  if (attribute === 'domain') {\n    const domain = await askForDomainNameValue();\n    return {type, websiteName, domain};\n  }\n\n  return frag;\n}\n\nasync function askForStandaloneLambdaFragmentUpdate(\n  frag: WorkspaceFragmentRegistry['standalone-lambda']\n): Promise<WorkspaceFragmentRegistry['standalone-lambda']> {\n  const {type, lambdaName, alarmEmail, cloudwatchTriggerMinutes} = frag;\n  const {attribute} = await prompt({\n    type: 'select',\n    name: 'attribute',\n    message: 'What do you want to update?',\n    choices: [\n      {title: `Alarm email: ${alarmEmail ?? '<not set>'}`, value: 'alarmEmail'},\n      {\n        title: `Cloudwatch trigger (in min): ${cloudwatchTriggerMinutes ?? '<not set>'}`,\n        value: 'cloudwatchTriggerMinutes',\n      },\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n\n  if (attribute === undefined || attribute === I_AM_DONE) {\n    return frag;\n  }\n\n  if (attribute === 'alarmEmail') {\n    const alarmEmail = await askForAlarmEmailValue();\n    return {type, lambdaName, alarmEmail, cloudwatchTriggerMinutes};\n  }\n\n  if (attribute === 'cloudwatchTriggerMinutes') {\n    const cloudwatchTriggerMinutes = await askForCloudwatchTriggerValue();\n    return {type, lambdaName, alarmEmail, cloudwatchTriggerMinutes};\n  }\n\n  return frag;\n}\n\nasync function askForApiLambdaFragmentUpdate(\n  frag: WorkspaceFragmentRegistry['api-lambda']\n): Promise<WorkspaceFragmentRegistry['api-lambda']> {\n  const {type, apiName, alarmEmail, domain} = frag;\n  const {attribute} = await prompt({\n    type: 'select',\n    name: 'attribute',\n    message: 'What do you want to update?',\n    choices: [\n      {title: `Domain name: ${domain ?? '<not set>'}`, value: 'domain'},\n      {title: `Alarm email: ${alarmEmail ?? '<not set>'}`, value: 'alarmEmail'},\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n\n  if (attribute === undefined || attribute === I_AM_DONE) {\n    return frag;\n  }\n\n  if (attribute === 'domain') {\n    const domain = await askForDomainNameValue();\n    return {type, apiName, alarmEmail, domain};\n  }\n\n  if (attribute === 'alarmEmail') {\n    const alarmEmail = await askForAlarmEmailValue();\n    return {type, apiName, alarmEmail, domain};\n  }\n\n  return frag;\n}\n\nasync function askForWebAppFragmentUpdate(\n  frag: WorkspaceFragmentRegistry['web-app']\n): Promise<WorkspaceFragmentRegistry['web-app']> {\n  const {type, appName, alarmEmail, authentication, domain} = frag;\n  const {attribute} = await prompt({\n    type: 'select',\n    name: 'attribute',\n    message: 'What do you want to update?',\n    choices: [\n      {title: `Domain name: ${domain ?? '<not set>'}`, value: 'domain'},\n      {title: `Alarm email: ${alarmEmail ?? '<not set>'}`, value: 'alarmEmail'},\n      {title: `Authentication: ${authentication.enabled ? 'yes' : 'no'}`, value: 'authentication'},\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n\n  if (attribute === undefined || attribute === I_AM_DONE) {\n    return frag;\n  }\n\n  if (attribute === 'domain') {\n    const domain = await askForDomainNameValue();\n    return {type, appName, alarmEmail, authentication, domain};\n  }\n\n  if (attribute === 'alarmEmail') {\n    const alarmEmail = await askForAlarmEmailValue();\n    return {type, appName, alarmEmail, authentication, domain};\n  }\n\n  if (attribute === 'authentication') {\n    const authentication = await askForAuthentication();\n    return {type, appName, alarmEmail, authentication, domain};\n  }\n\n  return frag;\n}\n\nasync function askForNodeScriptFragmentUpdate(\n  frag: WorkspaceFragmentRegistry['node-script']\n): Promise<WorkspaceFragmentRegistry['node-script']> {\n  // const {type, scriptName} = frag;\n  const {attribute} = await prompt({\n    type: 'select',\n    name: 'attribute',\n    message: 'What do you want to update?',\n    choices: [{title: `I'm done`, value: I_AM_DONE}],\n  });\n\n  if (attribute === undefined || attribute === I_AM_DONE) {\n    return frag;\n  }\n\n  return frag;\n}\n\nfunction workspaceFragmentString(frag: WorkspaceFragment): string {\n  if (frag.type === WorkspaceFragmentType.Shared) {\n    return 'shared';\n  } else if (frag.type === WorkspaceFragmentType.SharedNode) {\n    return 'shared-node';\n  } else if (frag.type === WorkspaceFragmentType.SharedWeb) {\n    return 'shared-web';\n  } else if (frag.type === WorkspaceFragmentType.ApiLambda) {\n    return `${frag.apiName} (lambda api)`;\n  } else if (frag.type === WorkspaceFragmentType.NodeScript) {\n    return `${frag.scriptName} (node script)`;\n  } else if (frag.type === WorkspaceFragmentType.StandaloneLambda) {\n    return `${frag.lambdaName} (lambda function)`;\n  } else if (frag.type === WorkspaceFragmentType.StaticWebsite) {\n    return `${frag.websiteName} (static website)`;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  else if (frag.type === WorkspaceFragmentType.WebApp) {\n    return `${frag.appName} (web app)`;\n  }\n  neverHappens(frag);\n}\n","import {prompt} from 'prompts';\n\nimport {WorkspaceFragment} from '@src/models';\nimport {askForNewWorkspaceFragment} from '@src/project/ask_for_new_workspace_fragment';\nimport {askForWorkspaceUpdate} from '@src/project/ask_for_workspace_update';\n\nconst I_AM_DONE = 'i_am_done';\n\nexport async function askForWorkspaceFragments(\n  frags: WorkspaceFragment[]\n): Promise<WorkspaceFragment[]> {\n  const {action} = await prompt({\n    type: 'select',\n    name: 'action',\n    message: 'What do you want to do',\n    choices: [\n      {title: `Add a project`, value: 'add'},\n      {title: `Update a project`, value: 'update'},\n      {title: `I'm done`, value: I_AM_DONE},\n    ],\n  });\n\n  if (action === undefined || action === I_AM_DONE) {\n    return frags;\n  }\n\n  if (action === 'add') {\n    const newFrags = await askForNewWorkspaceFragment(frags);\n    return await askForWorkspaceFragments(newFrags);\n  }\n\n  if (action === 'update') {\n    const newFrags = await askForWorkspaceUpdate(frags);\n    return await askForWorkspaceFragments(newFrags);\n  }\n\n  return frags;\n}\n","import {mkdir} from 'node:fs/promises';\nimport {basename, join} from 'node:path';\n\nimport {error} from '@src/logger';\nimport {\n  WorkspaceFragment,\n  WorkspaceFragmentRegistry,\n  WorkspaceFragmentType,\n  WorkspaceName,\n} from '@src/models';\nimport {askForWorkspaceName, askForWorkspaceRegion} from '@src/project/ask_for_common';\nimport {askForWorkspaceFragments} from '@src/project/ask_for_workspace_fragments';\nimport {generateWorkspace} from '@src/project/generate_workspace';\nimport {readWorkspace, WorkspaceOptions} from '@src/project/vscode_workspace';\nimport {neverHappens} from '@src/type_utils';\n\nasync function initProject(): Promise<void> {\n  let workspaceName: string;\n  let workspacePath = process.cwd();\n  let frags: WorkspaceFragment[] = [];\n  let workspaceOptions: WorkspaceOptions;\n\n  // Check if we are already in a workspace, otherwise ask for the workspace name\n  const workspace = await readWorkspace(workspacePath);\n\n  if (workspace === undefined) {\n    workspaceName = await askForWorkspaceName();\n    workspacePath = join(workspacePath, workspaceName);\n    workspaceOptions = {region: await askForWorkspaceRegion()};\n    await mkdir(workspacePath);\n  } else {\n    workspaceName = basename(workspacePath);\n    workspaceOptions = workspace.options;\n    frags = removeBaseFragments(workspace.fragments);\n  }\n\n  // Ask for changes on the workspace\n  while (true) {\n    try {\n      frags = await askForWorkspaceFragments(frags);\n      break;\n    } catch (err: unknown) {\n      error(String(err));\n    }\n  }\n\n  const name = workspaceName as WorkspaceName;\n  await generateWorkspace(\n    workspacePath,\n    name,\n    refreshBaseFragments(frags),\n    workspaceOptions,\n    workspace\n  );\n}\n\ntype BaseFragment =\n  | WorkspaceFragmentRegistry['shared']\n  | WorkspaceFragmentRegistry['shared-node']\n  | WorkspaceFragmentRegistry['shared-web'];\ntype NonBaseFragment = Exclude<WorkspaceFragment, BaseFragment>;\n\nfunction removeBaseFragments(frags: WorkspaceFragment[]): NonBaseFragment[] {\n  return frags.filter(\n    frag =>\n      ![\n        WorkspaceFragmentType.Shared,\n        WorkspaceFragmentType.SharedNode,\n        WorkspaceFragmentType.SharedWeb,\n      ].includes(frag.type)\n  ) as NonBaseFragment[];\n}\n\nfunction refreshBaseFragments(frags: WorkspaceFragment[]): WorkspaceFragment[] {\n  // Remove base fragments\n  const newFrags: WorkspaceFragment[] = removeBaseFragments(frags);\n\n  // Analyze what type of base fragments we need\n  let needSharedWeb = false;\n  let needSharedNode = false;\n  for (const frag of frags) {\n    if (\n      frag.type === WorkspaceFragmentType.Shared ||\n      frag.type === WorkspaceFragmentType.SharedNode ||\n      frag.type === WorkspaceFragmentType.SharedWeb\n    ) {\n      // should never happen\n    } else if (\n      frag.type === WorkspaceFragmentType.ApiLambda ||\n      frag.type === WorkspaceFragmentType.NodeScript ||\n      frag.type === WorkspaceFragmentType.StandaloneLambda\n    ) {\n      needSharedNode = true;\n    } else if (frag.type === WorkspaceFragmentType.WebApp) {\n      needSharedNode = true;\n      needSharedWeb = true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    else if (frag.type === WorkspaceFragmentType.StaticWebsite) {\n      needSharedWeb = true;\n    } else {\n      neverHappens(frag);\n    }\n  }\n\n  // Add the necessary fragments\n  newFrags.push({type: WorkspaceFragmentType.Shared});\n  if (needSharedNode) {\n    newFrags.push({type: WorkspaceFragmentType.SharedNode});\n  }\n  if (needSharedWeb) {\n    newFrags.push({type: WorkspaceFragmentType.SharedWeb});\n  }\n  return newFrags;\n}\n\ninitProject().catch(error);\n"],"names":["__WEBPACK_EXTERNAL_createRequire","url","error","console","log","ProjectType","EslintType","TsConfigType","WebpackType","PROJECT_TYPE_TO_METADATA","Web","eslint","tsconfig","webpack","LambdaFunction","Node","Lambda","LambdaApi","LambdaWebApi","NodeScript","Shared","Lib","SharedNode","SharedWeb","WorkspaceFragmentType","filterFragments","frags","type","filter","frag","access","readFile","readFileInternal","readdir","stat","promises","writeFile","mkdir","rm","async","path","toString","prettierConfig","parser","printWidth","singleQuote","trailingComma","bracketSpacing","arrowParens","endOfLine","prettierFormat","str","format","writeRawFile","content","dirname","recursive","prettyJson","json","opts","compact","JSON","stringify","undefined","prettyJsonc","prettyJs","js","listFiles","files","ents","withFileTypes","ent","entPath","join","name","isDirectory","push","then","subFiles","isFile","Promise","all","pascalCase","toLowerCase","split","map","s","value","firstChar","toUpperCase","slice","capitalize","lowerCase","generateSharedApiFile","webApps","apiLambdas","webApp","appName","apiLambda","apiName","trim","generateSharedModelFile","webAppsWithAuth","userType","ALPHANUM","randomStringSafe","length","set","result","characters","bytes","randomBytes","byte","Math","floor","TEMPLATES_PATH","fileURLToPath","generateProject","dst","project","allFragments","workspace","workspaceName","written","projectName","vars","defaultVars","__WORKSPACE_NAME__","__WORKSPACE_NAME_UPPERCASE__","__COOKIE_ENCRYPTION_KEY__","templatePath","filesToWrite","relativePath","relative","file","dstPath","endsWith","packageJson","parse","varName","varValue","Object","entries","replaceAll","WebApp","ApiLambda","app","authentication","enabled","hasApi","generateSharedFiles","formattedContent","skipFileMatches","matchAll","skipFileMatch","flagName","negate","flagValue","groups","flagMatch","fileLines","depth","line","includes","pop","matchStart","exec","at","writeWorkspaceFile","flag","projectFlagMatchValue","flags","PACKAGE_VERSIONS","prettier","runner","lambdaServerRuntime","TYPESCRIPT_VERSION","NODE_VERSION","uniq","val","Set","values","generateWorkspacePackageJson","projects","eslintRuntimes","p","tsconfigRuntimes","webpackRuntimes","license","engines","node","scripts","setup","deploy","build","watch","devDependencies","fromEntries","runtime","sort","d1","d2","localeCompare","generateAwsProviderTerraform","region","generateS3BucketTerraform","webProjectNames","CODE_BUCKET","replace","CLOUDFRONT_ACCESS","out","notUndefined","removeUndefined","arr","neverHappens","errorMessage","Error","asMap","defaultValue","Array","isArray","asString","asStringOrThrow","valueAsString","asArray","asMapArray","asNumber","isNaN","parsedValue","parseFloat","asBoolean","generateCommonTerraform","workspaceOptions","generateWorkspaceProjectTerraform","terraform","domain","originId","subDomain","rootDomain","generateFrontendTerraform","api","webAppName","alarmEmail","cloudwatchTriggerMinutes","generateLambdaTerraform","generateDynamoUserTerraform","prefixLower","generateDynamoUserSessionTerraform","generateCodeWorkspace","workspaceFragments","projectNames","flatMap","f","getProjectsFromWorkspaceFragment","folders","settings","extensions","recommendations","readWorkspace","workspacePath","workspaceContent","maybeReadFile","workspaceData","fragments","fragData","StaticWebsite","websiteName","scriptName","StandaloneLambda","lambdaName","version","fileData","hash","options","DEFAULT_REGION","booleanFlag","bool","find","fragmentFlags","baseFlags","HAS_API","parseDomain","domainStr","parts","fragment","fromFragment","__PROJECT_NAME__","__APP_NAME__","__PROJECT_NAME_UPPERCASE__","backendName","frontendName","__APP_NAME_UPPERCASE__","__APP_NAME_PASCALCASE__","AUTHENTICATION","generateWorkspace","projectFiles","SCRIPTS_PATH","workspaceFiles","res","vscodePath","vscodeFileList","vscodeFiles","terraformFiles","addLineBreak","f1","f2","writeWorkspace","flat","commands","execSync","stdio","process","cwd","root","newHash","data","createHash","update","digest","md5","oldHash","fileToWrite","l","askForWorkspaceRegion","workspaceRegion","prompt","message","initial","validate","v","VALID_PROJECT_NAME","askForProjectName","question","takenNames","index","test","askForAlarmEmail","defaultVal","email","askForAlarmEmailValue","askForDomainName","askForDomainNameValue","askForAuthentication","askForCloudwatchTriggerValue","minutes","minutesValue","Number","I_AM_DONE","WorkspaceFragmentTypeToString","askForNewWorkspaceFragment","workspaceFragmentType","choices","title","askForCloudwatchTrigger","askForWorkspaceFragmentUpdate","attribute","askForStaticWebsiteFragmentUpdate","askForStandaloneLambdaFragmentUpdate","askForApiLambdaFragmentUpdate","askForWebAppFragmentUpdate","askForNodeScriptFragmentUpdate","workspaceFragmentString","askForWorkspaceFragments","action","newFrags","workspaceFragmentIndex","hasChanged","newFrag","nextNewFrag","askForWorkspaceUpdate","removeBaseFragments","askForWorkspaceName","basename","err","String","needSharedWeb","needSharedNode","refreshBaseFragments","initProject","catch"],"sourceRoot":""}